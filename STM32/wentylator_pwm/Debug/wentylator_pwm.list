
wentylator_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b00  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08007c98  08007c98  00017c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cb8  08007cb8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007cb8  08007cb8  00017cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007cc0  08007cc0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cc0  08007cc0  00017cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007cc4  08007cc4  00017cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007cc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  20000010  08007cd8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  08007cd8  000202d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f9f8  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020f5  00000000  00000000  0002fa7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001000  00000000  00000000  00031b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c9c  00000000  00000000  00032b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000170f6  00000000  00000000  0003380c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011cbb  00000000  00000000  0004a902  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097dc7  00000000  00000000  0005c5bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000046b8  00000000  00000000  000f4384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000f8a3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007c80 	.word	0x08007c80

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08007c80 	.word	0x08007c80

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_uldivmod>:
 8000b24:	b953      	cbnz	r3, 8000b3c <__aeabi_uldivmod+0x18>
 8000b26:	b94a      	cbnz	r2, 8000b3c <__aeabi_uldivmod+0x18>
 8000b28:	2900      	cmp	r1, #0
 8000b2a:	bf08      	it	eq
 8000b2c:	2800      	cmpeq	r0, #0
 8000b2e:	bf1c      	itt	ne
 8000b30:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b34:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b38:	f000 b970 	b.w	8000e1c <__aeabi_idiv0>
 8000b3c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b40:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b44:	f000 f806 	bl	8000b54 <__udivmoddi4>
 8000b48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b50:	b004      	add	sp, #16
 8000b52:	4770      	bx	lr

08000b54 <__udivmoddi4>:
 8000b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b58:	9e08      	ldr	r6, [sp, #32]
 8000b5a:	460d      	mov	r5, r1
 8000b5c:	4604      	mov	r4, r0
 8000b5e:	460f      	mov	r7, r1
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d14a      	bne.n	8000bfa <__udivmoddi4+0xa6>
 8000b64:	428a      	cmp	r2, r1
 8000b66:	4694      	mov	ip, r2
 8000b68:	d965      	bls.n	8000c36 <__udivmoddi4+0xe2>
 8000b6a:	fab2 f382 	clz	r3, r2
 8000b6e:	b143      	cbz	r3, 8000b82 <__udivmoddi4+0x2e>
 8000b70:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b74:	f1c3 0220 	rsb	r2, r3, #32
 8000b78:	409f      	lsls	r7, r3
 8000b7a:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7e:	4317      	orrs	r7, r2
 8000b80:	409c      	lsls	r4, r3
 8000b82:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b86:	fa1f f58c 	uxth.w	r5, ip
 8000b8a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b8e:	0c22      	lsrs	r2, r4, #16
 8000b90:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b94:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b98:	fb01 f005 	mul.w	r0, r1, r5
 8000b9c:	4290      	cmp	r0, r2
 8000b9e:	d90a      	bls.n	8000bb6 <__udivmoddi4+0x62>
 8000ba0:	eb1c 0202 	adds.w	r2, ip, r2
 8000ba4:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000ba8:	f080 811c 	bcs.w	8000de4 <__udivmoddi4+0x290>
 8000bac:	4290      	cmp	r0, r2
 8000bae:	f240 8119 	bls.w	8000de4 <__udivmoddi4+0x290>
 8000bb2:	3902      	subs	r1, #2
 8000bb4:	4462      	add	r2, ip
 8000bb6:	1a12      	subs	r2, r2, r0
 8000bb8:	b2a4      	uxth	r4, r4
 8000bba:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bbe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bc2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bc6:	fb00 f505 	mul.w	r5, r0, r5
 8000bca:	42a5      	cmp	r5, r4
 8000bcc:	d90a      	bls.n	8000be4 <__udivmoddi4+0x90>
 8000bce:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000bd6:	f080 8107 	bcs.w	8000de8 <__udivmoddi4+0x294>
 8000bda:	42a5      	cmp	r5, r4
 8000bdc:	f240 8104 	bls.w	8000de8 <__udivmoddi4+0x294>
 8000be0:	4464      	add	r4, ip
 8000be2:	3802      	subs	r0, #2
 8000be4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000be8:	1b64      	subs	r4, r4, r5
 8000bea:	2100      	movs	r1, #0
 8000bec:	b11e      	cbz	r6, 8000bf6 <__udivmoddi4+0xa2>
 8000bee:	40dc      	lsrs	r4, r3
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	e9c6 4300 	strd	r4, r3, [r6]
 8000bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfa:	428b      	cmp	r3, r1
 8000bfc:	d908      	bls.n	8000c10 <__udivmoddi4+0xbc>
 8000bfe:	2e00      	cmp	r6, #0
 8000c00:	f000 80ed 	beq.w	8000dde <__udivmoddi4+0x28a>
 8000c04:	2100      	movs	r1, #0
 8000c06:	e9c6 0500 	strd	r0, r5, [r6]
 8000c0a:	4608      	mov	r0, r1
 8000c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c10:	fab3 f183 	clz	r1, r3
 8000c14:	2900      	cmp	r1, #0
 8000c16:	d149      	bne.n	8000cac <__udivmoddi4+0x158>
 8000c18:	42ab      	cmp	r3, r5
 8000c1a:	d302      	bcc.n	8000c22 <__udivmoddi4+0xce>
 8000c1c:	4282      	cmp	r2, r0
 8000c1e:	f200 80f8 	bhi.w	8000e12 <__udivmoddi4+0x2be>
 8000c22:	1a84      	subs	r4, r0, r2
 8000c24:	eb65 0203 	sbc.w	r2, r5, r3
 8000c28:	2001      	movs	r0, #1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	2e00      	cmp	r6, #0
 8000c2e:	d0e2      	beq.n	8000bf6 <__udivmoddi4+0xa2>
 8000c30:	e9c6 4700 	strd	r4, r7, [r6]
 8000c34:	e7df      	b.n	8000bf6 <__udivmoddi4+0xa2>
 8000c36:	b902      	cbnz	r2, 8000c3a <__udivmoddi4+0xe6>
 8000c38:	deff      	udf	#255	; 0xff
 8000c3a:	fab2 f382 	clz	r3, r2
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	f040 8090 	bne.w	8000d64 <__udivmoddi4+0x210>
 8000c44:	1a8a      	subs	r2, r1, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f fe8c 	uxth.w	lr, ip
 8000c4e:	2101      	movs	r1, #1
 8000c50:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c54:	fb07 2015 	mls	r0, r7, r5, r2
 8000c58:	0c22      	lsrs	r2, r4, #16
 8000c5a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c5e:	fb0e f005 	mul.w	r0, lr, r5
 8000c62:	4290      	cmp	r0, r2
 8000c64:	d908      	bls.n	8000c78 <__udivmoddi4+0x124>
 8000c66:	eb1c 0202 	adds.w	r2, ip, r2
 8000c6a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0x122>
 8000c70:	4290      	cmp	r0, r2
 8000c72:	f200 80cb 	bhi.w	8000e0c <__udivmoddi4+0x2b8>
 8000c76:	4645      	mov	r5, r8
 8000c78:	1a12      	subs	r2, r2, r0
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c80:	fb07 2210 	mls	r2, r7, r0, r2
 8000c84:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c88:	fb0e fe00 	mul.w	lr, lr, r0
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d908      	bls.n	8000ca2 <__udivmoddi4+0x14e>
 8000c90:	eb1c 0404 	adds.w	r4, ip, r4
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c98:	d202      	bcs.n	8000ca0 <__udivmoddi4+0x14c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f200 80bb 	bhi.w	8000e16 <__udivmoddi4+0x2c2>
 8000ca0:	4610      	mov	r0, r2
 8000ca2:	eba4 040e 	sub.w	r4, r4, lr
 8000ca6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000caa:	e79f      	b.n	8000bec <__udivmoddi4+0x98>
 8000cac:	f1c1 0720 	rsb	r7, r1, #32
 8000cb0:	408b      	lsls	r3, r1
 8000cb2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cb6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cba:	fa05 f401 	lsl.w	r4, r5, r1
 8000cbe:	fa20 f307 	lsr.w	r3, r0, r7
 8000cc2:	40fd      	lsrs	r5, r7
 8000cc4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cc8:	4323      	orrs	r3, r4
 8000cca:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	fb09 5518 	mls	r5, r9, r8, r5
 8000cd6:	0c1c      	lsrs	r4, r3, #16
 8000cd8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cdc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ce0:	42a5      	cmp	r5, r4
 8000ce2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ce6:	fa00 f001 	lsl.w	r0, r0, r1
 8000cea:	d90b      	bls.n	8000d04 <__udivmoddi4+0x1b0>
 8000cec:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000cf4:	f080 8088 	bcs.w	8000e08 <__udivmoddi4+0x2b4>
 8000cf8:	42a5      	cmp	r5, r4
 8000cfa:	f240 8085 	bls.w	8000e08 <__udivmoddi4+0x2b4>
 8000cfe:	f1a8 0802 	sub.w	r8, r8, #2
 8000d02:	4464      	add	r4, ip
 8000d04:	1b64      	subs	r4, r4, r5
 8000d06:	b29d      	uxth	r5, r3
 8000d08:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d0c:	fb09 4413 	mls	r4, r9, r3, r4
 8000d10:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d14:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x1da>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000d24:	d26c      	bcs.n	8000e00 <__udivmoddi4+0x2ac>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	d96a      	bls.n	8000e00 <__udivmoddi4+0x2ac>
 8000d2a:	3b02      	subs	r3, #2
 8000d2c:	4464      	add	r4, ip
 8000d2e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d32:	fba3 9502 	umull	r9, r5, r3, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	42ac      	cmp	r4, r5
 8000d3c:	46c8      	mov	r8, r9
 8000d3e:	46ae      	mov	lr, r5
 8000d40:	d356      	bcc.n	8000df0 <__udivmoddi4+0x29c>
 8000d42:	d053      	beq.n	8000dec <__udivmoddi4+0x298>
 8000d44:	b156      	cbz	r6, 8000d5c <__udivmoddi4+0x208>
 8000d46:	ebb0 0208 	subs.w	r2, r0, r8
 8000d4a:	eb64 040e 	sbc.w	r4, r4, lr
 8000d4e:	fa04 f707 	lsl.w	r7, r4, r7
 8000d52:	40ca      	lsrs	r2, r1
 8000d54:	40cc      	lsrs	r4, r1
 8000d56:	4317      	orrs	r7, r2
 8000d58:	e9c6 7400 	strd	r7, r4, [r6]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	2100      	movs	r1, #0
 8000d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d64:	f1c3 0120 	rsb	r1, r3, #32
 8000d68:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d6c:	fa20 f201 	lsr.w	r2, r0, r1
 8000d70:	fa25 f101 	lsr.w	r1, r5, r1
 8000d74:	409d      	lsls	r5, r3
 8000d76:	432a      	orrs	r2, r5
 8000d78:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7c:	fa1f fe8c 	uxth.w	lr, ip
 8000d80:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d84:	fb07 1510 	mls	r5, r7, r0, r1
 8000d88:	0c11      	lsrs	r1, r2, #16
 8000d8a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d8e:	fb00 f50e 	mul.w	r5, r0, lr
 8000d92:	428d      	cmp	r5, r1
 8000d94:	fa04 f403 	lsl.w	r4, r4, r3
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x258>
 8000d9a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000da2:	d22f      	bcs.n	8000e04 <__udivmoddi4+0x2b0>
 8000da4:	428d      	cmp	r5, r1
 8000da6:	d92d      	bls.n	8000e04 <__udivmoddi4+0x2b0>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4461      	add	r1, ip
 8000dac:	1b49      	subs	r1, r1, r5
 8000dae:	b292      	uxth	r2, r2
 8000db0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000db4:	fb07 1115 	mls	r1, r7, r5, r1
 8000db8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dbc:	fb05 f10e 	mul.w	r1, r5, lr
 8000dc0:	4291      	cmp	r1, r2
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x282>
 8000dc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000dc8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000dcc:	d216      	bcs.n	8000dfc <__udivmoddi4+0x2a8>
 8000dce:	4291      	cmp	r1, r2
 8000dd0:	d914      	bls.n	8000dfc <__udivmoddi4+0x2a8>
 8000dd2:	3d02      	subs	r5, #2
 8000dd4:	4462      	add	r2, ip
 8000dd6:	1a52      	subs	r2, r2, r1
 8000dd8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ddc:	e738      	b.n	8000c50 <__udivmoddi4+0xfc>
 8000dde:	4631      	mov	r1, r6
 8000de0:	4630      	mov	r0, r6
 8000de2:	e708      	b.n	8000bf6 <__udivmoddi4+0xa2>
 8000de4:	4639      	mov	r1, r7
 8000de6:	e6e6      	b.n	8000bb6 <__udivmoddi4+0x62>
 8000de8:	4610      	mov	r0, r2
 8000dea:	e6fb      	b.n	8000be4 <__udivmoddi4+0x90>
 8000dec:	4548      	cmp	r0, r9
 8000dee:	d2a9      	bcs.n	8000d44 <__udivmoddi4+0x1f0>
 8000df0:	ebb9 0802 	subs.w	r8, r9, r2
 8000df4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000df8:	3b01      	subs	r3, #1
 8000dfa:	e7a3      	b.n	8000d44 <__udivmoddi4+0x1f0>
 8000dfc:	4645      	mov	r5, r8
 8000dfe:	e7ea      	b.n	8000dd6 <__udivmoddi4+0x282>
 8000e00:	462b      	mov	r3, r5
 8000e02:	e794      	b.n	8000d2e <__udivmoddi4+0x1da>
 8000e04:	4640      	mov	r0, r8
 8000e06:	e7d1      	b.n	8000dac <__udivmoddi4+0x258>
 8000e08:	46d0      	mov	r8, sl
 8000e0a:	e77b      	b.n	8000d04 <__udivmoddi4+0x1b0>
 8000e0c:	3d02      	subs	r5, #2
 8000e0e:	4462      	add	r2, ip
 8000e10:	e732      	b.n	8000c78 <__udivmoddi4+0x124>
 8000e12:	4608      	mov	r0, r1
 8000e14:	e70a      	b.n	8000c2c <__udivmoddi4+0xd8>
 8000e16:	4464      	add	r4, ip
 8000e18:	3802      	subs	r0, #2
 8000e1a:	e742      	b.n	8000ca2 <__udivmoddi4+0x14e>

08000e1c <__aeabi_idiv0>:
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop

08000e20 <check>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int check(int j, int wd_ch, int wy_ch) {
 8000e20:	b5b0      	push	{r4, r5, r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
	static int b, z;
	if (j == 1) {
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d106      	bne.n	8000e40 <check+0x20>
		b = 0;
 8000e32:	4b55      	ldr	r3, [pc, #340]	; (8000f88 <check+0x168>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
		z = 0;
 8000e38:	4b54      	ldr	r3, [pc, #336]	; (8000f8c <check+0x16c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	e099      	b.n	8000f74 <check+0x154>
	} else if (j < wd_ch) {
 8000e40:	68fa      	ldr	r2, [r7, #12]
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	da10      	bge.n	8000e6a <check+0x4a>
		if (40 < cisnienie) {
 8000e48:	4b51      	ldr	r3, [pc, #324]	; (8000f90 <check+0x170>)
 8000e4a:	edd3 7a00 	vldr	s15, [r3]
 8000e4e:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8000f94 <check+0x174>
 8000e52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e5a:	f340 808b 	ble.w	8000f74 <check+0x154>
			z++;
 8000e5e:	4b4b      	ldr	r3, [pc, #300]	; (8000f8c <check+0x16c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	3301      	adds	r3, #1
 8000e64:	4a49      	ldr	r2, [pc, #292]	; (8000f8c <check+0x16c>)
 8000e66:	6013      	str	r3, [r2, #0]
 8000e68:	e084      	b.n	8000f74 <check+0x154>
		}
	}

	else if (j > wd_ch && j < wd_ch + wy_ch) {
 8000e6a:	68fa      	ldr	r2, [r7, #12]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	dd27      	ble.n	8000ec2 <check+0xa2>
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4413      	add	r3, r2
 8000e78:	68fa      	ldr	r2, [r7, #12]
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	da21      	bge.n	8000ec2 <check+0xa2>

		if ((0.5 * przeplyw_sredni) < przeplyw) {
 8000e7e:	4b46      	ldr	r3, [pc, #280]	; (8000f98 <check+0x178>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff fafa 	bl	800047c <__aeabi_i2d>
 8000e88:	f04f 0200 	mov.w	r2, #0
 8000e8c:	4b43      	ldr	r3, [pc, #268]	; (8000f9c <check+0x17c>)
 8000e8e:	f7ff fb5f 	bl	8000550 <__aeabi_dmul>
 8000e92:	4602      	mov	r2, r0
 8000e94:	460b      	mov	r3, r1
 8000e96:	4614      	mov	r4, r2
 8000e98:	461d      	mov	r5, r3
 8000e9a:	4b41      	ldr	r3, [pc, #260]	; (8000fa0 <check+0x180>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff fafe 	bl	80004a0 <__aeabi_f2d>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	4620      	mov	r0, r4
 8000eaa:	4629      	mov	r1, r5
 8000eac:	f7ff fdc2 	bl	8000a34 <__aeabi_dcmplt>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d05e      	beq.n	8000f74 <check+0x154>
			b++;
 8000eb6:	4b34      	ldr	r3, [pc, #208]	; (8000f88 <check+0x168>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	4a32      	ldr	r2, [pc, #200]	; (8000f88 <check+0x168>)
 8000ebe:	6013      	str	r3, [r2, #0]
		if ((0.5 * przeplyw_sredni) < przeplyw) {
 8000ec0:	e058      	b.n	8000f74 <check+0x154>

		}
	} else if (j == wd_ch + wy_ch) {
 8000ec2:	68ba      	ldr	r2, [r7, #8]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	68fa      	ldr	r2, [r7, #12]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d152      	bne.n	8000f74 <check+0x154>
		if (z > (0.1 * wd_ch)) {
 8000ece:	4b2f      	ldr	r3, [pc, #188]	; (8000f8c <check+0x16c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fad2 	bl	800047c <__aeabi_i2d>
 8000ed8:	4604      	mov	r4, r0
 8000eda:	460d      	mov	r5, r1
 8000edc:	68b8      	ldr	r0, [r7, #8]
 8000ede:	f7ff facd 	bl	800047c <__aeabi_i2d>
 8000ee2:	a327      	add	r3, pc, #156	; (adr r3, 8000f80 <check+0x160>)
 8000ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee8:	f7ff fb32 	bl	8000550 <__aeabi_dmul>
 8000eec:	4602      	mov	r2, r0
 8000eee:	460b      	mov	r3, r1
 8000ef0:	4620      	mov	r0, r4
 8000ef2:	4629      	mov	r1, r5
 8000ef4:	f7ff fdbc 	bl	8000a70 <__aeabi_dcmpgt>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <check+0xe2>
			return 2;
 8000efe:	2302      	movs	r3, #2
 8000f00:	e039      	b.n	8000f76 <check+0x156>
		}
		if (b > ((wd_ch + wy_ch) * 0.1)) {
 8000f02:	4b21      	ldr	r3, [pc, #132]	; (8000f88 <check+0x168>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff fab8 	bl	800047c <__aeabi_i2d>
 8000f0c:	4604      	mov	r4, r0
 8000f0e:	460d      	mov	r5, r1
 8000f10:	68ba      	ldr	r2, [r7, #8]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4413      	add	r3, r2
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff fab0 	bl	800047c <__aeabi_i2d>
 8000f1c:	a318      	add	r3, pc, #96	; (adr r3, 8000f80 <check+0x160>)
 8000f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f22:	f7ff fb15 	bl	8000550 <__aeabi_dmul>
 8000f26:	4602      	mov	r2, r0
 8000f28:	460b      	mov	r3, r1
 8000f2a:	4620      	mov	r0, r4
 8000f2c:	4629      	mov	r1, r5
 8000f2e:	f7ff fd9f 	bl	8000a70 <__aeabi_dcmpgt>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d01b      	beq.n	8000f70 <check+0x150>
			if (z > (0.1 * wd_ch)) {
 8000f38:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <check+0x16c>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fa9d 	bl	800047c <__aeabi_i2d>
 8000f42:	4604      	mov	r4, r0
 8000f44:	460d      	mov	r5, r1
 8000f46:	68b8      	ldr	r0, [r7, #8]
 8000f48:	f7ff fa98 	bl	800047c <__aeabi_i2d>
 8000f4c:	a30c      	add	r3, pc, #48	; (adr r3, 8000f80 <check+0x160>)
 8000f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f52:	f7ff fafd 	bl	8000550 <__aeabi_dmul>
 8000f56:	4602      	mov	r2, r0
 8000f58:	460b      	mov	r3, r1
 8000f5a:	4620      	mov	r0, r4
 8000f5c:	4629      	mov	r1, r5
 8000f5e:	f7ff fd87 	bl	8000a70 <__aeabi_dcmpgt>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <check+0x14c>
				return 2;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	e004      	b.n	8000f76 <check+0x156>
			} else {
				return 1;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e002      	b.n	8000f76 <check+0x156>
			}

		} else
			return 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	e000      	b.n	8000f76 <check+0x156>
	}
	return 0;
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bdb0      	pop	{r4, r5, r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	9999999a 	.word	0x9999999a
 8000f84:	3fb99999 	.word	0x3fb99999
 8000f88:	200002b4 	.word	0x200002b4
 8000f8c:	200002b8 	.word	0x200002b8
 8000f90:	20000264 	.word	0x20000264
 8000f94:	42200000 	.word	0x42200000
 8000f98:	200002ac 	.word	0x200002ac
 8000f9c:	3fe00000 	.word	0x3fe00000
 8000fa0:	20000270 	.word	0x20000270
 8000fa4:	00000000 	.word	0x00000000

08000fa8 <tryb_objetosc>:

void tryb_objetosc(int obj, int c_wdechu, int c_wydechu, int peep) {
 8000fa8:	b5b0      	push	{r4, r5, r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
 8000fb4:	603b      	str	r3, [r7, #0]
	static uint16_t t;
	static int went;

	t++;
 8000fb6:	4b86      	ldr	r3, [pc, #536]	; (80011d0 <tryb_objetosc+0x228>)
 8000fb8:	881b      	ldrh	r3, [r3, #0]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	b29a      	uxth	r2, r3
 8000fbe:	4b84      	ldr	r3, [pc, #528]	; (80011d0 <tryb_objetosc+0x228>)
 8000fc0:	801a      	strh	r2, [r3, #0]

	uint16_t t_wd = c_wdechu / 10;
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	4a83      	ldr	r2, [pc, #524]	; (80011d4 <tryb_objetosc+0x22c>)
 8000fc6:	fb82 1203 	smull	r1, r2, r2, r3
 8000fca:	1092      	asrs	r2, r2, #2
 8000fcc:	17db      	asrs	r3, r3, #31
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	82fb      	strh	r3, [r7, #22]
	uint16_t t_wy = c_wydechu / 10;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a7f      	ldr	r2, [pc, #508]	; (80011d4 <tryb_objetosc+0x22c>)
 8000fd6:	fb82 1203 	smull	r1, r2, r2, r3
 8000fda:	1092      	asrs	r2, r2, #2
 8000fdc:	17db      	asrs	r3, r3, #31
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	82bb      	strh	r3, [r7, #20]

	if (c_wdechu == 0)
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	f000 80e7 	beq.w	80011b8 <tryb_objetosc+0x210>
		return;
	blad = check(t, t_wd, t_wy);
 8000fea:	4b79      	ldr	r3, [pc, #484]	; (80011d0 <tryb_objetosc+0x228>)
 8000fec:	881b      	ldrh	r3, [r3, #0]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	8afb      	ldrh	r3, [r7, #22]
 8000ff2:	8aba      	ldrh	r2, [r7, #20]
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f7ff ff13 	bl	8000e20 <check>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	4b76      	ldr	r3, [pc, #472]	; (80011d8 <tryb_objetosc+0x230>)
 8001000:	701a      	strb	r2, [r3, #0]
	went = (obj * 1000) / (c_wdechu);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001008:	fb03 f202 	mul.w	r2, r3, r2
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001012:	4a72      	ldr	r2, [pc, #456]	; (80011dc <tryb_objetosc+0x234>)
 8001014:	6013      	str	r3, [r2, #0]

	if (t < t_wd) {
 8001016:	4b6e      	ldr	r3, [pc, #440]	; (80011d0 <tryb_objetosc+0x228>)
 8001018:	881b      	ldrh	r3, [r3, #0]
 800101a:	8afa      	ldrh	r2, [r7, #22]
 800101c:	429a      	cmp	r2, r3
 800101e:	f240 8093 	bls.w	8001148 <tryb_objetosc+0x1a0>
		faza = 1;
 8001022:	4b6f      	ldr	r3, [pc, #444]	; (80011e0 <tryb_objetosc+0x238>)
 8001024:	2201      	movs	r2, #1
 8001026:	701a      	strb	r2, [r3, #0]
		if (pwm > 1000)
 8001028:	4b6e      	ldr	r3, [pc, #440]	; (80011e4 <tryb_objetosc+0x23c>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001030:	dd03      	ble.n	800103a <tryb_objetosc+0x92>
			pwm = 1000;
 8001032:	4b6c      	ldr	r3, [pc, #432]	; (80011e4 <tryb_objetosc+0x23c>)
 8001034:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001038:	601a      	str	r2, [r3, #0]
		if (pwm < 0)
 800103a:	4b6a      	ldr	r3, [pc, #424]	; (80011e4 <tryb_objetosc+0x23c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2b00      	cmp	r3, #0
 8001040:	da02      	bge.n	8001048 <tryb_objetosc+0xa0>
			pwm = 0;
 8001042:	4b68      	ldr	r3, [pc, #416]	; (80011e4 <tryb_objetosc+0x23c>)
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, (uint16_t )pwm);
 8001048:	4b66      	ldr	r3, [pc, #408]	; (80011e4 <tryb_objetosc+0x23c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	b29a      	uxth	r2, r3
 800104e:	4b66      	ldr	r3, [pc, #408]	; (80011e8 <tryb_objetosc+0x240>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	635a      	str	r2, [r3, #52]	; 0x34
		if (przeplyw_sredni > (1.05 * went)) { //&& t % 2 == 1) {
 8001054:	4b65      	ldr	r3, [pc, #404]	; (80011ec <tryb_objetosc+0x244>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fa0f 	bl	800047c <__aeabi_i2d>
 800105e:	4604      	mov	r4, r0
 8001060:	460d      	mov	r5, r1
 8001062:	4b5e      	ldr	r3, [pc, #376]	; (80011dc <tryb_objetosc+0x234>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fa08 	bl	800047c <__aeabi_i2d>
 800106c:	a354      	add	r3, pc, #336	; (adr r3, 80011c0 <tryb_objetosc+0x218>)
 800106e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001072:	f7ff fa6d 	bl	8000550 <__aeabi_dmul>
 8001076:	4602      	mov	r2, r0
 8001078:	460b      	mov	r3, r1
 800107a:	4620      	mov	r0, r4
 800107c:	4629      	mov	r1, r5
 800107e:	f7ff fcf7 	bl	8000a70 <__aeabi_dcmpgt>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d004      	beq.n	8001092 <tryb_objetosc+0xea>

			pwm--;
 8001088:	4b56      	ldr	r3, [pc, #344]	; (80011e4 <tryb_objetosc+0x23c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	3b01      	subs	r3, #1
 800108e:	4a55      	ldr	r2, [pc, #340]	; (80011e4 <tryb_objetosc+0x23c>)
 8001090:	6013      	str	r3, [r2, #0]

		}
		if (przeplyw_sredni < (0.95 * went)) { //&& t % 2 == 1) {
 8001092:	4b56      	ldr	r3, [pc, #344]	; (80011ec <tryb_objetosc+0x244>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff f9f0 	bl	800047c <__aeabi_i2d>
 800109c:	4604      	mov	r4, r0
 800109e:	460d      	mov	r5, r1
 80010a0:	4b4e      	ldr	r3, [pc, #312]	; (80011dc <tryb_objetosc+0x234>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff f9e9 	bl	800047c <__aeabi_i2d>
 80010aa:	a347      	add	r3, pc, #284	; (adr r3, 80011c8 <tryb_objetosc+0x220>)
 80010ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b0:	f7ff fa4e 	bl	8000550 <__aeabi_dmul>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	4620      	mov	r0, r4
 80010ba:	4629      	mov	r1, r5
 80010bc:	f7ff fcba 	bl	8000a34 <__aeabi_dcmplt>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d004      	beq.n	80010d0 <tryb_objetosc+0x128>
			pwm++;
 80010c6:	4b47      	ldr	r3, [pc, #284]	; (80011e4 <tryb_objetosc+0x23c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	3301      	adds	r3, #1
 80010cc:	4a45      	ldr	r2, [pc, #276]	; (80011e4 <tryb_objetosc+0x23c>)
 80010ce:	6013      	str	r3, [r2, #0]
		}
		if (objetosc > obj) {
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	ee07 3a90 	vmov	s15, r3
 80010d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010da:	4b45      	ldr	r3, [pc, #276]	; (80011f0 <tryb_objetosc+0x248>)
 80010dc:	edd3 7a00 	vldr	s15, [r3]
 80010e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e8:	d505      	bpl.n	80010f6 <tryb_objetosc+0x14e>
			HAL_GPIO_WritePin(ZAWOR_GPIO_Port, ZAWOR_Pin, 0);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2104      	movs	r1, #4
 80010ee:	4841      	ldr	r0, [pc, #260]	; (80011f4 <tryb_objetosc+0x24c>)
 80010f0:	f002 fc0a 	bl	8003908 <HAL_GPIO_WritePin>
 80010f4:	e061      	b.n	80011ba <tryb_objetosc+0x212>

		} else {
			HAL_GPIO_WritePin(ZAWOR_GPIO_Port, ZAWOR_Pin, 1);
 80010f6:	2201      	movs	r2, #1
 80010f8:	2104      	movs	r1, #4
 80010fa:	483e      	ldr	r0, [pc, #248]	; (80011f4 <tryb_objetosc+0x24c>)
 80010fc:	f002 fc04 	bl	8003908 <HAL_GPIO_WritePin>
			if (t > 10) {
 8001100:	4b33      	ldr	r3, [pc, #204]	; (80011d0 <tryb_objetosc+0x228>)
 8001102:	881b      	ldrh	r3, [r3, #0]
 8001104:	2b0a      	cmp	r3, #10
 8001106:	d958      	bls.n	80011ba <tryb_objetosc+0x212>
				przeplyw_sredni *= 19;
 8001108:	4b38      	ldr	r3, [pc, #224]	; (80011ec <tryb_objetosc+0x244>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4613      	mov	r3, r2
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	4413      	add	r3, r2
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	4413      	add	r3, r2
 8001116:	4a35      	ldr	r2, [pc, #212]	; (80011ec <tryb_objetosc+0x244>)
 8001118:	6013      	str	r3, [r2, #0]
				przeplyw_sredni += (int) przeplyw;
 800111a:	4b37      	ldr	r3, [pc, #220]	; (80011f8 <tryb_objetosc+0x250>)
 800111c:	edd3 7a00 	vldr	s15, [r3]
 8001120:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001124:	ee17 2a90 	vmov	r2, s15
 8001128:	4b30      	ldr	r3, [pc, #192]	; (80011ec <tryb_objetosc+0x244>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4413      	add	r3, r2
 800112e:	4a2f      	ldr	r2, [pc, #188]	; (80011ec <tryb_objetosc+0x244>)
 8001130:	6013      	str	r3, [r2, #0]
				przeplyw_sredni /= 20;
 8001132:	4b2e      	ldr	r3, [pc, #184]	; (80011ec <tryb_objetosc+0x244>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a27      	ldr	r2, [pc, #156]	; (80011d4 <tryb_objetosc+0x22c>)
 8001138:	fb82 1203 	smull	r1, r2, r2, r3
 800113c:	10d2      	asrs	r2, r2, #3
 800113e:	17db      	asrs	r3, r3, #31
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	4a2a      	ldr	r2, [pc, #168]	; (80011ec <tryb_objetosc+0x244>)
 8001144:	6013      	str	r3, [r2, #0]
 8001146:	e038      	b.n	80011ba <tryb_objetosc+0x212>
//		if (cisnienie > 25) {
//			HAL_GPIO_WritePin(ZAWOR_GPIO_Port, ZAWOR_Pin, 0);
////			return;
//		}

	} else if (t == t_wd) {
 8001148:	4b21      	ldr	r3, [pc, #132]	; (80011d0 <tryb_objetosc+0x228>)
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	8afa      	ldrh	r2, [r7, #22]
 800114e:	429a      	cmp	r2, r3
 8001150:	d108      	bne.n	8001164 <tryb_objetosc+0x1bc>
		faza = 0;
 8001152:	4b23      	ldr	r3, [pc, #140]	; (80011e0 <tryb_objetosc+0x238>)
 8001154:	2200      	movs	r2, #0
 8001156:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(ZAWOR_GPIO_Port, ZAWOR_Pin, 0);
 8001158:	2200      	movs	r2, #0
 800115a:	2104      	movs	r1, #4
 800115c:	4825      	ldr	r0, [pc, #148]	; (80011f4 <tryb_objetosc+0x24c>)
 800115e:	f002 fbd3 	bl	8003908 <HAL_GPIO_WritePin>
 8001162:	e02a      	b.n	80011ba <tryb_objetosc+0x212>

	} else if (t >= t_wd && t < (t_wd + t_wy)) {
 8001164:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <tryb_objetosc+0x228>)
 8001166:	881b      	ldrh	r3, [r3, #0]
 8001168:	8afa      	ldrh	r2, [r7, #22]
 800116a:	429a      	cmp	r2, r3
 800116c:	d820      	bhi.n	80011b0 <tryb_objetosc+0x208>
 800116e:	4b18      	ldr	r3, [pc, #96]	; (80011d0 <tryb_objetosc+0x228>)
 8001170:	881b      	ldrh	r3, [r3, #0]
 8001172:	4619      	mov	r1, r3
 8001174:	8afa      	ldrh	r2, [r7, #22]
 8001176:	8abb      	ldrh	r3, [r7, #20]
 8001178:	4413      	add	r3, r2
 800117a:	4299      	cmp	r1, r3
 800117c:	da18      	bge.n	80011b0 <tryb_objetosc+0x208>

		if (cisnienie < peep) {
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001188:	4b1c      	ldr	r3, [pc, #112]	; (80011fc <tryb_objetosc+0x254>)
 800118a:	edd3 7a00 	vldr	s15, [r3]
 800118e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001196:	dd05      	ble.n	80011a4 <tryb_objetosc+0x1fc>
			HAL_GPIO_WritePin(ZAWOR_GPIO_Port, ZAWOR_Pin, 1);
 8001198:	2201      	movs	r2, #1
 800119a:	2104      	movs	r1, #4
 800119c:	4815      	ldr	r0, [pc, #84]	; (80011f4 <tryb_objetosc+0x24c>)
 800119e:	f002 fbb3 	bl	8003908 <HAL_GPIO_WritePin>
		if (cisnienie < peep) {
 80011a2:	e00a      	b.n	80011ba <tryb_objetosc+0x212>

		} else
			HAL_GPIO_WritePin(ZAWOR_GPIO_Port, ZAWOR_Pin, 0);
 80011a4:	2200      	movs	r2, #0
 80011a6:	2104      	movs	r1, #4
 80011a8:	4812      	ldr	r0, [pc, #72]	; (80011f4 <tryb_objetosc+0x24c>)
 80011aa:	f002 fbad 	bl	8003908 <HAL_GPIO_WritePin>
		if (cisnienie < peep) {
 80011ae:	e004      	b.n	80011ba <tryb_objetosc+0x212>

	} else {
		t = 0;
 80011b0:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <tryb_objetosc+0x228>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	801a      	strh	r2, [r3, #0]
 80011b6:	e000      	b.n	80011ba <tryb_objetosc+0x212>
		return;
 80011b8:	bf00      	nop

	}

}
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bdb0      	pop	{r4, r5, r7, pc}
 80011c0:	cccccccd 	.word	0xcccccccd
 80011c4:	3ff0cccc 	.word	0x3ff0cccc
 80011c8:	66666666 	.word	0x66666666
 80011cc:	3fee6666 	.word	0x3fee6666
 80011d0:	200002bc 	.word	0x200002bc
 80011d4:	66666667 	.word	0x66666667
 80011d8:	200002a8 	.word	0x200002a8
 80011dc:	200002c0 	.word	0x200002c0
 80011e0:	200002b0 	.word	0x200002b0
 80011e4:	20000000 	.word	0x20000000
 80011e8:	200001c8 	.word	0x200001c8
 80011ec:	200002ac 	.word	0x200002ac
 80011f0:	20000274 	.word	0x20000274
 80011f4:	40020400 	.word	0x40020400
 80011f8:	20000270 	.word	0x20000270
 80011fc:	20000264 	.word	0x20000264

08001200 <tryb_cisnienie>:



void tryb_cisnienie(int cis, int c_wdechu, int c_wydechu, int peep) {
 8001200:	b5b0      	push	{r4, r5, r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
 800120c:	603b      	str	r3, [r7, #0]
	static uint16_t t;

	t++;
 800120e:	4b64      	ldr	r3, [pc, #400]	; (80013a0 <tryb_cisnienie+0x1a0>)
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	3301      	adds	r3, #1
 8001214:	b29a      	uxth	r2, r3
 8001216:	4b62      	ldr	r3, [pc, #392]	; (80013a0 <tryb_cisnienie+0x1a0>)
 8001218:	801a      	strh	r2, [r3, #0]
	uint16_t t_wd = c_wdechu / 10;
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	4a61      	ldr	r2, [pc, #388]	; (80013a4 <tryb_cisnienie+0x1a4>)
 800121e:	fb82 1203 	smull	r1, r2, r2, r3
 8001222:	1092      	asrs	r2, r2, #2
 8001224:	17db      	asrs	r3, r3, #31
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	82fb      	strh	r3, [r7, #22]
	uint16_t t_wy = c_wydechu / 10;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a5d      	ldr	r2, [pc, #372]	; (80013a4 <tryb_cisnienie+0x1a4>)
 800122e:	fb82 1203 	smull	r1, r2, r2, r3
 8001232:	1092      	asrs	r2, r2, #2
 8001234:	17db      	asrs	r3, r3, #31
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	82bb      	strh	r3, [r7, #20]

	if (t < t_wd) {
 800123a:	4b59      	ldr	r3, [pc, #356]	; (80013a0 <tryb_cisnienie+0x1a0>)
 800123c:	881b      	ldrh	r3, [r3, #0]
 800123e:	8afa      	ldrh	r2, [r7, #22]
 8001240:	429a      	cmp	r2, r3
 8001242:	d96e      	bls.n	8001322 <tryb_cisnienie+0x122>
		faza = 1;
 8001244:	4b58      	ldr	r3, [pc, #352]	; (80013a8 <tryb_cisnienie+0x1a8>)
 8001246:	2201      	movs	r2, #1
 8001248:	701a      	strb	r2, [r3, #0]
		if (pwm > 1000)
 800124a:	4b58      	ldr	r3, [pc, #352]	; (80013ac <tryb_cisnienie+0x1ac>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001252:	dd03      	ble.n	800125c <tryb_cisnienie+0x5c>
			pwm = 1000;
 8001254:	4b55      	ldr	r3, [pc, #340]	; (80013ac <tryb_cisnienie+0x1ac>)
 8001256:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800125a:	601a      	str	r2, [r3, #0]
		if (pwm < 0)
 800125c:	4b53      	ldr	r3, [pc, #332]	; (80013ac <tryb_cisnienie+0x1ac>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	da02      	bge.n	800126a <tryb_cisnienie+0x6a>
			pwm = 0;
 8001264:	4b51      	ldr	r3, [pc, #324]	; (80013ac <tryb_cisnienie+0x1ac>)
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, (uint16_t )pwm);
 800126a:	4b50      	ldr	r3, [pc, #320]	; (80013ac <tryb_cisnienie+0x1ac>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	b29a      	uxth	r2, r3
 8001270:	4b4f      	ldr	r3, [pc, #316]	; (80013b0 <tryb_cisnienie+0x1b0>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	635a      	str	r2, [r3, #52]	; 0x34

		if (cis_sredni > cis) {
 8001276:	4b4f      	ldr	r3, [pc, #316]	; (80013b4 <tryb_cisnienie+0x1b4>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	68fa      	ldr	r2, [r7, #12]
 800127c:	429a      	cmp	r2, r3
 800127e:	da0a      	bge.n	8001296 <tryb_cisnienie+0x96>
			pwm--;
 8001280:	4b4a      	ldr	r3, [pc, #296]	; (80013ac <tryb_cisnienie+0x1ac>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	3b01      	subs	r3, #1
 8001286:	4a49      	ldr	r2, [pc, #292]	; (80013ac <tryb_cisnienie+0x1ac>)
 8001288:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(ZAWOR_GPIO_Port, ZAWOR_Pin, 0);
 800128a:	2200      	movs	r2, #0
 800128c:	2104      	movs	r1, #4
 800128e:	484a      	ldr	r0, [pc, #296]	; (80013b8 <tryb_cisnienie+0x1b8>)
 8001290:	f002 fb3a 	bl	8003908 <HAL_GPIO_WritePin>
 8001294:	e01c      	b.n	80012d0 <tryb_cisnienie+0xd0>

		}

		else if (cis_sredni < (0.8 * cis)) {
 8001296:	4b47      	ldr	r3, [pc, #284]	; (80013b4 <tryb_cisnienie+0x1b4>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff f8ee 	bl	800047c <__aeabi_i2d>
 80012a0:	4604      	mov	r4, r0
 80012a2:	460d      	mov	r5, r1
 80012a4:	68f8      	ldr	r0, [r7, #12]
 80012a6:	f7ff f8e9 	bl	800047c <__aeabi_i2d>
 80012aa:	a33b      	add	r3, pc, #236	; (adr r3, 8001398 <tryb_cisnienie+0x198>)
 80012ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b0:	f7ff f94e 	bl	8000550 <__aeabi_dmul>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	4620      	mov	r0, r4
 80012ba:	4629      	mov	r1, r5
 80012bc:	f7ff fbba 	bl	8000a34 <__aeabi_dcmplt>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d004      	beq.n	80012d0 <tryb_cisnienie+0xd0>
			pwm++;
 80012c6:	4b39      	ldr	r3, [pc, #228]	; (80013ac <tryb_cisnienie+0x1ac>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	3301      	adds	r3, #1
 80012cc:	4a37      	ldr	r2, [pc, #220]	; (80013ac <tryb_cisnienie+0x1ac>)
 80012ce:	6013      	str	r3, [r2, #0]
		}
		HAL_GPIO_WritePin(ZAWOR_GPIO_Port, ZAWOR_Pin, 1);
 80012d0:	2201      	movs	r2, #1
 80012d2:	2104      	movs	r1, #4
 80012d4:	4838      	ldr	r0, [pc, #224]	; (80013b8 <tryb_cisnienie+0x1b8>)
 80012d6:	f002 fb17 	bl	8003908 <HAL_GPIO_WritePin>

		if (t > 20) {
 80012da:	4b31      	ldr	r3, [pc, #196]	; (80013a0 <tryb_cisnienie+0x1a0>)
 80012dc:	881b      	ldrh	r3, [r3, #0]
 80012de:	2b14      	cmp	r3, #20
 80012e0:	d956      	bls.n	8001390 <tryb_cisnienie+0x190>
			cis_sredni *= 19;
 80012e2:	4b34      	ldr	r3, [pc, #208]	; (80013b4 <tryb_cisnienie+0x1b4>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	4613      	mov	r3, r2
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	4413      	add	r3, r2
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	4413      	add	r3, r2
 80012f0:	4a30      	ldr	r2, [pc, #192]	; (80013b4 <tryb_cisnienie+0x1b4>)
 80012f2:	6013      	str	r3, [r2, #0]
			cis_sredni += (int) cisnienie;
 80012f4:	4b31      	ldr	r3, [pc, #196]	; (80013bc <tryb_cisnienie+0x1bc>)
 80012f6:	edd3 7a00 	vldr	s15, [r3]
 80012fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012fe:	ee17 2a90 	vmov	r2, s15
 8001302:	4b2c      	ldr	r3, [pc, #176]	; (80013b4 <tryb_cisnienie+0x1b4>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4413      	add	r3, r2
 8001308:	4a2a      	ldr	r2, [pc, #168]	; (80013b4 <tryb_cisnienie+0x1b4>)
 800130a:	6013      	str	r3, [r2, #0]
			cis_sredni /= 20;
 800130c:	4b29      	ldr	r3, [pc, #164]	; (80013b4 <tryb_cisnienie+0x1b4>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a24      	ldr	r2, [pc, #144]	; (80013a4 <tryb_cisnienie+0x1a4>)
 8001312:	fb82 1203 	smull	r1, r2, r2, r3
 8001316:	10d2      	asrs	r2, r2, #3
 8001318:	17db      	asrs	r3, r3, #31
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	4a25      	ldr	r2, [pc, #148]	; (80013b4 <tryb_cisnienie+0x1b4>)
 800131e:	6013      	str	r3, [r2, #0]
	} else {
		t = 0;

	}

}
 8001320:	e036      	b.n	8001390 <tryb_cisnienie+0x190>
	} else if (t == t_wd) {
 8001322:	4b1f      	ldr	r3, [pc, #124]	; (80013a0 <tryb_cisnienie+0x1a0>)
 8001324:	881b      	ldrh	r3, [r3, #0]
 8001326:	8afa      	ldrh	r2, [r7, #22]
 8001328:	429a      	cmp	r2, r3
 800132a:	d108      	bne.n	800133e <tryb_cisnienie+0x13e>
		faza = 0;
 800132c:	4b1e      	ldr	r3, [pc, #120]	; (80013a8 <tryb_cisnienie+0x1a8>)
 800132e:	2200      	movs	r2, #0
 8001330:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(ZAWOR_GPIO_Port, ZAWOR_Pin, 0);
 8001332:	2200      	movs	r2, #0
 8001334:	2104      	movs	r1, #4
 8001336:	4820      	ldr	r0, [pc, #128]	; (80013b8 <tryb_cisnienie+0x1b8>)
 8001338:	f002 fae6 	bl	8003908 <HAL_GPIO_WritePin>
}
 800133c:	e028      	b.n	8001390 <tryb_cisnienie+0x190>
	} else if (t >= t_wd && t < (t_wd + t_wy)) {
 800133e:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <tryb_cisnienie+0x1a0>)
 8001340:	881b      	ldrh	r3, [r3, #0]
 8001342:	8afa      	ldrh	r2, [r7, #22]
 8001344:	429a      	cmp	r2, r3
 8001346:	d81f      	bhi.n	8001388 <tryb_cisnienie+0x188>
 8001348:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <tryb_cisnienie+0x1a0>)
 800134a:	881b      	ldrh	r3, [r3, #0]
 800134c:	4619      	mov	r1, r3
 800134e:	8afa      	ldrh	r2, [r7, #22]
 8001350:	8abb      	ldrh	r3, [r7, #20]
 8001352:	4413      	add	r3, r2
 8001354:	4299      	cmp	r1, r3
 8001356:	da17      	bge.n	8001388 <tryb_cisnienie+0x188>
		HAL_GPIO_WritePin(ZAWOR_GPIO_Port, ZAWOR_Pin, 0);
 8001358:	2200      	movs	r2, #0
 800135a:	2104      	movs	r1, #4
 800135c:	4816      	ldr	r0, [pc, #88]	; (80013b8 <tryb_cisnienie+0x1b8>)
 800135e:	f002 fad3 	bl	8003908 <HAL_GPIO_WritePin>
		if (cisnienie < peep) {
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	ee07 3a90 	vmov	s15, r3
 8001368:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800136c:	4b13      	ldr	r3, [pc, #76]	; (80013bc <tryb_cisnienie+0x1bc>)
 800136e:	edd3 7a00 	vldr	s15, [r3]
 8001372:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800137a:	dd09      	ble.n	8001390 <tryb_cisnienie+0x190>
			HAL_GPIO_WritePin(ZAWOR_GPIO_Port, ZAWOR_Pin, 1);
 800137c:	2201      	movs	r2, #1
 800137e:	2104      	movs	r1, #4
 8001380:	480d      	ldr	r0, [pc, #52]	; (80013b8 <tryb_cisnienie+0x1b8>)
 8001382:	f002 fac1 	bl	8003908 <HAL_GPIO_WritePin>
		if (cisnienie < peep) {
 8001386:	e003      	b.n	8001390 <tryb_cisnienie+0x190>
		t = 0;
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <tryb_cisnienie+0x1a0>)
 800138a:	2200      	movs	r2, #0
 800138c:	801a      	strh	r2, [r3, #0]
}
 800138e:	e7ff      	b.n	8001390 <tryb_cisnienie+0x190>
 8001390:	bf00      	nop
 8001392:	3718      	adds	r7, #24
 8001394:	46bd      	mov	sp, r7
 8001396:	bdb0      	pop	{r4, r5, r7, pc}
 8001398:	9999999a 	.word	0x9999999a
 800139c:	3fe99999 	.word	0x3fe99999
 80013a0:	200002c4 	.word	0x200002c4
 80013a4:	66666667 	.word	0x66666667
 80013a8:	200002b0 	.word	0x200002b0
 80013ac:	20000000 	.word	0x20000000
 80013b0:	200001c8 	.word	0x200001c8
 80013b4:	2000029c 	.word	0x2000029c
 80013b8:	40020400 	.word	0x40020400
 80013bc:	20000264 	.word	0x20000264

080013c0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {		//oczytywanie danych z czujnika cisnienia
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
	static uint16_t adc_srednia[2] = { 0, 0 };
	uint8_t ilosc_probek[2] = { 30, 20 };
 80013c8:	f241 431e 	movw	r3, #5150	; 0x141e
 80013cc:	81bb      	strh	r3, [r7, #12]

//cisnienie
	adc_srednia[0] *= (ilosc_probek[0] - 1);
 80013ce:	4b72      	ldr	r3, [pc, #456]	; (8001598 <HAL_ADC_ConvCpltCallback+0x1d8>)
 80013d0:	881a      	ldrh	r2, [r3, #0]
 80013d2:	7b3b      	ldrb	r3, [r7, #12]
 80013d4:	3b01      	subs	r3, #1
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	fb12 f303 	smulbb	r3, r2, r3
 80013dc:	b29a      	uxth	r2, r3
 80013de:	4b6e      	ldr	r3, [pc, #440]	; (8001598 <HAL_ADC_ConvCpltCallback+0x1d8>)
 80013e0:	801a      	strh	r2, [r3, #0]
	adc_srednia[0] += adc_value[0];
 80013e2:	4b6e      	ldr	r3, [pc, #440]	; (800159c <HAL_ADC_ConvCpltCallback+0x1dc>)
 80013e4:	881b      	ldrh	r3, [r3, #0]
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	4b6b      	ldr	r3, [pc, #428]	; (8001598 <HAL_ADC_ConvCpltCallback+0x1d8>)
 80013ea:	881b      	ldrh	r3, [r3, #0]
 80013ec:	4413      	add	r3, r2
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	4b69      	ldr	r3, [pc, #420]	; (8001598 <HAL_ADC_ConvCpltCallback+0x1d8>)
 80013f2:	801a      	strh	r2, [r3, #0]
	adc_srednia[0] /= ilosc_probek[0];
 80013f4:	4b68      	ldr	r3, [pc, #416]	; (8001598 <HAL_ADC_ConvCpltCallback+0x1d8>)
 80013f6:	881b      	ldrh	r3, [r3, #0]
 80013f8:	461a      	mov	r2, r3
 80013fa:	7b3b      	ldrb	r3, [r7, #12]
 80013fc:	fb92 f3f3 	sdiv	r3, r2, r3
 8001400:	b29a      	uxth	r2, r3
 8001402:	4b65      	ldr	r3, [pc, #404]	; (8001598 <HAL_ADC_ConvCpltCallback+0x1d8>)
 8001404:	801a      	strh	r2, [r3, #0]
	adc_voltage[0] = (3.3 * adc_srednia[0]) / 1024.0;		//3.3V - maksymalne napięcie czujnika, 1024 - 10 bitowy czujnik
 8001406:	4b64      	ldr	r3, [pc, #400]	; (8001598 <HAL_ADC_ConvCpltCallback+0x1d8>)
 8001408:	881b      	ldrh	r3, [r3, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff f836 	bl	800047c <__aeabi_i2d>
 8001410:	a35d      	add	r3, pc, #372	; (adr r3, 8001588 <HAL_ADC_ConvCpltCallback+0x1c8>)
 8001412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001416:	f7ff f89b 	bl	8000550 <__aeabi_dmul>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	4610      	mov	r0, r2
 8001420:	4619      	mov	r1, r3
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	4b5e      	ldr	r3, [pc, #376]	; (80015a0 <HAL_ADC_ConvCpltCallback+0x1e0>)
 8001428:	f7ff f9bc 	bl	80007a4 <__aeabi_ddiv>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	4610      	mov	r0, r2
 8001432:	4619      	mov	r1, r3
 8001434:	f7ff fb26 	bl	8000a84 <__aeabi_d2f>
 8001438:	4603      	mov	r3, r0
 800143a:	4a5a      	ldr	r2, [pc, #360]	; (80015a4 <HAL_ADC_ConvCpltCallback+0x1e4>)
 800143c:	6013      	str	r3, [r2, #0]

	cisnienie = ((12.5 * adc_voltage[0]) / 3.0 * (1000.0 / 98.1)) - 13; //[cmH2O] - 3V (wzmacniacz) to 10mV i 12,5 kPa (czujnik)
 800143e:	4b59      	ldr	r3, [pc, #356]	; (80015a4 <HAL_ADC_ConvCpltCallback+0x1e4>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff f82c 	bl	80004a0 <__aeabi_f2d>
 8001448:	f04f 0200 	mov.w	r2, #0
 800144c:	4b56      	ldr	r3, [pc, #344]	; (80015a8 <HAL_ADC_ConvCpltCallback+0x1e8>)
 800144e:	f7ff f87f 	bl	8000550 <__aeabi_dmul>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	4610      	mov	r0, r2
 8001458:	4619      	mov	r1, r3
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	4b53      	ldr	r3, [pc, #332]	; (80015ac <HAL_ADC_ConvCpltCallback+0x1ec>)
 8001460:	f7ff f9a0 	bl	80007a4 <__aeabi_ddiv>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4610      	mov	r0, r2
 800146a:	4619      	mov	r1, r3
 800146c:	a348      	add	r3, pc, #288	; (adr r3, 8001590 <HAL_ADC_ConvCpltCallback+0x1d0>)
 800146e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001472:	f7ff f86d 	bl	8000550 <__aeabi_dmul>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	4610      	mov	r0, r2
 800147c:	4619      	mov	r1, r3
 800147e:	f04f 0200 	mov.w	r2, #0
 8001482:	4b4b      	ldr	r3, [pc, #300]	; (80015b0 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8001484:	f7fe feac 	bl	80001e0 <__aeabi_dsub>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	4610      	mov	r0, r2
 800148e:	4619      	mov	r1, r3
 8001490:	f7ff faf8 	bl	8000a84 <__aeabi_d2f>
 8001494:	4603      	mov	r3, r0
 8001496:	4a47      	ldr	r2, [pc, #284]	; (80015b4 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8001498:	6013      	str	r3, [r2, #0]
	cisnienie_u *= 999;
 800149a:	4b47      	ldr	r3, [pc, #284]	; (80015b8 <HAL_ADC_ConvCpltCallback+0x1f8>)
 800149c:	edd3 7a00 	vldr	s15, [r3]
 80014a0:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80015bc <HAL_ADC_ConvCpltCallback+0x1fc>
 80014a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014a8:	4b43      	ldr	r3, [pc, #268]	; (80015b8 <HAL_ADC_ConvCpltCallback+0x1f8>)
 80014aa:	edc3 7a00 	vstr	s15, [r3]
	cisnienie_u += cisnienie;
 80014ae:	4b42      	ldr	r3, [pc, #264]	; (80015b8 <HAL_ADC_ConvCpltCallback+0x1f8>)
 80014b0:	ed93 7a00 	vldr	s14, [r3]
 80014b4:	4b3f      	ldr	r3, [pc, #252]	; (80015b4 <HAL_ADC_ConvCpltCallback+0x1f4>)
 80014b6:	edd3 7a00 	vldr	s15, [r3]
 80014ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014be:	4b3e      	ldr	r3, [pc, #248]	; (80015b8 <HAL_ADC_ConvCpltCallback+0x1f8>)
 80014c0:	edc3 7a00 	vstr	s15, [r3]
	cisnienie_u /= 1000;
 80014c4:	4b3c      	ldr	r3, [pc, #240]	; (80015b8 <HAL_ADC_ConvCpltCallback+0x1f8>)
 80014c6:	ed93 7a00 	vldr	s14, [r3]
 80014ca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80015c0 <HAL_ADC_ConvCpltCallback+0x200>
 80014ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014d2:	4b39      	ldr	r3, [pc, #228]	; (80015b8 <HAL_ADC_ConvCpltCallback+0x1f8>)
 80014d4:	edc3 7a00 	vstr	s15, [r3]
//	if (cisnienie>35){
//		HAL_GPIO_WritePin(ZAWOR_GPIO_Port, ZAWOR_Pin, 0);
//	}

//tlen
	adc_srednia[1] *= (ilosc_probek[1] - 1);
 80014d8:	4b2f      	ldr	r3, [pc, #188]	; (8001598 <HAL_ADC_ConvCpltCallback+0x1d8>)
 80014da:	885a      	ldrh	r2, [r3, #2]
 80014dc:	7b7b      	ldrb	r3, [r7, #13]
 80014de:	3b01      	subs	r3, #1
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	fb12 f303 	smulbb	r3, r2, r3
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	4b2b      	ldr	r3, [pc, #172]	; (8001598 <HAL_ADC_ConvCpltCallback+0x1d8>)
 80014ea:	805a      	strh	r2, [r3, #2]
	adc_srednia[1] += adc_value[1];
 80014ec:	4b2b      	ldr	r3, [pc, #172]	; (800159c <HAL_ADC_ConvCpltCallback+0x1dc>)
 80014ee:	885b      	ldrh	r3, [r3, #2]
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	4b29      	ldr	r3, [pc, #164]	; (8001598 <HAL_ADC_ConvCpltCallback+0x1d8>)
 80014f4:	885b      	ldrh	r3, [r3, #2]
 80014f6:	4413      	add	r3, r2
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	4b27      	ldr	r3, [pc, #156]	; (8001598 <HAL_ADC_ConvCpltCallback+0x1d8>)
 80014fc:	805a      	strh	r2, [r3, #2]
	adc_srednia[1] /= ilosc_probek[1];
 80014fe:	4b26      	ldr	r3, [pc, #152]	; (8001598 <HAL_ADC_ConvCpltCallback+0x1d8>)
 8001500:	885b      	ldrh	r3, [r3, #2]
 8001502:	461a      	mov	r2, r3
 8001504:	7b7b      	ldrb	r3, [r7, #13]
 8001506:	fb92 f3f3 	sdiv	r3, r2, r3
 800150a:	b29a      	uxth	r2, r3
 800150c:	4b22      	ldr	r3, [pc, #136]	; (8001598 <HAL_ADC_ConvCpltCallback+0x1d8>)
 800150e:	805a      	strh	r2, [r3, #2]
	adc_voltage[1] = (3.3 * adc_srednia[1]) / 1024.0;
 8001510:	4b21      	ldr	r3, [pc, #132]	; (8001598 <HAL_ADC_ConvCpltCallback+0x1d8>)
 8001512:	885b      	ldrh	r3, [r3, #2]
 8001514:	4618      	mov	r0, r3
 8001516:	f7fe ffb1 	bl	800047c <__aeabi_i2d>
 800151a:	a31b      	add	r3, pc, #108	; (adr r3, 8001588 <HAL_ADC_ConvCpltCallback+0x1c8>)
 800151c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001520:	f7ff f816 	bl	8000550 <__aeabi_dmul>
 8001524:	4602      	mov	r2, r0
 8001526:	460b      	mov	r3, r1
 8001528:	4610      	mov	r0, r2
 800152a:	4619      	mov	r1, r3
 800152c:	f04f 0200 	mov.w	r2, #0
 8001530:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <HAL_ADC_ConvCpltCallback+0x1e0>)
 8001532:	f7ff f937 	bl	80007a4 <__aeabi_ddiv>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	4610      	mov	r0, r2
 800153c:	4619      	mov	r1, r3
 800153e:	f7ff faa1 	bl	8000a84 <__aeabi_d2f>
 8001542:	4603      	mov	r3, r0
 8001544:	4a17      	ldr	r2, [pc, #92]	; (80015a4 <HAL_ADC_ConvCpltCallback+0x1e4>)
 8001546:	6053      	str	r3, [r2, #4]

	tlen = (21.0 * adc_voltage[1]) / 0.5; //[%] - 0.5V (wzmacniacz) to 10mV i 21% (czujnik)
 8001548:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <HAL_ADC_ConvCpltCallback+0x1e4>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	4618      	mov	r0, r3
 800154e:	f7fe ffa7 	bl	80004a0 <__aeabi_f2d>
 8001552:	f04f 0200 	mov.w	r2, #0
 8001556:	4b1b      	ldr	r3, [pc, #108]	; (80015c4 <HAL_ADC_ConvCpltCallback+0x204>)
 8001558:	f7fe fffa 	bl	8000550 <__aeabi_dmul>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4610      	mov	r0, r2
 8001562:	4619      	mov	r1, r3
 8001564:	f04f 0200 	mov.w	r2, #0
 8001568:	4b17      	ldr	r3, [pc, #92]	; (80015c8 <HAL_ADC_ConvCpltCallback+0x208>)
 800156a:	f7ff f91b 	bl	80007a4 <__aeabi_ddiv>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	4610      	mov	r0, r2
 8001574:	4619      	mov	r1, r3
 8001576:	f7ff fa85 	bl	8000a84 <__aeabi_d2f>
 800157a:	4603      	mov	r3, r0
 800157c:	4a13      	ldr	r2, [pc, #76]	; (80015cc <HAL_ADC_ConvCpltCallback+0x20c>)
 800157e:	6013      	str	r3, [r2, #0]
}
 8001580:	bf00      	nop
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	66666666 	.word	0x66666666
 800158c:	400a6666 	.word	0x400a6666
 8001590:	03a74633 	.word	0x03a74633
 8001594:	4024632a 	.word	0x4024632a
 8001598:	200002c8 	.word	0x200002c8
 800159c:	20000258 	.word	0x20000258
 80015a0:	40900000 	.word	0x40900000
 80015a4:	2000025c 	.word	0x2000025c
 80015a8:	40290000 	.word	0x40290000
 80015ac:	40080000 	.word	0x40080000
 80015b0:	402a0000 	.word	0x402a0000
 80015b4:	20000264 	.word	0x20000264
 80015b8:	200002a0 	.word	0x200002a0
 80015bc:	4479c000 	.word	0x4479c000
 80015c0:	447a0000 	.word	0x447a0000
 80015c4:	40350000 	.word	0x40350000
 80015c8:	3fe00000 	.word	0x3fe00000
 80015cc:	20000268 	.word	0x20000268

080015d0 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
//	static uint16_t i = 0;
//	static float objetosc_chw = 0;
//static uint8_t stan[2] = { 0, 0 };

	uint16_t i2c_value = (i2c_rx[0] << 8) | i2c_rx[1];
 80015d8:	4b41      	ldr	r3, [pc, #260]	; (80016e0 <HAL_I2C_MasterRxCpltCallback+0x110>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	021b      	lsls	r3, r3, #8
 80015e0:	b21a      	sxth	r2, r3
 80015e2:	4b3f      	ldr	r3, [pc, #252]	; (80016e0 <HAL_I2C_MasterRxCpltCallback+0x110>)
 80015e4:	785b      	ldrb	r3, [r3, #1]
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	b21b      	sxth	r3, r3
 80015ea:	4313      	orrs	r3, r2
 80015ec:	b21b      	sxth	r3, r3
 80015ee:	81fb      	strh	r3, [r7, #14]
	przeplyw = ((i2c_value - 32768.0) / 120.0) * (1000 / 60.0); //[ml/s]
 80015f0:	89fb      	ldrh	r3, [r7, #14]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7fe ff42 	bl	800047c <__aeabi_i2d>
 80015f8:	f04f 0200 	mov.w	r2, #0
 80015fc:	4b39      	ldr	r3, [pc, #228]	; (80016e4 <HAL_I2C_MasterRxCpltCallback+0x114>)
 80015fe:	f7fe fdef 	bl	80001e0 <__aeabi_dsub>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	4610      	mov	r0, r2
 8001608:	4619      	mov	r1, r3
 800160a:	f04f 0200 	mov.w	r2, #0
 800160e:	4b36      	ldr	r3, [pc, #216]	; (80016e8 <HAL_I2C_MasterRxCpltCallback+0x118>)
 8001610:	f7ff f8c8 	bl	80007a4 <__aeabi_ddiv>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	4610      	mov	r0, r2
 800161a:	4619      	mov	r1, r3
 800161c:	a32c      	add	r3, pc, #176	; (adr r3, 80016d0 <HAL_I2C_MasterRxCpltCallback+0x100>)
 800161e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001622:	f7fe ff95 	bl	8000550 <__aeabi_dmul>
 8001626:	4602      	mov	r2, r0
 8001628:	460b      	mov	r3, r1
 800162a:	4610      	mov	r0, r2
 800162c:	4619      	mov	r1, r3
 800162e:	f7ff fa29 	bl	8000a84 <__aeabi_d2f>
 8001632:	4603      	mov	r3, r0
 8001634:	4a2d      	ldr	r2, [pc, #180]	; (80016ec <HAL_I2C_MasterRxCpltCallback+0x11c>)
 8001636:	6013      	str	r3, [r2, #0]
	przeplyw_u *= 99;
 8001638:	4b2d      	ldr	r3, [pc, #180]	; (80016f0 <HAL_I2C_MasterRxCpltCallback+0x120>)
 800163a:	edd3 7a00 	vldr	s15, [r3]
 800163e:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80016f4 <HAL_I2C_MasterRxCpltCallback+0x124>
 8001642:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001646:	4b2a      	ldr	r3, [pc, #168]	; (80016f0 <HAL_I2C_MasterRxCpltCallback+0x120>)
 8001648:	edc3 7a00 	vstr	s15, [r3]
	przeplyw_u += przeplyw;
 800164c:	4b28      	ldr	r3, [pc, #160]	; (80016f0 <HAL_I2C_MasterRxCpltCallback+0x120>)
 800164e:	ed93 7a00 	vldr	s14, [r3]
 8001652:	4b26      	ldr	r3, [pc, #152]	; (80016ec <HAL_I2C_MasterRxCpltCallback+0x11c>)
 8001654:	edd3 7a00 	vldr	s15, [r3]
 8001658:	ee77 7a27 	vadd.f32	s15, s14, s15
 800165c:	4b24      	ldr	r3, [pc, #144]	; (80016f0 <HAL_I2C_MasterRxCpltCallback+0x120>)
 800165e:	edc3 7a00 	vstr	s15, [r3]
	przeplyw_u /= 100;
 8001662:	4b23      	ldr	r3, [pc, #140]	; (80016f0 <HAL_I2C_MasterRxCpltCallback+0x120>)
 8001664:	ed93 7a00 	vldr	s14, [r3]
 8001668:	eddf 6a23 	vldr	s13, [pc, #140]	; 80016f8 <HAL_I2C_MasterRxCpltCallback+0x128>
 800166c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001670:	4b1f      	ldr	r3, [pc, #124]	; (80016f0 <HAL_I2C_MasterRxCpltCallback+0x120>)
 8001672:	edc3 7a00 	vstr	s15, [r3]

//	stan[0] = stan[1];
//	stan[1] = faza;

	if (faza == 1) {	//faza = czy turbina pracuje czy nie
 8001676:	4b21      	ldr	r3, [pc, #132]	; (80016fc <HAL_I2C_MasterRxCpltCallback+0x12c>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d11e      	bne.n	80016bc <HAL_I2C_MasterRxCpltCallback+0xec>
//		i++;
//		sr_przeplyw += przeplyw;

		objetosc_chw = przeplyw * 0.001;
 800167e:	4b1b      	ldr	r3, [pc, #108]	; (80016ec <HAL_I2C_MasterRxCpltCallback+0x11c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f7fe ff0c 	bl	80004a0 <__aeabi_f2d>
 8001688:	a313      	add	r3, pc, #76	; (adr r3, 80016d8 <HAL_I2C_MasterRxCpltCallback+0x108>)
 800168a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168e:	f7fe ff5f 	bl	8000550 <__aeabi_dmul>
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	4610      	mov	r0, r2
 8001698:	4619      	mov	r1, r3
 800169a:	f7ff f9f3 	bl	8000a84 <__aeabi_d2f>
 800169e:	4603      	mov	r3, r0
 80016a0:	4a17      	ldr	r2, [pc, #92]	; (8001700 <HAL_I2C_MasterRxCpltCallback+0x130>)
 80016a2:	6013      	str	r3, [r2, #0]
		objetosc += objetosc_chw;
 80016a4:	4b17      	ldr	r3, [pc, #92]	; (8001704 <HAL_I2C_MasterRxCpltCallback+0x134>)
 80016a6:	ed93 7a00 	vldr	s14, [r3]
 80016aa:	4b15      	ldr	r3, [pc, #84]	; (8001700 <HAL_I2C_MasterRxCpltCallback+0x130>)
 80016ac:	edd3 7a00 	vldr	s15, [r3]
 80016b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b4:	4b13      	ldr	r3, [pc, #76]	; (8001704 <HAL_I2C_MasterRxCpltCallback+0x134>)
 80016b6:	edc3 7a00 	vstr	s15, [r3]
//		sr_przeplyw /= i;
//		objetosc = sr_przeplyw * t_wdech;
//		sr_przeplyw = 0;
//		i=0;
//	}
}
 80016ba:	e003      	b.n	80016c4 <HAL_I2C_MasterRxCpltCallback+0xf4>
		objetosc = 0;
 80016bc:	4b11      	ldr	r3, [pc, #68]	; (8001704 <HAL_I2C_MasterRxCpltCallback+0x134>)
 80016be:	f04f 0200 	mov.w	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
}
 80016c4:	bf00      	nop
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	f3af 8000 	nop.w
 80016d0:	aaaaaaab 	.word	0xaaaaaaab
 80016d4:	4030aaaa 	.word	0x4030aaaa
 80016d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80016dc:	3f50624d 	.word	0x3f50624d
 80016e0:	2000026c 	.word	0x2000026c
 80016e4:	40e00000 	.word	0x40e00000
 80016e8:	405e0000 	.word	0x405e0000
 80016ec:	20000270 	.word	0x20000270
 80016f0:	200002a4 	.word	0x200002a4
 80016f4:	42c60000 	.word	0x42c60000
 80016f8:	42c80000 	.word	0x42c80000
 80016fc:	200002b0 	.word	0x200002b0
 8001700:	20000278 	.word	0x20000278
 8001704:	20000274 	.word	0x20000274

08001708 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
	if (htim == &htim9) {
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a1f      	ldr	r2, [pc, #124]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d12c      	bne.n	8001772 <HAL_TIM_PeriodElapsedCallback+0x6a>

		if (spi_rx[1] == 1) {
 8001718:	4b1e      	ldr	r3, [pc, #120]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800171a:	785b      	ldrb	r3, [r3, #1]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d10d      	bne.n	800173c <HAL_TIM_PeriodElapsedCallback+0x34>
			tryb_objetosc(objetosc_zad, czas_wdechu, czas_wydechu, PEEP);
 8001720:	4b1d      	ldr	r3, [pc, #116]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001722:	881b      	ldrh	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	4b1d      	ldr	r3, [pc, #116]	; (800179c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	4619      	mov	r1, r3
 800172c:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800172e:	881b      	ldrh	r3, [r3, #0]
 8001730:	461a      	mov	r2, r3
 8001732:	4b1c      	ldr	r3, [pc, #112]	; (80017a4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001734:	881b      	ldrh	r3, [r3, #0]
 8001736:	f7ff fc37 	bl	8000fa8 <tryb_objetosc>
	} else if (htim == &htim11) {
		HAL_I2C_Master_Receive_IT(&hi2c3, (64 << 1), (uint8_t*) i2c_rx, 2);

	}

}
 800173a:	e024      	b.n	8001786 <HAL_TIM_PeriodElapsedCallback+0x7e>
		} else if (spi_rx[1] == 2) {
 800173c:	4b15      	ldr	r3, [pc, #84]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800173e:	785b      	ldrb	r3, [r3, #1]
 8001740:	2b02      	cmp	r3, #2
 8001742:	d10d      	bne.n	8001760 <HAL_TIM_PeriodElapsedCallback+0x58>
			tryb_cisnienie(cisnienie_zad, czas_wdechu, czas_wydechu, PEEP);
 8001744:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001746:	881b      	ldrh	r3, [r3, #0]
 8001748:	4618      	mov	r0, r3
 800174a:	4b14      	ldr	r3, [pc, #80]	; (800179c <HAL_TIM_PeriodElapsedCallback+0x94>)
 800174c:	881b      	ldrh	r3, [r3, #0]
 800174e:	4619      	mov	r1, r3
 8001750:	4b13      	ldr	r3, [pc, #76]	; (80017a0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001752:	881b      	ldrh	r3, [r3, #0]
 8001754:	461a      	mov	r2, r3
 8001756:	4b13      	ldr	r3, [pc, #76]	; (80017a4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	f7ff fd51 	bl	8001200 <tryb_cisnienie>
}
 800175e:	e012      	b.n	8001786 <HAL_TIM_PeriodElapsedCallback+0x7e>
		} else if (spi_rx[1] == 0) {
 8001760:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001762:	785b      	ldrb	r3, [r3, #1]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d10e      	bne.n	8001786 <HAL_TIM_PeriodElapsedCallback+0x7e>
			__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, 0);
 8001768:	4b10      	ldr	r3, [pc, #64]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2200      	movs	r2, #0
 800176e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001770:	e009      	b.n	8001786 <HAL_TIM_PeriodElapsedCallback+0x7e>
	} else if (htim == &htim11) {
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a0e      	ldr	r2, [pc, #56]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d105      	bne.n	8001786 <HAL_TIM_PeriodElapsedCallback+0x7e>
		HAL_I2C_Master_Receive_IT(&hi2c3, (64 << 1), (uint8_t*) i2c_rx, 2);
 800177a:	2302      	movs	r3, #2
 800177c:	4a0d      	ldr	r2, [pc, #52]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800177e:	2180      	movs	r1, #128	; 0x80
 8001780:	480d      	ldr	r0, [pc, #52]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001782:	f002 fb1d 	bl	8003dc0 <HAL_I2C_Master_Receive_IT>
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000180 	.word	0x20000180
 8001794:	2000027c 	.word	0x2000027c
 8001798:	20000292 	.word	0x20000292
 800179c:	20000296 	.word	0x20000296
 80017a0:	20000298 	.word	0x20000298
 80017a4:	2000029a 	.word	0x2000029a
 80017a8:	20000294 	.word	0x20000294
 80017ac:	200001c8 	.word	0x200001c8
 80017b0:	20000210 	.word	0x20000210
 80017b4:	2000026c 	.word	0x2000026c
 80017b8:	200000d4 	.word	0x200000d4

080017bc <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
	spi_tx[0] = 1;
 80017c4:	4b53      	ldr	r3, [pc, #332]	; (8001914 <HAL_SPI_TxRxCpltCallback+0x158>)
 80017c6:	2201      	movs	r2, #1
 80017c8:	701a      	strb	r2, [r3, #0]
	spi_tx[1] = ((uint16_t) objetosc) >> 8;
 80017ca:	4b53      	ldr	r3, [pc, #332]	; (8001918 <HAL_SPI_TxRxCpltCallback+0x15c>)
 80017cc:	edd3 7a00 	vldr	s15, [r3]
 80017d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017d4:	ee17 3a90 	vmov	r3, s15
 80017d8:	b29b      	uxth	r3, r3
 80017da:	0a1b      	lsrs	r3, r3, #8
 80017dc:	b29b      	uxth	r3, r3
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	4b4c      	ldr	r3, [pc, #304]	; (8001914 <HAL_SPI_TxRxCpltCallback+0x158>)
 80017e2:	705a      	strb	r2, [r3, #1]
	spi_tx[2] = (uint16_t) objetosc & 0xFF;
 80017e4:	4b4c      	ldr	r3, [pc, #304]	; (8001918 <HAL_SPI_TxRxCpltCallback+0x15c>)
 80017e6:	edd3 7a00 	vldr	s15, [r3]
 80017ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017ee:	ee17 3a90 	vmov	r3, s15
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	4b47      	ldr	r3, [pc, #284]	; (8001914 <HAL_SPI_TxRxCpltCallback+0x158>)
 80017f8:	709a      	strb	r2, [r3, #2]
	spi_tx[3] = (uint8_t) cisnienie_u;
 80017fa:	4b48      	ldr	r3, [pc, #288]	; (800191c <HAL_SPI_TxRxCpltCallback+0x160>)
 80017fc:	edd3 7a00 	vldr	s15, [r3]
 8001800:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001804:	edc7 7a00 	vstr	s15, [r7]
 8001808:	783b      	ldrb	r3, [r7, #0]
 800180a:	b2da      	uxtb	r2, r3
 800180c:	4b41      	ldr	r3, [pc, #260]	; (8001914 <HAL_SPI_TxRxCpltCallback+0x158>)
 800180e:	70da      	strb	r2, [r3, #3]
	spi_tx[4] = (uint8_t) tlen;
 8001810:	4b43      	ldr	r3, [pc, #268]	; (8001920 <HAL_SPI_TxRxCpltCallback+0x164>)
 8001812:	edd3 7a00 	vldr	s15, [r3]
 8001816:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800181a:	edc7 7a00 	vstr	s15, [r7]
 800181e:	783b      	ldrb	r3, [r7, #0]
 8001820:	b2da      	uxtb	r2, r3
 8001822:	4b3c      	ldr	r3, [pc, #240]	; (8001914 <HAL_SPI_TxRxCpltCallback+0x158>)
 8001824:	711a      	strb	r2, [r3, #4]
	spi_tx[5] = ((uint16_t) przeplyw_u) >> 8;
 8001826:	4b3f      	ldr	r3, [pc, #252]	; (8001924 <HAL_SPI_TxRxCpltCallback+0x168>)
 8001828:	edd3 7a00 	vldr	s15, [r3]
 800182c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001830:	ee17 3a90 	vmov	r3, s15
 8001834:	b29b      	uxth	r3, r3
 8001836:	0a1b      	lsrs	r3, r3, #8
 8001838:	b29b      	uxth	r3, r3
 800183a:	b2da      	uxtb	r2, r3
 800183c:	4b35      	ldr	r3, [pc, #212]	; (8001914 <HAL_SPI_TxRxCpltCallback+0x158>)
 800183e:	715a      	strb	r2, [r3, #5]
	spi_tx[6] = (uint16_t) przeplyw_u & 0xFF;
 8001840:	4b38      	ldr	r3, [pc, #224]	; (8001924 <HAL_SPI_TxRxCpltCallback+0x168>)
 8001842:	edd3 7a00 	vldr	s15, [r3]
 8001846:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800184a:	ee17 3a90 	vmov	r3, s15
 800184e:	b29b      	uxth	r3, r3
 8001850:	b2da      	uxtb	r2, r3
 8001852:	4b30      	ldr	r3, [pc, #192]	; (8001914 <HAL_SPI_TxRxCpltCallback+0x158>)
 8001854:	719a      	strb	r2, [r3, #6]
	spi_tx[7] = spi_rx[0] + spi_rx[9];
 8001856:	4b34      	ldr	r3, [pc, #208]	; (8001928 <HAL_SPI_TxRxCpltCallback+0x16c>)
 8001858:	781a      	ldrb	r2, [r3, #0]
 800185a:	4b33      	ldr	r3, [pc, #204]	; (8001928 <HAL_SPI_TxRxCpltCallback+0x16c>)
 800185c:	7a5b      	ldrb	r3, [r3, #9]
 800185e:	4413      	add	r3, r2
 8001860:	b2da      	uxtb	r2, r3
 8001862:	4b2c      	ldr	r3, [pc, #176]	; (8001914 <HAL_SPI_TxRxCpltCallback+0x158>)
 8001864:	71da      	strb	r2, [r3, #7]
	spi_tx[8] = blad;
 8001866:	4b31      	ldr	r3, [pc, #196]	; (800192c <HAL_SPI_TxRxCpltCallback+0x170>)
 8001868:	781a      	ldrb	r2, [r3, #0]
 800186a:	4b2a      	ldr	r3, [pc, #168]	; (8001914 <HAL_SPI_TxRxCpltCallback+0x158>)
 800186c:	721a      	strb	r2, [r3, #8]
	spi_tx[9] = 2;
 800186e:	4b29      	ldr	r3, [pc, #164]	; (8001914 <HAL_SPI_TxRxCpltCallback+0x158>)
 8001870:	2202      	movs	r2, #2
 8001872:	725a      	strb	r2, [r3, #9]

	if (spi_rx[0] == 1 && spi_rx[9] == 2) {
 8001874:	4b2c      	ldr	r3, [pc, #176]	; (8001928 <HAL_SPI_TxRxCpltCallback+0x16c>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d141      	bne.n	8001900 <HAL_SPI_TxRxCpltCallback+0x144>
 800187c:	4b2a      	ldr	r3, [pc, #168]	; (8001928 <HAL_SPI_TxRxCpltCallback+0x16c>)
 800187e:	7a5b      	ldrb	r3, [r3, #9]
 8001880:	2b02      	cmp	r3, #2
 8001882:	d13d      	bne.n	8001900 <HAL_SPI_TxRxCpltCallback+0x144>
		if (spi_rx[1] == 1) {
 8001884:	4b28      	ldr	r3, [pc, #160]	; (8001928 <HAL_SPI_TxRxCpltCallback+0x16c>)
 8001886:	785b      	ldrb	r3, [r3, #1]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d10c      	bne.n	80018a6 <HAL_SPI_TxRxCpltCallback+0xea>
			objetosc_zad = spi_rx[2] << 8 | spi_rx[3];
 800188c:	4b26      	ldr	r3, [pc, #152]	; (8001928 <HAL_SPI_TxRxCpltCallback+0x16c>)
 800188e:	789b      	ldrb	r3, [r3, #2]
 8001890:	021b      	lsls	r3, r3, #8
 8001892:	b21a      	sxth	r2, r3
 8001894:	4b24      	ldr	r3, [pc, #144]	; (8001928 <HAL_SPI_TxRxCpltCallback+0x16c>)
 8001896:	78db      	ldrb	r3, [r3, #3]
 8001898:	b21b      	sxth	r3, r3
 800189a:	4313      	orrs	r3, r2
 800189c:	b21b      	sxth	r3, r3
 800189e:	b29a      	uxth	r2, r3
 80018a0:	4b23      	ldr	r3, [pc, #140]	; (8001930 <HAL_SPI_TxRxCpltCallback+0x174>)
 80018a2:	801a      	strh	r2, [r3, #0]
 80018a4:	e00f      	b.n	80018c6 <HAL_SPI_TxRxCpltCallback+0x10a>
		} else if (spi_rx[1] == 2) {
 80018a6:	4b20      	ldr	r3, [pc, #128]	; (8001928 <HAL_SPI_TxRxCpltCallback+0x16c>)
 80018a8:	785b      	ldrb	r3, [r3, #1]
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d10b      	bne.n	80018c6 <HAL_SPI_TxRxCpltCallback+0x10a>
			cisnienie_zad = spi_rx[2] << 8 | spi_rx[3];
 80018ae:	4b1e      	ldr	r3, [pc, #120]	; (8001928 <HAL_SPI_TxRxCpltCallback+0x16c>)
 80018b0:	789b      	ldrb	r3, [r3, #2]
 80018b2:	021b      	lsls	r3, r3, #8
 80018b4:	b21a      	sxth	r2, r3
 80018b6:	4b1c      	ldr	r3, [pc, #112]	; (8001928 <HAL_SPI_TxRxCpltCallback+0x16c>)
 80018b8:	78db      	ldrb	r3, [r3, #3]
 80018ba:	b21b      	sxth	r3, r3
 80018bc:	4313      	orrs	r3, r2
 80018be:	b21b      	sxth	r3, r3
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	4b1c      	ldr	r3, [pc, #112]	; (8001934 <HAL_SPI_TxRxCpltCallback+0x178>)
 80018c4:	801a      	strh	r2, [r3, #0]
		}
		czas_wdechu = (int) (spi_rx[4] << 8 | spi_rx[5]);
 80018c6:	4b18      	ldr	r3, [pc, #96]	; (8001928 <HAL_SPI_TxRxCpltCallback+0x16c>)
 80018c8:	791b      	ldrb	r3, [r3, #4]
 80018ca:	021b      	lsls	r3, r3, #8
 80018cc:	b21a      	sxth	r2, r3
 80018ce:	4b16      	ldr	r3, [pc, #88]	; (8001928 <HAL_SPI_TxRxCpltCallback+0x16c>)
 80018d0:	795b      	ldrb	r3, [r3, #5]
 80018d2:	b21b      	sxth	r3, r3
 80018d4:	4313      	orrs	r3, r2
 80018d6:	b21b      	sxth	r3, r3
 80018d8:	b29a      	uxth	r2, r3
 80018da:	4b17      	ldr	r3, [pc, #92]	; (8001938 <HAL_SPI_TxRxCpltCallback+0x17c>)
 80018dc:	801a      	strh	r2, [r3, #0]
		czas_wydechu = (int) (spi_rx[6] << 8 | spi_rx[7]);
 80018de:	4b12      	ldr	r3, [pc, #72]	; (8001928 <HAL_SPI_TxRxCpltCallback+0x16c>)
 80018e0:	799b      	ldrb	r3, [r3, #6]
 80018e2:	021b      	lsls	r3, r3, #8
 80018e4:	b21a      	sxth	r2, r3
 80018e6:	4b10      	ldr	r3, [pc, #64]	; (8001928 <HAL_SPI_TxRxCpltCallback+0x16c>)
 80018e8:	79db      	ldrb	r3, [r3, #7]
 80018ea:	b21b      	sxth	r3, r3
 80018ec:	4313      	orrs	r3, r2
 80018ee:	b21b      	sxth	r3, r3
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	4b12      	ldr	r3, [pc, #72]	; (800193c <HAL_SPI_TxRxCpltCallback+0x180>)
 80018f4:	801a      	strh	r2, [r3, #0]
		PEEP = (int) spi_rx[8];
 80018f6:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <HAL_SPI_TxRxCpltCallback+0x16c>)
 80018f8:	7a1b      	ldrb	r3, [r3, #8]
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	4b10      	ldr	r3, [pc, #64]	; (8001940 <HAL_SPI_TxRxCpltCallback+0x184>)
 80018fe:	801a      	strh	r2, [r3, #0]

//	pid_d = ((float) spi_rx[5]) / 100;
//
//	pid_init(&pid1, pid_p, pid_i, pid_d, 1000);

	HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t*) spi_tx, (uint8_t*) spi_rx,
 8001900:	230a      	movs	r3, #10
 8001902:	4a09      	ldr	r2, [pc, #36]	; (8001928 <HAL_SPI_TxRxCpltCallback+0x16c>)
 8001904:	4903      	ldr	r1, [pc, #12]	; (8001914 <HAL_SPI_TxRxCpltCallback+0x158>)
 8001906:	480f      	ldr	r0, [pc, #60]	; (8001944 <HAL_SPI_TxRxCpltCallback+0x188>)
 8001908:	f004 fe88 	bl	800661c <HAL_SPI_TransmitReceive_IT>
			10);
}
 800190c:	bf00      	nop
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20000288 	.word	0x20000288
 8001918:	20000274 	.word	0x20000274
 800191c:	200002a0 	.word	0x200002a0
 8001920:	20000268 	.word	0x20000268
 8001924:	200002a4 	.word	0x200002a4
 8001928:	2000027c 	.word	0x2000027c
 800192c:	200002a8 	.word	0x200002a8
 8001930:	20000292 	.word	0x20000292
 8001934:	20000294 	.word	0x20000294
 8001938:	20000296 	.word	0x20000296
 800193c:	20000298 	.word	0x20000298
 8001940:	2000029a 	.word	0x2000029a
 8001944:	20000128 	.word	0x20000128

08001948 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800194e:	f000 fd3b 	bl	80023c8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001952:	f000 f84d 	bl	80019f0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001956:	f000 fa41 	bl	8001ddc <MX_GPIO_Init>
	MX_DMA_Init();
 800195a:	f000 fa1f 	bl	8001d9c <MX_DMA_Init>
	MX_TIM10_Init();
 800195e:	f000 f9ab 	bl	8001cb8 <MX_TIM10_Init>
	MX_SPI1_Init();
 8001962:	f000 f93d 	bl	8001be0 <MX_SPI1_Init>
	MX_I2C3_Init();
 8001966:	f000 f90d 	bl	8001b84 <MX_I2C3_Init>
	MX_ADC1_Init();
 800196a:	f000 f8a9 	bl	8001ac0 <MX_ADC1_Init>
	MX_TIM11_Init();
 800196e:	f000 f9f1 	bl	8001d54 <MX_TIM11_Init>
	MX_TIM9_Init();
 8001972:	f000 f967 	bl	8001c44 <MX_TIM9_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t*) spi_tx, (uint8_t*) spi_rx,
 8001976:	230a      	movs	r3, #10
 8001978:	4a13      	ldr	r2, [pc, #76]	; (80019c8 <main+0x80>)
 800197a:	4914      	ldr	r1, [pc, #80]	; (80019cc <main+0x84>)
 800197c:	4814      	ldr	r0, [pc, #80]	; (80019d0 <main+0x88>)
 800197e:	f004 fe4d 	bl	800661c <HAL_SPI_TransmitReceive_IT>
			10);

	uint8_t i2c_tx[2];
	i2c_tx[0] = 0x10;
 8001982:	2310      	movs	r3, #16
 8001984:	713b      	strb	r3, [r7, #4]
	i2c_tx[1] = 0x00;
 8001986:	2300      	movs	r3, #0
 8001988:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c3, (64 << 1), i2c_tx, 2, HAL_MAX_DELAY);
 800198a:	1d3a      	adds	r2, r7, #4
 800198c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001990:	9300      	str	r3, [sp, #0]
 8001992:	2302      	movs	r3, #2
 8001994:	2180      	movs	r1, #128	; 0x80
 8001996:	480f      	ldr	r0, [pc, #60]	; (80019d4 <main+0x8c>)
 8001998:	f002 f914 	bl	8003bc4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive_IT(&hi2c3, (64 << 1), (uint8_t*) i2c_rx, 2);
 800199c:	2302      	movs	r3, #2
 800199e:	4a0e      	ldr	r2, [pc, #56]	; (80019d8 <main+0x90>)
 80019a0:	2180      	movs	r1, #128	; 0x80
 80019a2:	480c      	ldr	r0, [pc, #48]	; (80019d4 <main+0x8c>)
 80019a4:	f002 fa0c 	bl	8003dc0 <HAL_I2C_Master_Receive_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_value, 2);
 80019a8:	2202      	movs	r2, #2
 80019aa:	490c      	ldr	r1, [pc, #48]	; (80019dc <main+0x94>)
 80019ac:	480c      	ldr	r0, [pc, #48]	; (80019e0 <main+0x98>)
 80019ae:	f000 fdc1 	bl	8002534 <HAL_ADC_Start_DMA>
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 80019b2:	2100      	movs	r1, #0
 80019b4:	480b      	ldr	r0, [pc, #44]	; (80019e4 <main+0x9c>)
 80019b6:	f005 faed 	bl	8006f94 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim11);
 80019ba:	480b      	ldr	r0, [pc, #44]	; (80019e8 <main+0xa0>)
 80019bc:	f005 fa2e 	bl	8006e1c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim9);
 80019c0:	480a      	ldr	r0, [pc, #40]	; (80019ec <main+0xa4>)
 80019c2:	f005 fa2b 	bl	8006e1c <HAL_TIM_Base_Start_IT>

	while (1) {
 80019c6:	e7fe      	b.n	80019c6 <main+0x7e>
 80019c8:	2000027c 	.word	0x2000027c
 80019cc:	20000288 	.word	0x20000288
 80019d0:	20000128 	.word	0x20000128
 80019d4:	200000d4 	.word	0x200000d4
 80019d8:	2000026c 	.word	0x2000026c
 80019dc:	20000258 	.word	0x20000258
 80019e0:	2000002c 	.word	0x2000002c
 80019e4:	200001c8 	.word	0x200001c8
 80019e8:	20000210 	.word	0x20000210
 80019ec:	20000180 	.word	0x20000180

080019f0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b094      	sub	sp, #80	; 0x50
 80019f4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80019f6:	f107 0320 	add.w	r3, r7, #32
 80019fa:	2230      	movs	r2, #48	; 0x30
 80019fc:	2100      	movs	r1, #0
 80019fe:	4618      	mov	r0, r3
 8001a00:	f006 f911 	bl	8007c26 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001a04:	f107 030c 	add.w	r3, r7, #12
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
 8001a12:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001a14:	2300      	movs	r3, #0
 8001a16:	60bb      	str	r3, [r7, #8]
 8001a18:	4b27      	ldr	r3, [pc, #156]	; (8001ab8 <SystemClock_Config+0xc8>)
 8001a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1c:	4a26      	ldr	r2, [pc, #152]	; (8001ab8 <SystemClock_Config+0xc8>)
 8001a1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a22:	6413      	str	r3, [r2, #64]	; 0x40
 8001a24:	4b24      	ldr	r3, [pc, #144]	; (8001ab8 <SystemClock_Config+0xc8>)
 8001a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a30:	2300      	movs	r3, #0
 8001a32:	607b      	str	r3, [r7, #4]
 8001a34:	4b21      	ldr	r3, [pc, #132]	; (8001abc <SystemClock_Config+0xcc>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a20      	ldr	r2, [pc, #128]	; (8001abc <SystemClock_Config+0xcc>)
 8001a3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a3e:	6013      	str	r3, [r2, #0]
 8001a40:	4b1e      	ldr	r3, [pc, #120]	; (8001abc <SystemClock_Config+0xcc>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a48:	607b      	str	r3, [r7, #4]
 8001a4a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a50:	2301      	movs	r3, #1
 8001a52:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a54:	2310      	movs	r3, #16
 8001a56:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001a60:	2308      	movs	r3, #8
 8001a62:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 8001a64:	2364      	movs	r3, #100	; 0x64
 8001a66:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a6c:	2304      	movs	r3, #4
 8001a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001a70:	f107 0320 	add.w	r3, r7, #32
 8001a74:	4618      	mov	r0, r3
 8001a76:	f004 f903 	bl	8005c80 <HAL_RCC_OscConfig>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <SystemClock_Config+0x94>
		Error_Handler();
 8001a80:	f000 f9ee 	bl	8001e60 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001a84:	230f      	movs	r3, #15
 8001a86:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a94:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a96:	2300      	movs	r3, #0
 8001a98:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8001a9a:	f107 030c 	add.w	r3, r7, #12
 8001a9e:	2103      	movs	r1, #3
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f004 fb65 	bl	8006170 <HAL_RCC_ClockConfig>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <SystemClock_Config+0xc0>
		Error_Handler();
 8001aac:	f000 f9d8 	bl	8001e60 <Error_Handler>
	}
}
 8001ab0:	bf00      	nop
 8001ab2:	3750      	adds	r7, #80	; 0x50
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40007000 	.word	0x40007000

08001ac0 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001ac6:	463b      	mov	r3, r7
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8001ad2:	4b29      	ldr	r3, [pc, #164]	; (8001b78 <MX_ADC1_Init+0xb8>)
 8001ad4:	4a29      	ldr	r2, [pc, #164]	; (8001b7c <MX_ADC1_Init+0xbc>)
 8001ad6:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001ad8:	4b27      	ldr	r3, [pc, #156]	; (8001b78 <MX_ADC1_Init+0xb8>)
 8001ada:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001ade:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8001ae0:	4b25      	ldr	r3, [pc, #148]	; (8001b78 <MX_ADC1_Init+0xb8>)
 8001ae2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ae6:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 8001ae8:	4b23      	ldr	r3, [pc, #140]	; (8001b78 <MX_ADC1_Init+0xb8>)
 8001aea:	2201      	movs	r2, #1
 8001aec:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001aee:	4b22      	ldr	r3, [pc, #136]	; (8001b78 <MX_ADC1_Init+0xb8>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001af4:	4b20      	ldr	r3, [pc, #128]	; (8001b78 <MX_ADC1_Init+0xb8>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001afc:	4b1e      	ldr	r3, [pc, #120]	; (8001b78 <MX_ADC1_Init+0xb8>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b02:	4b1d      	ldr	r3, [pc, #116]	; (8001b78 <MX_ADC1_Init+0xb8>)
 8001b04:	4a1e      	ldr	r2, [pc, #120]	; (8001b80 <MX_ADC1_Init+0xc0>)
 8001b06:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b08:	4b1b      	ldr	r3, [pc, #108]	; (8001b78 <MX_ADC1_Init+0xb8>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 2;
 8001b0e:	4b1a      	ldr	r3, [pc, #104]	; (8001b78 <MX_ADC1_Init+0xb8>)
 8001b10:	2202      	movs	r2, #2
 8001b12:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8001b14:	4b18      	ldr	r3, [pc, #96]	; (8001b78 <MX_ADC1_Init+0xb8>)
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b1c:	4b16      	ldr	r3, [pc, #88]	; (8001b78 <MX_ADC1_Init+0xb8>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001b22:	4815      	ldr	r0, [pc, #84]	; (8001b78 <MX_ADC1_Init+0xb8>)
 8001b24:	f000 fcc2 	bl	80024ac <HAL_ADC_Init>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_ADC1_Init+0x72>
		Error_Handler();
 8001b2e:	f000 f997 	bl	8001e60 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8001b32:	2300      	movs	r3, #0
 8001b34:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001b36:	2301      	movs	r3, #1
 8001b38:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001b3a:	2307      	movs	r3, #7
 8001b3c:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001b3e:	463b      	mov	r3, r7
 8001b40:	4619      	mov	r1, r3
 8001b42:	480d      	ldr	r0, [pc, #52]	; (8001b78 <MX_ADC1_Init+0xb8>)
 8001b44:	f000 fdfa 	bl	800273c <HAL_ADC_ConfigChannel>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_ADC1_Init+0x92>
		Error_Handler();
 8001b4e:	f000 f987 	bl	8001e60 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8001b52:	2301      	movs	r3, #1
 8001b54:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 8001b56:	2302      	movs	r3, #2
 8001b58:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001b5a:	463b      	mov	r3, r7
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4806      	ldr	r0, [pc, #24]	; (8001b78 <MX_ADC1_Init+0xb8>)
 8001b60:	f000 fdec 	bl	800273c <HAL_ADC_ConfigChannel>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_ADC1_Init+0xae>
		Error_Handler();
 8001b6a:	f000 f979 	bl	8001e60 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001b6e:	bf00      	nop
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	2000002c 	.word	0x2000002c
 8001b7c:	40012000 	.word	0x40012000
 8001b80:	0f000001 	.word	0x0f000001

08001b84 <MX_I2C3_Init>:
/**
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void) {
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8001b88:	4b12      	ldr	r3, [pc, #72]	; (8001bd4 <MX_I2C3_Init+0x50>)
 8001b8a:	4a13      	ldr	r2, [pc, #76]	; (8001bd8 <MX_I2C3_Init+0x54>)
 8001b8c:	601a      	str	r2, [r3, #0]
	hi2c3.Init.ClockSpeed = 100000;
 8001b8e:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <MX_I2C3_Init+0x50>)
 8001b90:	4a12      	ldr	r2, [pc, #72]	; (8001bdc <MX_I2C3_Init+0x58>)
 8001b92:	605a      	str	r2, [r3, #4]
	hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b94:	4b0f      	ldr	r3, [pc, #60]	; (8001bd4 <MX_I2C3_Init+0x50>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	609a      	str	r2, [r3, #8]
	hi2c3.Init.OwnAddress1 = 0;
 8001b9a:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <MX_I2C3_Init+0x50>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	60da      	str	r2, [r3, #12]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <MX_I2C3_Init+0x50>)
 8001ba2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ba6:	611a      	str	r2, [r3, #16]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ba8:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <MX_I2C3_Init+0x50>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2 = 0;
 8001bae:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <MX_I2C3_Init+0x50>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bb4:	4b07      	ldr	r3, [pc, #28]	; (8001bd4 <MX_I2C3_Init+0x50>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bba:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <MX_I2C3_Init+0x50>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 8001bc0:	4804      	ldr	r0, [pc, #16]	; (8001bd4 <MX_I2C3_Init+0x50>)
 8001bc2:	f001 febb 	bl	800393c <HAL_I2C_Init>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_I2C3_Init+0x4c>
		Error_Handler();
 8001bcc:	f000 f948 	bl	8001e60 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 8001bd0:	bf00      	nop
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	200000d4 	.word	0x200000d4
 8001bd8:	40005c00 	.word	0x40005c00
 8001bdc:	000186a0 	.word	0x000186a0

08001be0 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001be4:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <MX_SPI1_Init+0x5c>)
 8001be6:	4a16      	ldr	r2, [pc, #88]	; (8001c40 <MX_SPI1_Init+0x60>)
 8001be8:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_SLAVE;
 8001bea:	4b14      	ldr	r3, [pc, #80]	; (8001c3c <MX_SPI1_Init+0x5c>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001bf0:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <MX_SPI1_Init+0x5c>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bf6:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <MX_SPI1_Init+0x5c>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bfc:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <MX_SPI1_Init+0x5c>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c02:	4b0e      	ldr	r3, [pc, #56]	; (8001c3c <MX_SPI1_Init+0x5c>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8001c08:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <MX_SPI1_Init+0x5c>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	619a      	str	r2, [r3, #24]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c0e:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <MX_SPI1_Init+0x5c>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c14:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <MX_SPI1_Init+0x5c>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c1a:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <MX_SPI1_Init+0x5c>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8001c20:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <MX_SPI1_Init+0x5c>)
 8001c22:	220a      	movs	r2, #10
 8001c24:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001c26:	4805      	ldr	r0, [pc, #20]	; (8001c3c <MX_SPI1_Init+0x5c>)
 8001c28:	f004 fc6e 	bl	8006508 <HAL_SPI_Init>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_SPI1_Init+0x56>
		Error_Handler();
 8001c32:	f000 f915 	bl	8001e60 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000128 	.word	0x20000128
 8001c40:	40013000 	.word	0x40013000

08001c44 <MX_TIM9_Init>:
/**
 * @brief TIM9 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM9_Init(void) {
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM9_Init 0 */

	/* USER CODE END TIM9_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001c4a:	463b      	mov	r3, r7
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM9_Init 1 */

	/* USER CODE END TIM9_Init 1 */
	htim9.Instance = TIM9;
 8001c56:	4b16      	ldr	r3, [pc, #88]	; (8001cb0 <MX_TIM9_Init+0x6c>)
 8001c58:	4a16      	ldr	r2, [pc, #88]	; (8001cb4 <MX_TIM9_Init+0x70>)
 8001c5a:	601a      	str	r2, [r3, #0]
	htim9.Init.Prescaler = 9999;
 8001c5c:	4b14      	ldr	r3, [pc, #80]	; (8001cb0 <MX_TIM9_Init+0x6c>)
 8001c5e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001c62:	605a      	str	r2, [r3, #4]
	htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c64:	4b12      	ldr	r3, [pc, #72]	; (8001cb0 <MX_TIM9_Init+0x6c>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	609a      	str	r2, [r3, #8]
	htim9.Init.Period = 99;
 8001c6a:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <MX_TIM9_Init+0x6c>)
 8001c6c:	2263      	movs	r2, #99	; 0x63
 8001c6e:	60da      	str	r2, [r3, #12]
	htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c70:	4b0f      	ldr	r3, [pc, #60]	; (8001cb0 <MX_TIM9_Init+0x6c>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	611a      	str	r2, [r3, #16]
	htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c76:	4b0e      	ldr	r3, [pc, #56]	; (8001cb0 <MX_TIM9_Init+0x6c>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim9) != HAL_OK) {
 8001c7c:	480c      	ldr	r0, [pc, #48]	; (8001cb0 <MX_TIM9_Init+0x6c>)
 8001c7e:	f005 f87d 	bl	8006d7c <HAL_TIM_Base_Init>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_TIM9_Init+0x48>
		Error_Handler();
 8001c88:	f000 f8ea 	bl	8001e60 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c90:	603b      	str	r3, [r7, #0]
	if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK) {
 8001c92:	463b      	mov	r3, r7
 8001c94:	4619      	mov	r1, r3
 8001c96:	4806      	ldr	r0, [pc, #24]	; (8001cb0 <MX_TIM9_Init+0x6c>)
 8001c98:	f005 fbf6 	bl	8007488 <HAL_TIM_ConfigClockSource>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_TIM9_Init+0x62>
		Error_Handler();
 8001ca2:	f000 f8dd 	bl	8001e60 <Error_Handler>
	}
	/* USER CODE BEGIN TIM9_Init 2 */

	/* USER CODE END TIM9_Init 2 */

}
 8001ca6:	bf00      	nop
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20000180 	.word	0x20000180
 8001cb4:	40014000 	.word	0x40014000

08001cb8 <MX_TIM10_Init>:
/**
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void) {
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b088      	sub	sp, #32
 8001cbc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM10_Init 0 */

	/* USER CODE END TIM10_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001cbe:	1d3b      	adds	r3, r7, #4
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	611a      	str	r2, [r3, #16]
 8001ccc:	615a      	str	r2, [r3, #20]
 8001cce:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 8001cd0:	4b1e      	ldr	r3, [pc, #120]	; (8001d4c <MX_TIM10_Init+0x94>)
 8001cd2:	4a1f      	ldr	r2, [pc, #124]	; (8001d50 <MX_TIM10_Init+0x98>)
 8001cd4:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 99;
 8001cd6:	4b1d      	ldr	r3, [pc, #116]	; (8001d4c <MX_TIM10_Init+0x94>)
 8001cd8:	2263      	movs	r2, #99	; 0x63
 8001cda:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cdc:	4b1b      	ldr	r3, [pc, #108]	; (8001d4c <MX_TIM10_Init+0x94>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 1000;
 8001ce2:	4b1a      	ldr	r3, [pc, #104]	; (8001d4c <MX_TIM10_Init+0x94>)
 8001ce4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ce8:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cea:	4b18      	ldr	r3, [pc, #96]	; (8001d4c <MX_TIM10_Init+0x94>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cf0:	4b16      	ldr	r3, [pc, #88]	; (8001d4c <MX_TIM10_Init+0x94>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK) {
 8001cf6:	4815      	ldr	r0, [pc, #84]	; (8001d4c <MX_TIM10_Init+0x94>)
 8001cf8:	f005 f840 	bl	8006d7c <HAL_TIM_Base_Init>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_TIM10_Init+0x4e>
		Error_Handler();
 8001d02:	f000 f8ad 	bl	8001e60 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim10) != HAL_OK) {
 8001d06:	4811      	ldr	r0, [pc, #68]	; (8001d4c <MX_TIM10_Init+0x94>)
 8001d08:	f005 f8ea 	bl	8006ee0 <HAL_TIM_PWM_Init>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_TIM10_Init+0x5e>
		Error_Handler();
 8001d12:	f000 f8a5 	bl	8001e60 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d16:	2360      	movs	r3, #96	; 0x60
 8001d18:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d22:	2300      	movs	r3, #0
 8001d24:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1)
 8001d26:	1d3b      	adds	r3, r7, #4
 8001d28:	2200      	movs	r2, #0
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4807      	ldr	r0, [pc, #28]	; (8001d4c <MX_TIM10_Init+0x94>)
 8001d2e:	f005 fae9 	bl	8007304 <HAL_TIM_PWM_ConfigChannel>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_TIM10_Init+0x84>
			!= HAL_OK) {
		Error_Handler();
 8001d38:	f000 f892 	bl	8001e60 <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */
	HAL_TIM_MspPostInit(&htim10);
 8001d3c:	4803      	ldr	r0, [pc, #12]	; (8001d4c <MX_TIM10_Init+0x94>)
 8001d3e:	f000 fa5f 	bl	8002200 <HAL_TIM_MspPostInit>

}
 8001d42:	bf00      	nop
 8001d44:	3720      	adds	r7, #32
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	200001c8 	.word	0x200001c8
 8001d50:	40014400 	.word	0x40014400

08001d54 <MX_TIM11_Init>:
/**
 * @brief TIM11 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM11_Init(void) {
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
	/* USER CODE END TIM11_Init 0 */

	/* USER CODE BEGIN TIM11_Init 1 */

	/* USER CODE END TIM11_Init 1 */
	htim11.Instance = TIM11;
 8001d58:	4b0e      	ldr	r3, [pc, #56]	; (8001d94 <MX_TIM11_Init+0x40>)
 8001d5a:	4a0f      	ldr	r2, [pc, #60]	; (8001d98 <MX_TIM11_Init+0x44>)
 8001d5c:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 9999;
 8001d5e:	4b0d      	ldr	r3, [pc, #52]	; (8001d94 <MX_TIM11_Init+0x40>)
 8001d60:	f242 720f 	movw	r2, #9999	; 0x270f
 8001d64:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d66:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <MX_TIM11_Init+0x40>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 9;
 8001d6c:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <MX_TIM11_Init+0x40>)
 8001d6e:	2209      	movs	r2, #9
 8001d70:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d72:	4b08      	ldr	r3, [pc, #32]	; (8001d94 <MX_TIM11_Init+0x40>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d78:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <MX_TIM11_Init+0x40>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim11) != HAL_OK) {
 8001d7e:	4805      	ldr	r0, [pc, #20]	; (8001d94 <MX_TIM11_Init+0x40>)
 8001d80:	f004 fffc 	bl	8006d7c <HAL_TIM_Base_Init>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_TIM11_Init+0x3a>
		Error_Handler();
 8001d8a:	f000 f869 	bl	8001e60 <Error_Handler>
	}
	/* USER CODE BEGIN TIM11_Init 2 */

	/* USER CODE END TIM11_Init 2 */

}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	20000210 	.word	0x20000210
 8001d98:	40014800 	.word	0x40014800

08001d9c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	607b      	str	r3, [r7, #4]
 8001da6:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <MX_DMA_Init+0x3c>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	4a0b      	ldr	r2, [pc, #44]	; (8001dd8 <MX_DMA_Init+0x3c>)
 8001dac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001db0:	6313      	str	r3, [r2, #48]	; 0x30
 8001db2:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <MX_DMA_Init+0x3c>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dba:	607b      	str	r3, [r7, #4]
 8001dbc:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 7, 0);
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	2107      	movs	r1, #7
 8001dc2:	2038      	movs	r0, #56	; 0x38
 8001dc4:	f001 f845 	bl	8002e52 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001dc8:	2038      	movs	r0, #56	; 0x38
 8001dca:	f001 f85e 	bl	8002e8a <HAL_NVIC_EnableIRQ>

}
 8001dce:	bf00      	nop
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40023800 	.word	0x40023800

08001ddc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b088      	sub	sp, #32
 8001de0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001de2:	f107 030c 	add.w	r3, r7, #12
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	605a      	str	r2, [r3, #4]
 8001dec:	609a      	str	r2, [r3, #8]
 8001dee:	60da      	str	r2, [r3, #12]
 8001df0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	4b18      	ldr	r3, [pc, #96]	; (8001e58 <MX_GPIO_Init+0x7c>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	4a17      	ldr	r2, [pc, #92]	; (8001e58 <MX_GPIO_Init+0x7c>)
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	6313      	str	r3, [r2, #48]	; 0x30
 8001e02:	4b15      	ldr	r3, [pc, #84]	; (8001e58 <MX_GPIO_Init+0x7c>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	60bb      	str	r3, [r7, #8]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	607b      	str	r3, [r7, #4]
 8001e12:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <MX_GPIO_Init+0x7c>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	4a10      	ldr	r2, [pc, #64]	; (8001e58 <MX_GPIO_Init+0x7c>)
 8001e18:	f043 0302 	orr.w	r3, r3, #2
 8001e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1e:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <MX_GPIO_Init+0x7c>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	607b      	str	r3, [r7, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(ZAWOR_GPIO_Port, ZAWOR_Pin, GPIO_PIN_RESET);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2104      	movs	r1, #4
 8001e2e:	480b      	ldr	r0, [pc, #44]	; (8001e5c <MX_GPIO_Init+0x80>)
 8001e30:	f001 fd6a 	bl	8003908 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : ZAWOR_Pin */
	GPIO_InitStruct.Pin = ZAWOR_Pin;
 8001e34:	2304      	movs	r3, #4
 8001e36:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e40:	2300      	movs	r3, #0
 8001e42:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(ZAWOR_GPIO_Port, &GPIO_InitStruct);
 8001e44:	f107 030c 	add.w	r3, r7, #12
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4804      	ldr	r0, [pc, #16]	; (8001e5c <MX_GPIO_Init+0x80>)
 8001e4c:	f001 fbd8 	bl	8003600 <HAL_GPIO_Init>

}
 8001e50:	bf00      	nop
 8001e52:	3720      	adds	r7, #32
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	40020400 	.word	0x40020400

08001e60 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e64:	b672      	cpsid	i
}
 8001e66:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001e68:	e7fe      	b.n	8001e68 <Error_Handler+0x8>
	...

08001e6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	607b      	str	r3, [r7, #4]
 8001e76:	4b13      	ldr	r3, [pc, #76]	; (8001ec4 <HAL_MspInit+0x58>)
 8001e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7a:	4a12      	ldr	r2, [pc, #72]	; (8001ec4 <HAL_MspInit+0x58>)
 8001e7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e80:	6453      	str	r3, [r2, #68]	; 0x44
 8001e82:	4b10      	ldr	r3, [pc, #64]	; (8001ec4 <HAL_MspInit+0x58>)
 8001e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e8a:	607b      	str	r3, [r7, #4]
 8001e8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	603b      	str	r3, [r7, #0]
 8001e92:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <HAL_MspInit+0x58>)
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	4a0b      	ldr	r2, [pc, #44]	; (8001ec4 <HAL_MspInit+0x58>)
 8001e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e9e:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <HAL_MspInit+0x58>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea6:	603b      	str	r3, [r7, #0]
 8001ea8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	2100      	movs	r1, #0
 8001eae:	2051      	movs	r0, #81	; 0x51
 8001eb0:	f000 ffcf 	bl	8002e52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8001eb4:	2051      	movs	r0, #81	; 0x51
 8001eb6:	f000 ffe8 	bl	8002e8a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40023800 	.word	0x40023800

08001ec8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b08a      	sub	sp, #40	; 0x28
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed0:	f107 0314 	add.w	r3, r7, #20
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	60da      	str	r2, [r3, #12]
 8001ede:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a2f      	ldr	r2, [pc, #188]	; (8001fa4 <HAL_ADC_MspInit+0xdc>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d157      	bne.n	8001f9a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	613b      	str	r3, [r7, #16]
 8001eee:	4b2e      	ldr	r3, [pc, #184]	; (8001fa8 <HAL_ADC_MspInit+0xe0>)
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef2:	4a2d      	ldr	r2, [pc, #180]	; (8001fa8 <HAL_ADC_MspInit+0xe0>)
 8001ef4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8001efa:	4b2b      	ldr	r3, [pc, #172]	; (8001fa8 <HAL_ADC_MspInit+0xe0>)
 8001efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f02:	613b      	str	r3, [r7, #16]
 8001f04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	4b27      	ldr	r3, [pc, #156]	; (8001fa8 <HAL_ADC_MspInit+0xe0>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	4a26      	ldr	r2, [pc, #152]	; (8001fa8 <HAL_ADC_MspInit+0xe0>)
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	6313      	str	r3, [r2, #48]	; 0x30
 8001f16:	4b24      	ldr	r3, [pc, #144]	; (8001fa8 <HAL_ADC_MspInit+0xe0>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f22:	2303      	movs	r3, #3
 8001f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f26:	2303      	movs	r3, #3
 8001f28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f2e:	f107 0314 	add.w	r3, r7, #20
 8001f32:	4619      	mov	r1, r3
 8001f34:	481d      	ldr	r0, [pc, #116]	; (8001fac <HAL_ADC_MspInit+0xe4>)
 8001f36:	f001 fb63 	bl	8003600 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001f3a:	4b1d      	ldr	r3, [pc, #116]	; (8001fb0 <HAL_ADC_MspInit+0xe8>)
 8001f3c:	4a1d      	ldr	r2, [pc, #116]	; (8001fb4 <HAL_ADC_MspInit+0xec>)
 8001f3e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001f40:	4b1b      	ldr	r3, [pc, #108]	; (8001fb0 <HAL_ADC_MspInit+0xe8>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f46:	4b1a      	ldr	r3, [pc, #104]	; (8001fb0 <HAL_ADC_MspInit+0xe8>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f4c:	4b18      	ldr	r3, [pc, #96]	; (8001fb0 <HAL_ADC_MspInit+0xe8>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f52:	4b17      	ldr	r3, [pc, #92]	; (8001fb0 <HAL_ADC_MspInit+0xe8>)
 8001f54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f58:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f5a:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <HAL_ADC_MspInit+0xe8>)
 8001f5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f60:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f62:	4b13      	ldr	r3, [pc, #76]	; (8001fb0 <HAL_ADC_MspInit+0xe8>)
 8001f64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f68:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001f6a:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <HAL_ADC_MspInit+0xe8>)
 8001f6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f70:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001f72:	4b0f      	ldr	r3, [pc, #60]	; (8001fb0 <HAL_ADC_MspInit+0xe8>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f78:	4b0d      	ldr	r3, [pc, #52]	; (8001fb0 <HAL_ADC_MspInit+0xe8>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f7e:	480c      	ldr	r0, [pc, #48]	; (8001fb0 <HAL_ADC_MspInit+0xe8>)
 8001f80:	f000 ff9e 	bl	8002ec0 <HAL_DMA_Init>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001f8a:	f7ff ff69 	bl	8001e60 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a07      	ldr	r2, [pc, #28]	; (8001fb0 <HAL_ADC_MspInit+0xe8>)
 8001f92:	639a      	str	r2, [r3, #56]	; 0x38
 8001f94:	4a06      	ldr	r2, [pc, #24]	; (8001fb0 <HAL_ADC_MspInit+0xe8>)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f9a:	bf00      	nop
 8001f9c:	3728      	adds	r7, #40	; 0x28
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40012000 	.word	0x40012000
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	40020000 	.word	0x40020000
 8001fb0:	20000074 	.word	0x20000074
 8001fb4:	40026410 	.word	0x40026410

08001fb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b08a      	sub	sp, #40	; 0x28
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc0:	f107 0314 	add.w	r3, r7, #20
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	609a      	str	r2, [r3, #8]
 8001fcc:	60da      	str	r2, [r3, #12]
 8001fce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a30      	ldr	r2, [pc, #192]	; (8002098 <HAL_I2C_MspInit+0xe0>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d15a      	bne.n	8002090 <HAL_I2C_MspInit+0xd8>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	613b      	str	r3, [r7, #16]
 8001fde:	4b2f      	ldr	r3, [pc, #188]	; (800209c <HAL_I2C_MspInit+0xe4>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	4a2e      	ldr	r2, [pc, #184]	; (800209c <HAL_I2C_MspInit+0xe4>)
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fea:	4b2c      	ldr	r3, [pc, #176]	; (800209c <HAL_I2C_MspInit+0xe4>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	613b      	str	r3, [r7, #16]
 8001ff4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	4b28      	ldr	r3, [pc, #160]	; (800209c <HAL_I2C_MspInit+0xe4>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	4a27      	ldr	r2, [pc, #156]	; (800209c <HAL_I2C_MspInit+0xe4>)
 8002000:	f043 0302 	orr.w	r3, r3, #2
 8002004:	6313      	str	r3, [r2, #48]	; 0x30
 8002006:	4b25      	ldr	r3, [pc, #148]	; (800209c <HAL_I2C_MspInit+0xe4>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB4     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002012:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002016:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002018:	2312      	movs	r3, #18
 800201a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201c:	2300      	movs	r3, #0
 800201e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002020:	2303      	movs	r3, #3
 8002022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002024:	2304      	movs	r3, #4
 8002026:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002028:	f107 0314 	add.w	r3, r7, #20
 800202c:	4619      	mov	r1, r3
 800202e:	481c      	ldr	r0, [pc, #112]	; (80020a0 <HAL_I2C_MspInit+0xe8>)
 8002030:	f001 fae6 	bl	8003600 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002034:	2310      	movs	r3, #16
 8002036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002038:	2312      	movs	r3, #18
 800203a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203c:	2300      	movs	r3, #0
 800203e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002040:	2303      	movs	r3, #3
 8002042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8002044:	2309      	movs	r3, #9
 8002046:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002048:	f107 0314 	add.w	r3, r7, #20
 800204c:	4619      	mov	r1, r3
 800204e:	4815      	ldr	r0, [pc, #84]	; (80020a4 <HAL_I2C_MspInit+0xec>)
 8002050:	f001 fad6 	bl	8003600 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002054:	2300      	movs	r3, #0
 8002056:	60bb      	str	r3, [r7, #8]
 8002058:	4b10      	ldr	r3, [pc, #64]	; (800209c <HAL_I2C_MspInit+0xe4>)
 800205a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205c:	4a0f      	ldr	r2, [pc, #60]	; (800209c <HAL_I2C_MspInit+0xe4>)
 800205e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002062:	6413      	str	r3, [r2, #64]	; 0x40
 8002064:	4b0d      	ldr	r3, [pc, #52]	; (800209c <HAL_I2C_MspInit+0xe4>)
 8002066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002068:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800206c:	60bb      	str	r3, [r7, #8]
 800206e:	68bb      	ldr	r3, [r7, #8]
    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 4, 0);
 8002070:	2200      	movs	r2, #0
 8002072:	2104      	movs	r1, #4
 8002074:	2048      	movs	r0, #72	; 0x48
 8002076:	f000 feec 	bl	8002e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 800207a:	2048      	movs	r0, #72	; 0x48
 800207c:	f000 ff05 	bl	8002e8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 5, 0);
 8002080:	2200      	movs	r2, #0
 8002082:	2105      	movs	r1, #5
 8002084:	2049      	movs	r0, #73	; 0x49
 8002086:	f000 fee4 	bl	8002e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 800208a:	2049      	movs	r0, #73	; 0x49
 800208c:	f000 fefd 	bl	8002e8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002090:	bf00      	nop
 8002092:	3728      	adds	r7, #40	; 0x28
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40005c00 	.word	0x40005c00
 800209c:	40023800 	.word	0x40023800
 80020a0:	40020000 	.word	0x40020000
 80020a4:	40020400 	.word	0x40020400

080020a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b08a      	sub	sp, #40	; 0x28
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b0:	f107 0314 	add.w	r3, r7, #20
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	605a      	str	r2, [r3, #4]
 80020ba:	609a      	str	r2, [r3, #8]
 80020bc:	60da      	str	r2, [r3, #12]
 80020be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a1d      	ldr	r2, [pc, #116]	; (800213c <HAL_SPI_MspInit+0x94>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d133      	bne.n	8002132 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	4b1c      	ldr	r3, [pc, #112]	; (8002140 <HAL_SPI_MspInit+0x98>)
 80020d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d2:	4a1b      	ldr	r2, [pc, #108]	; (8002140 <HAL_SPI_MspInit+0x98>)
 80020d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020d8:	6453      	str	r3, [r2, #68]	; 0x44
 80020da:	4b19      	ldr	r3, [pc, #100]	; (8002140 <HAL_SPI_MspInit+0x98>)
 80020dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020e2:	613b      	str	r3, [r7, #16]
 80020e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	4b15      	ldr	r3, [pc, #84]	; (8002140 <HAL_SPI_MspInit+0x98>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	4a14      	ldr	r2, [pc, #80]	; (8002140 <HAL_SPI_MspInit+0x98>)
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	6313      	str	r3, [r2, #48]	; 0x30
 80020f6:	4b12      	ldr	r3, [pc, #72]	; (8002140 <HAL_SPI_MspInit+0x98>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002102:	23f0      	movs	r3, #240	; 0xf0
 8002104:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002106:	2302      	movs	r3, #2
 8002108:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800210e:	2303      	movs	r3, #3
 8002110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002112:	2305      	movs	r3, #5
 8002114:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002116:	f107 0314 	add.w	r3, r7, #20
 800211a:	4619      	mov	r1, r3
 800211c:	4809      	ldr	r0, [pc, #36]	; (8002144 <HAL_SPI_MspInit+0x9c>)
 800211e:	f001 fa6f 	bl	8003600 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002122:	2200      	movs	r2, #0
 8002124:	2100      	movs	r1, #0
 8002126:	2023      	movs	r0, #35	; 0x23
 8002128:	f000 fe93 	bl	8002e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800212c:	2023      	movs	r0, #35	; 0x23
 800212e:	f000 feac 	bl	8002e8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002132:	bf00      	nop
 8002134:	3728      	adds	r7, #40	; 0x28
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	40013000 	.word	0x40013000
 8002140:	40023800 	.word	0x40023800
 8002144:	40020000 	.word	0x40020000

08002148 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a26      	ldr	r2, [pc, #152]	; (80021f0 <HAL_TIM_Base_MspInit+0xa8>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d116      	bne.n	8002188 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	4b25      	ldr	r3, [pc, #148]	; (80021f4 <HAL_TIM_Base_MspInit+0xac>)
 8002160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002162:	4a24      	ldr	r2, [pc, #144]	; (80021f4 <HAL_TIM_Base_MspInit+0xac>)
 8002164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002168:	6453      	str	r3, [r2, #68]	; 0x44
 800216a:	4b22      	ldr	r3, [pc, #136]	; (80021f4 <HAL_TIM_Base_MspInit+0xac>)
 800216c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002172:	617b      	str	r3, [r7, #20]
 8002174:	697b      	ldr	r3, [r7, #20]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002176:	2200      	movs	r2, #0
 8002178:	2100      	movs	r1, #0
 800217a:	2018      	movs	r0, #24
 800217c:	f000 fe69 	bl	8002e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002180:	2018      	movs	r0, #24
 8002182:	f000 fe82 	bl	8002e8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002186:	e02e      	b.n	80021e6 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM10)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a1a      	ldr	r2, [pc, #104]	; (80021f8 <HAL_TIM_Base_MspInit+0xb0>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d10e      	bne.n	80021b0 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	613b      	str	r3, [r7, #16]
 8002196:	4b17      	ldr	r3, [pc, #92]	; (80021f4 <HAL_TIM_Base_MspInit+0xac>)
 8002198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219a:	4a16      	ldr	r2, [pc, #88]	; (80021f4 <HAL_TIM_Base_MspInit+0xac>)
 800219c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021a0:	6453      	str	r3, [r2, #68]	; 0x44
 80021a2:	4b14      	ldr	r3, [pc, #80]	; (80021f4 <HAL_TIM_Base_MspInit+0xac>)
 80021a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021aa:	613b      	str	r3, [r7, #16]
 80021ac:	693b      	ldr	r3, [r7, #16]
}
 80021ae:	e01a      	b.n	80021e6 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM11)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a11      	ldr	r2, [pc, #68]	; (80021fc <HAL_TIM_Base_MspInit+0xb4>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d115      	bne.n	80021e6 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	4b0d      	ldr	r3, [pc, #52]	; (80021f4 <HAL_TIM_Base_MspInit+0xac>)
 80021c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c2:	4a0c      	ldr	r2, [pc, #48]	; (80021f4 <HAL_TIM_Base_MspInit+0xac>)
 80021c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021c8:	6453      	str	r3, [r2, #68]	; 0x44
 80021ca:	4b0a      	ldr	r3, [pc, #40]	; (80021f4 <HAL_TIM_Base_MspInit+0xac>)
 80021cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80021d6:	2200      	movs	r2, #0
 80021d8:	2100      	movs	r1, #0
 80021da:	201a      	movs	r0, #26
 80021dc:	f000 fe39 	bl	8002e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80021e0:	201a      	movs	r0, #26
 80021e2:	f000 fe52 	bl	8002e8a <HAL_NVIC_EnableIRQ>
}
 80021e6:	bf00      	nop
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40014000 	.word	0x40014000
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40014400 	.word	0x40014400
 80021fc:	40014800 	.word	0x40014800

08002200 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b088      	sub	sp, #32
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002208:	f107 030c 	add.w	r3, r7, #12
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	609a      	str	r2, [r3, #8]
 8002214:	60da      	str	r2, [r3, #12]
 8002216:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM10)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a12      	ldr	r2, [pc, #72]	; (8002268 <HAL_TIM_MspPostInit+0x68>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d11e      	bne.n	8002260 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM10_MspPostInit 0 */

  /* USER CODE END TIM10_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	4b11      	ldr	r3, [pc, #68]	; (800226c <HAL_TIM_MspPostInit+0x6c>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	4a10      	ldr	r2, [pc, #64]	; (800226c <HAL_TIM_MspPostInit+0x6c>)
 800222c:	f043 0302 	orr.w	r3, r3, #2
 8002230:	6313      	str	r3, [r2, #48]	; 0x30
 8002232:	4b0e      	ldr	r3, [pc, #56]	; (800226c <HAL_TIM_MspPostInit+0x6c>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	60bb      	str	r3, [r7, #8]
 800223c:	68bb      	ldr	r3, [r7, #8]
    /**TIM10 GPIO Configuration
    PB8     ------> TIM10_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800223e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002242:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002244:	2302      	movs	r3, #2
 8002246:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224c:	2300      	movs	r3, #0
 800224e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8002250:	2303      	movs	r3, #3
 8002252:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002254:	f107 030c 	add.w	r3, r7, #12
 8002258:	4619      	mov	r1, r3
 800225a:	4805      	ldr	r0, [pc, #20]	; (8002270 <HAL_TIM_MspPostInit+0x70>)
 800225c:	f001 f9d0 	bl	8003600 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8002260:	bf00      	nop
 8002262:	3720      	adds	r7, #32
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40014400 	.word	0x40014400
 800226c:	40023800 	.word	0x40023800
 8002270:	40020400 	.word	0x40020400

08002274 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002278:	e7fe      	b.n	8002278 <NMI_Handler+0x4>

0800227a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800227a:	b480      	push	{r7}
 800227c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800227e:	e7fe      	b.n	800227e <HardFault_Handler+0x4>

08002280 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002284:	e7fe      	b.n	8002284 <MemManage_Handler+0x4>

08002286 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002286:	b480      	push	{r7}
 8002288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800228a:	e7fe      	b.n	800228a <BusFault_Handler+0x4>

0800228c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002290:	e7fe      	b.n	8002290 <UsageFault_Handler+0x4>

08002292 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002292:	b480      	push	{r7}
 8002294:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002296:	bf00      	nop
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022a4:	bf00      	nop
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022ae:	b480      	push	{r7}
 80022b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022b2:	bf00      	nop
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022c0:	f000 f8d4 	bl	800246c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022c4:	bf00      	nop
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80022cc:	4802      	ldr	r0, [pc, #8]	; (80022d8 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80022ce:	f004 ff11 	bl	80070f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20000180 	.word	0x20000180

080022dc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80022e0:	4802      	ldr	r0, [pc, #8]	; (80022ec <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80022e2:	f004 ff07 	bl	80070f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	20000210 	.word	0x20000210

080022f0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80022f4:	4802      	ldr	r0, [pc, #8]	; (8002300 <SPI1_IRQHandler+0x10>)
 80022f6:	f004 fa25 	bl	8006744 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80022fa:	bf00      	nop
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	20000128 	.word	0x20000128

08002304 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002308:	4802      	ldr	r0, [pc, #8]	; (8002314 <DMA2_Stream0_IRQHandler+0x10>)
 800230a:	f000 ff01 	bl	8003110 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800230e:	bf00      	nop
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	20000074 	.word	0x20000074

08002318 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 800231c:	4802      	ldr	r0, [pc, #8]	; (8002328 <I2C3_EV_IRQHandler+0x10>)
 800231e:	f001 fdfd 	bl	8003f1c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8002322:	bf00      	nop
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	200000d4 	.word	0x200000d4

0800232c <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8002330:	4802      	ldr	r0, [pc, #8]	; (800233c <I2C3_ER_IRQHandler+0x10>)
 8002332:	f001 ff46 	bl	80041c2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	200000d4 	.word	0x200000d4

08002340 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8002344:	bf00      	nop
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
	...

08002350 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002354:	4b06      	ldr	r3, [pc, #24]	; (8002370 <SystemInit+0x20>)
 8002356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800235a:	4a05      	ldr	r2, [pc, #20]	; (8002370 <SystemInit+0x20>)
 800235c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002360:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002364:	bf00      	nop
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	e000ed00 	.word	0xe000ed00

08002374 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002374:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002378:	480d      	ldr	r0, [pc, #52]	; (80023b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800237a:	490e      	ldr	r1, [pc, #56]	; (80023b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800237c:	4a0e      	ldr	r2, [pc, #56]	; (80023b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800237e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002380:	e002      	b.n	8002388 <LoopCopyDataInit>

08002382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002386:	3304      	adds	r3, #4

08002388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800238a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800238c:	d3f9      	bcc.n	8002382 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800238e:	4a0b      	ldr	r2, [pc, #44]	; (80023bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002390:	4c0b      	ldr	r4, [pc, #44]	; (80023c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002394:	e001      	b.n	800239a <LoopFillZerobss>

08002396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002398:	3204      	adds	r2, #4

0800239a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800239a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800239c:	d3fb      	bcc.n	8002396 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800239e:	f7ff ffd7 	bl	8002350 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023a2:	f005 fc49 	bl	8007c38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023a6:	f7ff facf 	bl	8001948 <main>
  bx  lr    
 80023aa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80023ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023b4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80023b8:	08007cc8 	.word	0x08007cc8
  ldr r2, =_sbss
 80023bc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80023c0:	200002d0 	.word	0x200002d0

080023c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023c4:	e7fe      	b.n	80023c4 <ADC_IRQHandler>
	...

080023c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023cc:	4b0e      	ldr	r3, [pc, #56]	; (8002408 <HAL_Init+0x40>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a0d      	ldr	r2, [pc, #52]	; (8002408 <HAL_Init+0x40>)
 80023d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023d8:	4b0b      	ldr	r3, [pc, #44]	; (8002408 <HAL_Init+0x40>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a0a      	ldr	r2, [pc, #40]	; (8002408 <HAL_Init+0x40>)
 80023de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023e4:	4b08      	ldr	r3, [pc, #32]	; (8002408 <HAL_Init+0x40>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a07      	ldr	r2, [pc, #28]	; (8002408 <HAL_Init+0x40>)
 80023ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023f0:	2003      	movs	r0, #3
 80023f2:	f000 fd23 	bl	8002e3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023f6:	200f      	movs	r0, #15
 80023f8:	f000 f808 	bl	800240c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023fc:	f7ff fd36 	bl	8001e6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	40023c00 	.word	0x40023c00

0800240c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002414:	4b12      	ldr	r3, [pc, #72]	; (8002460 <HAL_InitTick+0x54>)
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	4b12      	ldr	r3, [pc, #72]	; (8002464 <HAL_InitTick+0x58>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	4619      	mov	r1, r3
 800241e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002422:	fbb3 f3f1 	udiv	r3, r3, r1
 8002426:	fbb2 f3f3 	udiv	r3, r2, r3
 800242a:	4618      	mov	r0, r3
 800242c:	f000 fd3b 	bl	8002ea6 <HAL_SYSTICK_Config>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e00e      	b.n	8002458 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2b0f      	cmp	r3, #15
 800243e:	d80a      	bhi.n	8002456 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002440:	2200      	movs	r2, #0
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002448:	f000 fd03 	bl	8002e52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800244c:	4a06      	ldr	r2, [pc, #24]	; (8002468 <HAL_InitTick+0x5c>)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002452:	2300      	movs	r3, #0
 8002454:	e000      	b.n	8002458 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
}
 8002458:	4618      	mov	r0, r3
 800245a:	3708      	adds	r7, #8
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	20000004 	.word	0x20000004
 8002464:	2000000c 	.word	0x2000000c
 8002468:	20000008 	.word	0x20000008

0800246c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002470:	4b06      	ldr	r3, [pc, #24]	; (800248c <HAL_IncTick+0x20>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	461a      	mov	r2, r3
 8002476:	4b06      	ldr	r3, [pc, #24]	; (8002490 <HAL_IncTick+0x24>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4413      	add	r3, r2
 800247c:	4a04      	ldr	r2, [pc, #16]	; (8002490 <HAL_IncTick+0x24>)
 800247e:	6013      	str	r3, [r2, #0]
}
 8002480:	bf00      	nop
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	2000000c 	.word	0x2000000c
 8002490:	200002cc 	.word	0x200002cc

08002494 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  return uwTick;
 8002498:	4b03      	ldr	r3, [pc, #12]	; (80024a8 <HAL_GetTick+0x14>)
 800249a:	681b      	ldr	r3, [r3, #0]
}
 800249c:	4618      	mov	r0, r3
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	200002cc 	.word	0x200002cc

080024ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024b4:	2300      	movs	r3, #0
 80024b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e033      	b.n	800252a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d109      	bne.n	80024de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7ff fcfc 	bl	8001ec8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	f003 0310 	and.w	r3, r3, #16
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d118      	bne.n	800251c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024f2:	f023 0302 	bic.w	r3, r3, #2
 80024f6:	f043 0202 	orr.w	r2, r3, #2
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 fa4e 	bl	80029a0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	f023 0303 	bic.w	r3, r3, #3
 8002512:	f043 0201 	orr.w	r2, r3, #1
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	641a      	str	r2, [r3, #64]	; 0x40
 800251a:	e001      	b.n	8002520 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002528:	7bfb      	ldrb	r3, [r7, #15]
}
 800252a:	4618      	mov	r0, r3
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
	...

08002534 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002540:	2300      	movs	r3, #0
 8002542:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800254a:	2b01      	cmp	r3, #1
 800254c:	d101      	bne.n	8002552 <HAL_ADC_Start_DMA+0x1e>
 800254e:	2302      	movs	r3, #2
 8002550:	e0ce      	b.n	80026f0 <HAL_ADC_Start_DMA+0x1bc>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b01      	cmp	r3, #1
 8002566:	d018      	beq.n	800259a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689a      	ldr	r2, [r3, #8]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f042 0201 	orr.w	r2, r2, #1
 8002576:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002578:	4b5f      	ldr	r3, [pc, #380]	; (80026f8 <HAL_ADC_Start_DMA+0x1c4>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a5f      	ldr	r2, [pc, #380]	; (80026fc <HAL_ADC_Start_DMA+0x1c8>)
 800257e:	fba2 2303 	umull	r2, r3, r2, r3
 8002582:	0c9a      	lsrs	r2, r3, #18
 8002584:	4613      	mov	r3, r2
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	4413      	add	r3, r2
 800258a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800258c:	e002      	b.n	8002594 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	3b01      	subs	r3, #1
 8002592:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1f9      	bne.n	800258e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025a8:	d107      	bne.n	80025ba <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	f040 8086 	bne.w	80026d6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80025d2:	f023 0301 	bic.w	r3, r3, #1
 80025d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d007      	beq.n	80025fc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025f4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002600:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002608:	d106      	bne.n	8002618 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260e:	f023 0206 	bic.w	r2, r3, #6
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	645a      	str	r2, [r3, #68]	; 0x44
 8002616:	e002      	b.n	800261e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002626:	4b36      	ldr	r3, [pc, #216]	; (8002700 <HAL_ADC_Start_DMA+0x1cc>)
 8002628:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262e:	4a35      	ldr	r2, [pc, #212]	; (8002704 <HAL_ADC_Start_DMA+0x1d0>)
 8002630:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002636:	4a34      	ldr	r2, [pc, #208]	; (8002708 <HAL_ADC_Start_DMA+0x1d4>)
 8002638:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263e:	4a33      	ldr	r2, [pc, #204]	; (800270c <HAL_ADC_Start_DMA+0x1d8>)
 8002640:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800264a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	685a      	ldr	r2, [r3, #4]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800265a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	689a      	ldr	r2, [r3, #8]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800266a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	334c      	adds	r3, #76	; 0x4c
 8002676:	4619      	mov	r1, r3
 8002678:	68ba      	ldr	r2, [r7, #8]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f000 fcce 	bl	800301c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f003 031f 	and.w	r3, r3, #31
 8002688:	2b00      	cmp	r3, #0
 800268a:	d10f      	bne.n	80026ac <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d129      	bne.n	80026ee <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80026a8:	609a      	str	r2, [r3, #8]
 80026aa:	e020      	b.n	80026ee <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a17      	ldr	r2, [pc, #92]	; (8002710 <HAL_ADC_Start_DMA+0x1dc>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d11b      	bne.n	80026ee <HAL_ADC_Start_DMA+0x1ba>
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d114      	bne.n	80026ee <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689a      	ldr	r2, [r3, #8]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80026d2:	609a      	str	r2, [r3, #8]
 80026d4:	e00b      	b.n	80026ee <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	f043 0210 	orr.w	r2, r3, #16
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e6:	f043 0201 	orr.w	r2, r3, #1
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3718      	adds	r7, #24
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	20000004 	.word	0x20000004
 80026fc:	431bde83 	.word	0x431bde83
 8002700:	40012300 	.word	0x40012300
 8002704:	08002b99 	.word	0x08002b99
 8002708:	08002c53 	.word	0x08002c53
 800270c:	08002c6f 	.word	0x08002c6f
 8002710:	40012000 	.word	0x40012000

08002714 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002746:	2300      	movs	r3, #0
 8002748:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002750:	2b01      	cmp	r3, #1
 8002752:	d101      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x1c>
 8002754:	2302      	movs	r3, #2
 8002756:	e113      	b.n	8002980 <HAL_ADC_ConfigChannel+0x244>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2b09      	cmp	r3, #9
 8002766:	d925      	bls.n	80027b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68d9      	ldr	r1, [r3, #12]
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	b29b      	uxth	r3, r3
 8002774:	461a      	mov	r2, r3
 8002776:	4613      	mov	r3, r2
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	4413      	add	r3, r2
 800277c:	3b1e      	subs	r3, #30
 800277e:	2207      	movs	r2, #7
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	43da      	mvns	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	400a      	ands	r2, r1
 800278c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68d9      	ldr	r1, [r3, #12]
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	b29b      	uxth	r3, r3
 800279e:	4618      	mov	r0, r3
 80027a0:	4603      	mov	r3, r0
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	4403      	add	r3, r0
 80027a6:	3b1e      	subs	r3, #30
 80027a8:	409a      	lsls	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	60da      	str	r2, [r3, #12]
 80027b2:	e022      	b.n	80027fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6919      	ldr	r1, [r3, #16]
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	b29b      	uxth	r3, r3
 80027c0:	461a      	mov	r2, r3
 80027c2:	4613      	mov	r3, r2
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	4413      	add	r3, r2
 80027c8:	2207      	movs	r2, #7
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	43da      	mvns	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	400a      	ands	r2, r1
 80027d6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6919      	ldr	r1, [r3, #16]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	689a      	ldr	r2, [r3, #8]
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	4618      	mov	r0, r3
 80027ea:	4603      	mov	r3, r0
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	4403      	add	r3, r0
 80027f0:	409a      	lsls	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	2b06      	cmp	r3, #6
 8002800:	d824      	bhi.n	800284c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	4613      	mov	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4413      	add	r3, r2
 8002812:	3b05      	subs	r3, #5
 8002814:	221f      	movs	r2, #31
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	43da      	mvns	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	400a      	ands	r2, r1
 8002822:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	b29b      	uxth	r3, r3
 8002830:	4618      	mov	r0, r3
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685a      	ldr	r2, [r3, #4]
 8002836:	4613      	mov	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4413      	add	r3, r2
 800283c:	3b05      	subs	r3, #5
 800283e:	fa00 f203 	lsl.w	r2, r0, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	430a      	orrs	r2, r1
 8002848:	635a      	str	r2, [r3, #52]	; 0x34
 800284a:	e04c      	b.n	80028e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	2b0c      	cmp	r3, #12
 8002852:	d824      	bhi.n	800289e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685a      	ldr	r2, [r3, #4]
 800285e:	4613      	mov	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	3b23      	subs	r3, #35	; 0x23
 8002866:	221f      	movs	r2, #31
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	43da      	mvns	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	400a      	ands	r2, r1
 8002874:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	b29b      	uxth	r3, r3
 8002882:	4618      	mov	r0, r3
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	4613      	mov	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4413      	add	r3, r2
 800288e:	3b23      	subs	r3, #35	; 0x23
 8002890:	fa00 f203 	lsl.w	r2, r0, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	430a      	orrs	r2, r1
 800289a:	631a      	str	r2, [r3, #48]	; 0x30
 800289c:	e023      	b.n	80028e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	4613      	mov	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4413      	add	r3, r2
 80028ae:	3b41      	subs	r3, #65	; 0x41
 80028b0:	221f      	movs	r2, #31
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	43da      	mvns	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	400a      	ands	r2, r1
 80028be:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	4618      	mov	r0, r3
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685a      	ldr	r2, [r3, #4]
 80028d2:	4613      	mov	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	3b41      	subs	r3, #65	; 0x41
 80028da:	fa00 f203 	lsl.w	r2, r0, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028e6:	4b29      	ldr	r3, [pc, #164]	; (800298c <HAL_ADC_ConfigChannel+0x250>)
 80028e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a28      	ldr	r2, [pc, #160]	; (8002990 <HAL_ADC_ConfigChannel+0x254>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d10f      	bne.n	8002914 <HAL_ADC_ConfigChannel+0x1d8>
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2b12      	cmp	r3, #18
 80028fa:	d10b      	bne.n	8002914 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a1d      	ldr	r2, [pc, #116]	; (8002990 <HAL_ADC_ConfigChannel+0x254>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d12b      	bne.n	8002976 <HAL_ADC_ConfigChannel+0x23a>
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a1c      	ldr	r2, [pc, #112]	; (8002994 <HAL_ADC_ConfigChannel+0x258>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d003      	beq.n	8002930 <HAL_ADC_ConfigChannel+0x1f4>
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2b11      	cmp	r3, #17
 800292e:	d122      	bne.n	8002976 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a11      	ldr	r2, [pc, #68]	; (8002994 <HAL_ADC_ConfigChannel+0x258>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d111      	bne.n	8002976 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002952:	4b11      	ldr	r3, [pc, #68]	; (8002998 <HAL_ADC_ConfigChannel+0x25c>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a11      	ldr	r2, [pc, #68]	; (800299c <HAL_ADC_ConfigChannel+0x260>)
 8002958:	fba2 2303 	umull	r2, r3, r2, r3
 800295c:	0c9a      	lsrs	r2, r3, #18
 800295e:	4613      	mov	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4413      	add	r3, r2
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002968:	e002      	b.n	8002970 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	3b01      	subs	r3, #1
 800296e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1f9      	bne.n	800296a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3714      	adds	r7, #20
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	40012300 	.word	0x40012300
 8002990:	40012000 	.word	0x40012000
 8002994:	10000012 	.word	0x10000012
 8002998:	20000004 	.word	0x20000004
 800299c:	431bde83 	.word	0x431bde83

080029a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029a8:	4b79      	ldr	r3, [pc, #484]	; (8002b90 <ADC_Init+0x1f0>)
 80029aa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	431a      	orrs	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	685a      	ldr	r2, [r3, #4]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	6859      	ldr	r1, [r3, #4]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	021a      	lsls	r2, r3, #8
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80029f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	6859      	ldr	r1, [r3, #4]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	689a      	ldr	r2, [r3, #8]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6899      	ldr	r1, [r3, #8]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68da      	ldr	r2, [r3, #12]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a32:	4a58      	ldr	r2, [pc, #352]	; (8002b94 <ADC_Init+0x1f4>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d022      	beq.n	8002a7e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689a      	ldr	r2, [r3, #8]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a46:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	6899      	ldr	r1, [r3, #8]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6899      	ldr	r1, [r3, #8]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	609a      	str	r2, [r3, #8]
 8002a7c:	e00f      	b.n	8002a9e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a9c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 0202 	bic.w	r2, r2, #2
 8002aac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	6899      	ldr	r1, [r3, #8]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	7e1b      	ldrb	r3, [r3, #24]
 8002ab8:	005a      	lsls	r2, r3, #1
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d01b      	beq.n	8002b04 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	685a      	ldr	r2, [r3, #4]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ada:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002aea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6859      	ldr	r1, [r3, #4]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af6:	3b01      	subs	r3, #1
 8002af8:	035a      	lsls	r2, r3, #13
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	430a      	orrs	r2, r1
 8002b00:	605a      	str	r2, [r3, #4]
 8002b02:	e007      	b.n	8002b14 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685a      	ldr	r2, [r3, #4]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b12:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002b22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	69db      	ldr	r3, [r3, #28]
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	051a      	lsls	r2, r3, #20
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	430a      	orrs	r2, r1
 8002b38:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	6899      	ldr	r1, [r3, #8]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b56:	025a      	lsls	r2, r3, #9
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689a      	ldr	r2, [r3, #8]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6899      	ldr	r1, [r3, #8]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	029a      	lsls	r2, r3, #10
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	430a      	orrs	r2, r1
 8002b82:	609a      	str	r2, [r3, #8]
}
 8002b84:	bf00      	nop
 8002b86:	3714      	adds	r7, #20
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	40012300 	.word	0x40012300
 8002b94:	0f000001 	.word	0x0f000001

08002b98 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d13c      	bne.n	8002c2c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d12b      	bne.n	8002c24 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d127      	bne.n	8002c24 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bda:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d006      	beq.n	8002bf0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d119      	bne.n	8002c24 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	685a      	ldr	r2, [r3, #4]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 0220 	bic.w	r2, r2, #32
 8002bfe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d105      	bne.n	8002c24 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1c:	f043 0201 	orr.w	r2, r3, #1
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f7fe fbcb 	bl	80013c0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c2a:	e00e      	b.n	8002c4a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c30:	f003 0310 	and.w	r3, r3, #16
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d003      	beq.n	8002c40 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	f7ff fd75 	bl	8002728 <HAL_ADC_ErrorCallback>
}
 8002c3e:	e004      	b.n	8002c4a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	4798      	blx	r3
}
 8002c4a:	bf00      	nop
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b084      	sub	sp, #16
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f7ff fd57 	bl	8002714 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c66:	bf00      	nop
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b084      	sub	sp, #16
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2240      	movs	r2, #64	; 0x40
 8002c80:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c86:	f043 0204 	orr.w	r2, r3, #4
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f7ff fd4a 	bl	8002728 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c94:	bf00      	nop
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cac:	4b0c      	ldr	r3, [pc, #48]	; (8002ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cb8:	4013      	ands	r3, r2
 8002cba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cce:	4a04      	ldr	r2, [pc, #16]	; (8002ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	60d3      	str	r3, [r2, #12]
}
 8002cd4:	bf00      	nop
 8002cd6:	3714      	adds	r7, #20
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	e000ed00 	.word	0xe000ed00

08002ce4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ce8:	4b04      	ldr	r3, [pc, #16]	; (8002cfc <__NVIC_GetPriorityGrouping+0x18>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	0a1b      	lsrs	r3, r3, #8
 8002cee:	f003 0307 	and.w	r3, r3, #7
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	e000ed00 	.word	0xe000ed00

08002d00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	db0b      	blt.n	8002d2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d12:	79fb      	ldrb	r3, [r7, #7]
 8002d14:	f003 021f 	and.w	r2, r3, #31
 8002d18:	4907      	ldr	r1, [pc, #28]	; (8002d38 <__NVIC_EnableIRQ+0x38>)
 8002d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1e:	095b      	lsrs	r3, r3, #5
 8002d20:	2001      	movs	r0, #1
 8002d22:	fa00 f202 	lsl.w	r2, r0, r2
 8002d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d2a:	bf00      	nop
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	e000e100 	.word	0xe000e100

08002d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	4603      	mov	r3, r0
 8002d44:	6039      	str	r1, [r7, #0]
 8002d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	db0a      	blt.n	8002d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	b2da      	uxtb	r2, r3
 8002d54:	490c      	ldr	r1, [pc, #48]	; (8002d88 <__NVIC_SetPriority+0x4c>)
 8002d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5a:	0112      	lsls	r2, r2, #4
 8002d5c:	b2d2      	uxtb	r2, r2
 8002d5e:	440b      	add	r3, r1
 8002d60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d64:	e00a      	b.n	8002d7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	4908      	ldr	r1, [pc, #32]	; (8002d8c <__NVIC_SetPriority+0x50>)
 8002d6c:	79fb      	ldrb	r3, [r7, #7]
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	3b04      	subs	r3, #4
 8002d74:	0112      	lsls	r2, r2, #4
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	440b      	add	r3, r1
 8002d7a:	761a      	strb	r2, [r3, #24]
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr
 8002d88:	e000e100 	.word	0xe000e100
 8002d8c:	e000ed00 	.word	0xe000ed00

08002d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b089      	sub	sp, #36	; 0x24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	f1c3 0307 	rsb	r3, r3, #7
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	bf28      	it	cs
 8002dae:	2304      	movcs	r3, #4
 8002db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	3304      	adds	r3, #4
 8002db6:	2b06      	cmp	r3, #6
 8002db8:	d902      	bls.n	8002dc0 <NVIC_EncodePriority+0x30>
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	3b03      	subs	r3, #3
 8002dbe:	e000      	b.n	8002dc2 <NVIC_EncodePriority+0x32>
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	43da      	mvns	r2, r3
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	401a      	ands	r2, r3
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	fa01 f303 	lsl.w	r3, r1, r3
 8002de2:	43d9      	mvns	r1, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002de8:	4313      	orrs	r3, r2
         );
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3724      	adds	r7, #36	; 0x24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
	...

08002df8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3b01      	subs	r3, #1
 8002e04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e08:	d301      	bcc.n	8002e0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e00f      	b.n	8002e2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e0e:	4a0a      	ldr	r2, [pc, #40]	; (8002e38 <SysTick_Config+0x40>)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e16:	210f      	movs	r1, #15
 8002e18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e1c:	f7ff ff8e 	bl	8002d3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e20:	4b05      	ldr	r3, [pc, #20]	; (8002e38 <SysTick_Config+0x40>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e26:	4b04      	ldr	r3, [pc, #16]	; (8002e38 <SysTick_Config+0x40>)
 8002e28:	2207      	movs	r2, #7
 8002e2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	e000e010 	.word	0xe000e010

08002e3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f7ff ff29 	bl	8002c9c <__NVIC_SetPriorityGrouping>
}
 8002e4a:	bf00      	nop
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b086      	sub	sp, #24
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	4603      	mov	r3, r0
 8002e5a:	60b9      	str	r1, [r7, #8]
 8002e5c:	607a      	str	r2, [r7, #4]
 8002e5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e60:	2300      	movs	r3, #0
 8002e62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e64:	f7ff ff3e 	bl	8002ce4 <__NVIC_GetPriorityGrouping>
 8002e68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	68b9      	ldr	r1, [r7, #8]
 8002e6e:	6978      	ldr	r0, [r7, #20]
 8002e70:	f7ff ff8e 	bl	8002d90 <NVIC_EncodePriority>
 8002e74:	4602      	mov	r2, r0
 8002e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff ff5d 	bl	8002d3c <__NVIC_SetPriority>
}
 8002e82:	bf00      	nop
 8002e84:	3718      	adds	r7, #24
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b082      	sub	sp, #8
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	4603      	mov	r3, r0
 8002e92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff ff31 	bl	8002d00 <__NVIC_EnableIRQ>
}
 8002e9e:	bf00      	nop
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b082      	sub	sp, #8
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f7ff ffa2 	bl	8002df8 <SysTick_Config>
 8002eb4:	4603      	mov	r3, r0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
	...

08002ec0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ecc:	f7ff fae2 	bl	8002494 <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e099      	b.n	8003010 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2202      	movs	r2, #2
 8002ee0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f022 0201 	bic.w	r2, r2, #1
 8002efa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002efc:	e00f      	b.n	8002f1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002efe:	f7ff fac9 	bl	8002494 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b05      	cmp	r3, #5
 8002f0a:	d908      	bls.n	8002f1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2220      	movs	r2, #32
 8002f10:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2203      	movs	r2, #3
 8002f16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e078      	b.n	8003010 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1e8      	bne.n	8002efe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	4b38      	ldr	r3, [pc, #224]	; (8003018 <HAL_DMA_Init+0x158>)
 8002f38:	4013      	ands	r3, r2
 8002f3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f74:	2b04      	cmp	r3, #4
 8002f76:	d107      	bne.n	8002f88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f80:	4313      	orrs	r3, r2
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	f023 0307 	bic.w	r3, r3, #7
 8002f9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	2b04      	cmp	r3, #4
 8002fb0:	d117      	bne.n	8002fe2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00e      	beq.n	8002fe2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 fa9f 	bl	8003508 <DMA_CheckFifoParam>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d008      	beq.n	8002fe2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2240      	movs	r2, #64	; 0x40
 8002fd4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e016      	b.n	8003010 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 fa56 	bl	800349c <DMA_CalcBaseAndBitshift>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff8:	223f      	movs	r2, #63	; 0x3f
 8002ffa:	409a      	lsls	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3718      	adds	r7, #24
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	f010803f 	.word	0xf010803f

0800301c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
 8003028:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800302a:	2300      	movs	r3, #0
 800302c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003032:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800303a:	2b01      	cmp	r3, #1
 800303c:	d101      	bne.n	8003042 <HAL_DMA_Start_IT+0x26>
 800303e:	2302      	movs	r3, #2
 8003040:	e040      	b.n	80030c4 <HAL_DMA_Start_IT+0xa8>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b01      	cmp	r3, #1
 8003054:	d12f      	bne.n	80030b6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2202      	movs	r2, #2
 800305a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	68b9      	ldr	r1, [r7, #8]
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f000 f9e8 	bl	8003440 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003074:	223f      	movs	r2, #63	; 0x3f
 8003076:	409a      	lsls	r2, r3
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f042 0216 	orr.w	r2, r2, #22
 800308a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003090:	2b00      	cmp	r3, #0
 8003092:	d007      	beq.n	80030a4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f042 0208 	orr.w	r2, r2, #8
 80030a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f042 0201 	orr.w	r2, r2, #1
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	e005      	b.n	80030c2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80030be:	2302      	movs	r3, #2
 80030c0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80030c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3718      	adds	r7, #24
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d004      	beq.n	80030ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2280      	movs	r2, #128	; 0x80
 80030e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e00c      	b.n	8003104 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2205      	movs	r2, #5
 80030ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 0201 	bic.w	r2, r2, #1
 8003100:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003118:	2300      	movs	r3, #0
 800311a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800311c:	4b8e      	ldr	r3, [pc, #568]	; (8003358 <HAL_DMA_IRQHandler+0x248>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a8e      	ldr	r2, [pc, #568]	; (800335c <HAL_DMA_IRQHandler+0x24c>)
 8003122:	fba2 2303 	umull	r2, r3, r2, r3
 8003126:	0a9b      	lsrs	r3, r3, #10
 8003128:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800312e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800313a:	2208      	movs	r2, #8
 800313c:	409a      	lsls	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	4013      	ands	r3, r2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d01a      	beq.n	800317c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b00      	cmp	r3, #0
 8003152:	d013      	beq.n	800317c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f022 0204 	bic.w	r2, r2, #4
 8003162:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003168:	2208      	movs	r2, #8
 800316a:	409a      	lsls	r2, r3
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003174:	f043 0201 	orr.w	r2, r3, #1
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003180:	2201      	movs	r2, #1
 8003182:	409a      	lsls	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4013      	ands	r3, r2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d012      	beq.n	80031b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00b      	beq.n	80031b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800319e:	2201      	movs	r2, #1
 80031a0:	409a      	lsls	r2, r3
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031aa:	f043 0202 	orr.w	r2, r3, #2
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b6:	2204      	movs	r2, #4
 80031b8:	409a      	lsls	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	4013      	ands	r3, r2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d012      	beq.n	80031e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00b      	beq.n	80031e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d4:	2204      	movs	r2, #4
 80031d6:	409a      	lsls	r2, r3
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e0:	f043 0204 	orr.w	r2, r3, #4
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ec:	2210      	movs	r2, #16
 80031ee:	409a      	lsls	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	4013      	ands	r3, r2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d043      	beq.n	8003280 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	2b00      	cmp	r3, #0
 8003204:	d03c      	beq.n	8003280 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800320a:	2210      	movs	r2, #16
 800320c:	409a      	lsls	r2, r3
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d018      	beq.n	8003252 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d108      	bne.n	8003240 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	2b00      	cmp	r3, #0
 8003234:	d024      	beq.n	8003280 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	4798      	blx	r3
 800323e:	e01f      	b.n	8003280 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003244:	2b00      	cmp	r3, #0
 8003246:	d01b      	beq.n	8003280 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	4798      	blx	r3
 8003250:	e016      	b.n	8003280 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325c:	2b00      	cmp	r3, #0
 800325e:	d107      	bne.n	8003270 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 0208 	bic.w	r2, r2, #8
 800326e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003274:	2b00      	cmp	r3, #0
 8003276:	d003      	beq.n	8003280 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003284:	2220      	movs	r2, #32
 8003286:	409a      	lsls	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	4013      	ands	r3, r2
 800328c:	2b00      	cmp	r3, #0
 800328e:	f000 808f 	beq.w	80033b0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0310 	and.w	r3, r3, #16
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 8087 	beq.w	80033b0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a6:	2220      	movs	r2, #32
 80032a8:	409a      	lsls	r2, r3
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b05      	cmp	r3, #5
 80032b8:	d136      	bne.n	8003328 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f022 0216 	bic.w	r2, r2, #22
 80032c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	695a      	ldr	r2, [r3, #20]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d103      	bne.n	80032ea <HAL_DMA_IRQHandler+0x1da>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d007      	beq.n	80032fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 0208 	bic.w	r2, r2, #8
 80032f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032fe:	223f      	movs	r2, #63	; 0x3f
 8003300:	409a      	lsls	r2, r3
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800331a:	2b00      	cmp	r3, #0
 800331c:	d07e      	beq.n	800341c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	4798      	blx	r3
        }
        return;
 8003326:	e079      	b.n	800341c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d01d      	beq.n	8003372 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d10d      	bne.n	8003360 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003348:	2b00      	cmp	r3, #0
 800334a:	d031      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	4798      	blx	r3
 8003354:	e02c      	b.n	80033b0 <HAL_DMA_IRQHandler+0x2a0>
 8003356:	bf00      	nop
 8003358:	20000004 	.word	0x20000004
 800335c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003364:	2b00      	cmp	r3, #0
 8003366:	d023      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	4798      	blx	r3
 8003370:	e01e      	b.n	80033b0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10f      	bne.n	80033a0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 0210 	bic.w	r2, r2, #16
 800338e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d003      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d032      	beq.n	800341e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d022      	beq.n	800340a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2205      	movs	r2, #5
 80033c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0201 	bic.w	r2, r2, #1
 80033da:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	3301      	adds	r3, #1
 80033e0:	60bb      	str	r3, [r7, #8]
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d307      	bcc.n	80033f8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1f2      	bne.n	80033dc <HAL_DMA_IRQHandler+0x2cc>
 80033f6:	e000      	b.n	80033fa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80033f8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800340e:	2b00      	cmp	r3, #0
 8003410:	d005      	beq.n	800341e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	4798      	blx	r3
 800341a:	e000      	b.n	800341e <HAL_DMA_IRQHandler+0x30e>
        return;
 800341c:	bf00      	nop
    }
  }
}
 800341e:	3718      	adds	r7, #24
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003432:	b2db      	uxtb	r3, r3
}
 8003434:	4618      	mov	r0, r3
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
 800344c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800345c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	2b40      	cmp	r3, #64	; 0x40
 800346c:	d108      	bne.n	8003480 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800347e:	e007      	b.n	8003490 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68ba      	ldr	r2, [r7, #8]
 8003486:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	60da      	str	r2, [r3, #12]
}
 8003490:	bf00      	nop
 8003492:	3714      	adds	r7, #20
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	3b10      	subs	r3, #16
 80034ac:	4a14      	ldr	r2, [pc, #80]	; (8003500 <DMA_CalcBaseAndBitshift+0x64>)
 80034ae:	fba2 2303 	umull	r2, r3, r2, r3
 80034b2:	091b      	lsrs	r3, r3, #4
 80034b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80034b6:	4a13      	ldr	r2, [pc, #76]	; (8003504 <DMA_CalcBaseAndBitshift+0x68>)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	4413      	add	r3, r2
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	461a      	mov	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2b03      	cmp	r3, #3
 80034c8:	d909      	bls.n	80034de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034d2:	f023 0303 	bic.w	r3, r3, #3
 80034d6:	1d1a      	adds	r2, r3, #4
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	659a      	str	r2, [r3, #88]	; 0x58
 80034dc:	e007      	b.n	80034ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034e6:	f023 0303 	bic.w	r3, r3, #3
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3714      	adds	r7, #20
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	aaaaaaab 	.word	0xaaaaaaab
 8003504:	08007cb0 	.word	0x08007cb0

08003508 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003510:	2300      	movs	r3, #0
 8003512:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003518:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d11f      	bne.n	8003562 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	2b03      	cmp	r3, #3
 8003526:	d856      	bhi.n	80035d6 <DMA_CheckFifoParam+0xce>
 8003528:	a201      	add	r2, pc, #4	; (adr r2, 8003530 <DMA_CheckFifoParam+0x28>)
 800352a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352e:	bf00      	nop
 8003530:	08003541 	.word	0x08003541
 8003534:	08003553 	.word	0x08003553
 8003538:	08003541 	.word	0x08003541
 800353c:	080035d7 	.word	0x080035d7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003544:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d046      	beq.n	80035da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003550:	e043      	b.n	80035da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003556:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800355a:	d140      	bne.n	80035de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003560:	e03d      	b.n	80035de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800356a:	d121      	bne.n	80035b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	2b03      	cmp	r3, #3
 8003570:	d837      	bhi.n	80035e2 <DMA_CheckFifoParam+0xda>
 8003572:	a201      	add	r2, pc, #4	; (adr r2, 8003578 <DMA_CheckFifoParam+0x70>)
 8003574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003578:	08003589 	.word	0x08003589
 800357c:	0800358f 	.word	0x0800358f
 8003580:	08003589 	.word	0x08003589
 8003584:	080035a1 	.word	0x080035a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	73fb      	strb	r3, [r7, #15]
      break;
 800358c:	e030      	b.n	80035f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003592:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d025      	beq.n	80035e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800359e:	e022      	b.n	80035e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035a8:	d11f      	bne.n	80035ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80035ae:	e01c      	b.n	80035ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d903      	bls.n	80035be <DMA_CheckFifoParam+0xb6>
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	2b03      	cmp	r3, #3
 80035ba:	d003      	beq.n	80035c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80035bc:	e018      	b.n	80035f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	73fb      	strb	r3, [r7, #15]
      break;
 80035c2:	e015      	b.n	80035f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00e      	beq.n	80035ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	73fb      	strb	r3, [r7, #15]
      break;
 80035d4:	e00b      	b.n	80035ee <DMA_CheckFifoParam+0xe6>
      break;
 80035d6:	bf00      	nop
 80035d8:	e00a      	b.n	80035f0 <DMA_CheckFifoParam+0xe8>
      break;
 80035da:	bf00      	nop
 80035dc:	e008      	b.n	80035f0 <DMA_CheckFifoParam+0xe8>
      break;
 80035de:	bf00      	nop
 80035e0:	e006      	b.n	80035f0 <DMA_CheckFifoParam+0xe8>
      break;
 80035e2:	bf00      	nop
 80035e4:	e004      	b.n	80035f0 <DMA_CheckFifoParam+0xe8>
      break;
 80035e6:	bf00      	nop
 80035e8:	e002      	b.n	80035f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80035ea:	bf00      	nop
 80035ec:	e000      	b.n	80035f0 <DMA_CheckFifoParam+0xe8>
      break;
 80035ee:	bf00      	nop
    }
  } 
  
  return status; 
 80035f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3714      	adds	r7, #20
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop

08003600 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003600:	b480      	push	{r7}
 8003602:	b089      	sub	sp, #36	; 0x24
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800360a:	2300      	movs	r3, #0
 800360c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800360e:	2300      	movs	r3, #0
 8003610:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003612:	2300      	movs	r3, #0
 8003614:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003616:	2300      	movs	r3, #0
 8003618:	61fb      	str	r3, [r7, #28]
 800361a:	e159      	b.n	80038d0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800361c:	2201      	movs	r2, #1
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	fa02 f303 	lsl.w	r3, r2, r3
 8003624:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	4013      	ands	r3, r2
 800362e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	429a      	cmp	r2, r3
 8003636:	f040 8148 	bne.w	80038ca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f003 0303 	and.w	r3, r3, #3
 8003642:	2b01      	cmp	r3, #1
 8003644:	d005      	beq.n	8003652 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800364e:	2b02      	cmp	r3, #2
 8003650:	d130      	bne.n	80036b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	2203      	movs	r2, #3
 800365e:	fa02 f303 	lsl.w	r3, r2, r3
 8003662:	43db      	mvns	r3, r3
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	4013      	ands	r3, r2
 8003668:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	68da      	ldr	r2, [r3, #12]
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	fa02 f303 	lsl.w	r3, r2, r3
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	4313      	orrs	r3, r2
 800367a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003688:	2201      	movs	r2, #1
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	fa02 f303 	lsl.w	r3, r2, r3
 8003690:	43db      	mvns	r3, r3
 8003692:	69ba      	ldr	r2, [r7, #24]
 8003694:	4013      	ands	r3, r2
 8003696:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	091b      	lsrs	r3, r3, #4
 800369e:	f003 0201 	and.w	r2, r3, #1
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	fa02 f303 	lsl.w	r3, r2, r3
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f003 0303 	and.w	r3, r3, #3
 80036bc:	2b03      	cmp	r3, #3
 80036be:	d017      	beq.n	80036f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	2203      	movs	r2, #3
 80036cc:	fa02 f303 	lsl.w	r3, r2, r3
 80036d0:	43db      	mvns	r3, r3
 80036d2:	69ba      	ldr	r2, [r7, #24]
 80036d4:	4013      	ands	r3, r2
 80036d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	fa02 f303 	lsl.w	r3, r2, r3
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f003 0303 	and.w	r3, r3, #3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d123      	bne.n	8003744 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	08da      	lsrs	r2, r3, #3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	3208      	adds	r2, #8
 8003704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003708:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	f003 0307 	and.w	r3, r3, #7
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	220f      	movs	r2, #15
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	43db      	mvns	r3, r3
 800371a:	69ba      	ldr	r2, [r7, #24]
 800371c:	4013      	ands	r3, r2
 800371e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	691a      	ldr	r2, [r3, #16]
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	f003 0307 	and.w	r3, r3, #7
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	4313      	orrs	r3, r2
 8003734:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	08da      	lsrs	r2, r3, #3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	3208      	adds	r2, #8
 800373e:	69b9      	ldr	r1, [r7, #24]
 8003740:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	2203      	movs	r2, #3
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	43db      	mvns	r3, r3
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	4013      	ands	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f003 0203 	and.w	r2, r3, #3
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	4313      	orrs	r3, r2
 8003770:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 80a2 	beq.w	80038ca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003786:	2300      	movs	r3, #0
 8003788:	60fb      	str	r3, [r7, #12]
 800378a:	4b57      	ldr	r3, [pc, #348]	; (80038e8 <HAL_GPIO_Init+0x2e8>)
 800378c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378e:	4a56      	ldr	r2, [pc, #344]	; (80038e8 <HAL_GPIO_Init+0x2e8>)
 8003790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003794:	6453      	str	r3, [r2, #68]	; 0x44
 8003796:	4b54      	ldr	r3, [pc, #336]	; (80038e8 <HAL_GPIO_Init+0x2e8>)
 8003798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800379e:	60fb      	str	r3, [r7, #12]
 80037a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037a2:	4a52      	ldr	r2, [pc, #328]	; (80038ec <HAL_GPIO_Init+0x2ec>)
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	089b      	lsrs	r3, r3, #2
 80037a8:	3302      	adds	r3, #2
 80037aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	f003 0303 	and.w	r3, r3, #3
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	220f      	movs	r2, #15
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	43db      	mvns	r3, r3
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	4013      	ands	r3, r2
 80037c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a49      	ldr	r2, [pc, #292]	; (80038f0 <HAL_GPIO_Init+0x2f0>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d019      	beq.n	8003802 <HAL_GPIO_Init+0x202>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a48      	ldr	r2, [pc, #288]	; (80038f4 <HAL_GPIO_Init+0x2f4>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d013      	beq.n	80037fe <HAL_GPIO_Init+0x1fe>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a47      	ldr	r2, [pc, #284]	; (80038f8 <HAL_GPIO_Init+0x2f8>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d00d      	beq.n	80037fa <HAL_GPIO_Init+0x1fa>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a46      	ldr	r2, [pc, #280]	; (80038fc <HAL_GPIO_Init+0x2fc>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d007      	beq.n	80037f6 <HAL_GPIO_Init+0x1f6>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a45      	ldr	r2, [pc, #276]	; (8003900 <HAL_GPIO_Init+0x300>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d101      	bne.n	80037f2 <HAL_GPIO_Init+0x1f2>
 80037ee:	2304      	movs	r3, #4
 80037f0:	e008      	b.n	8003804 <HAL_GPIO_Init+0x204>
 80037f2:	2307      	movs	r3, #7
 80037f4:	e006      	b.n	8003804 <HAL_GPIO_Init+0x204>
 80037f6:	2303      	movs	r3, #3
 80037f8:	e004      	b.n	8003804 <HAL_GPIO_Init+0x204>
 80037fa:	2302      	movs	r3, #2
 80037fc:	e002      	b.n	8003804 <HAL_GPIO_Init+0x204>
 80037fe:	2301      	movs	r3, #1
 8003800:	e000      	b.n	8003804 <HAL_GPIO_Init+0x204>
 8003802:	2300      	movs	r3, #0
 8003804:	69fa      	ldr	r2, [r7, #28]
 8003806:	f002 0203 	and.w	r2, r2, #3
 800380a:	0092      	lsls	r2, r2, #2
 800380c:	4093      	lsls	r3, r2
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	4313      	orrs	r3, r2
 8003812:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003814:	4935      	ldr	r1, [pc, #212]	; (80038ec <HAL_GPIO_Init+0x2ec>)
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	089b      	lsrs	r3, r3, #2
 800381a:	3302      	adds	r3, #2
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003822:	4b38      	ldr	r3, [pc, #224]	; (8003904 <HAL_GPIO_Init+0x304>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	43db      	mvns	r3, r3
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	4013      	ands	r3, r2
 8003830:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	4313      	orrs	r3, r2
 8003844:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003846:	4a2f      	ldr	r2, [pc, #188]	; (8003904 <HAL_GPIO_Init+0x304>)
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800384c:	4b2d      	ldr	r3, [pc, #180]	; (8003904 <HAL_GPIO_Init+0x304>)
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	43db      	mvns	r3, r3
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	4013      	ands	r3, r2
 800385a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d003      	beq.n	8003870 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	4313      	orrs	r3, r2
 800386e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003870:	4a24      	ldr	r2, [pc, #144]	; (8003904 <HAL_GPIO_Init+0x304>)
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003876:	4b23      	ldr	r3, [pc, #140]	; (8003904 <HAL_GPIO_Init+0x304>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	43db      	mvns	r3, r3
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	4013      	ands	r3, r2
 8003884:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	4313      	orrs	r3, r2
 8003898:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800389a:	4a1a      	ldr	r2, [pc, #104]	; (8003904 <HAL_GPIO_Init+0x304>)
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038a0:	4b18      	ldr	r3, [pc, #96]	; (8003904 <HAL_GPIO_Init+0x304>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	43db      	mvns	r3, r3
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	4013      	ands	r3, r2
 80038ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d003      	beq.n	80038c4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038c4:	4a0f      	ldr	r2, [pc, #60]	; (8003904 <HAL_GPIO_Init+0x304>)
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	3301      	adds	r3, #1
 80038ce:	61fb      	str	r3, [r7, #28]
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	2b0f      	cmp	r3, #15
 80038d4:	f67f aea2 	bls.w	800361c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038d8:	bf00      	nop
 80038da:	bf00      	nop
 80038dc:	3724      	adds	r7, #36	; 0x24
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	40023800 	.word	0x40023800
 80038ec:	40013800 	.word	0x40013800
 80038f0:	40020000 	.word	0x40020000
 80038f4:	40020400 	.word	0x40020400
 80038f8:	40020800 	.word	0x40020800
 80038fc:	40020c00 	.word	0x40020c00
 8003900:	40021000 	.word	0x40021000
 8003904:	40013c00 	.word	0x40013c00

08003908 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	460b      	mov	r3, r1
 8003912:	807b      	strh	r3, [r7, #2]
 8003914:	4613      	mov	r3, r2
 8003916:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003918:	787b      	ldrb	r3, [r7, #1]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d003      	beq.n	8003926 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800391e:	887a      	ldrh	r2, [r7, #2]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003924:	e003      	b.n	800392e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003926:	887b      	ldrh	r3, [r7, #2]
 8003928:	041a      	lsls	r2, r3, #16
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	619a      	str	r2, [r3, #24]
}
 800392e:	bf00      	nop
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
	...

0800393c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e12b      	b.n	8003ba6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d106      	bne.n	8003968 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f7fe fb28 	bl	8001fb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2224      	movs	r2, #36	; 0x24
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 0201 	bic.w	r2, r2, #1
 800397e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800398e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800399e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039a0:	f002 fd9e 	bl	80064e0 <HAL_RCC_GetPCLK1Freq>
 80039a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	4a81      	ldr	r2, [pc, #516]	; (8003bb0 <HAL_I2C_Init+0x274>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d807      	bhi.n	80039c0 <HAL_I2C_Init+0x84>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	4a80      	ldr	r2, [pc, #512]	; (8003bb4 <HAL_I2C_Init+0x278>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	bf94      	ite	ls
 80039b8:	2301      	movls	r3, #1
 80039ba:	2300      	movhi	r3, #0
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	e006      	b.n	80039ce <HAL_I2C_Init+0x92>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	4a7d      	ldr	r2, [pc, #500]	; (8003bb8 <HAL_I2C_Init+0x27c>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	bf94      	ite	ls
 80039c8:	2301      	movls	r3, #1
 80039ca:	2300      	movhi	r3, #0
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e0e7      	b.n	8003ba6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	4a78      	ldr	r2, [pc, #480]	; (8003bbc <HAL_I2C_Init+0x280>)
 80039da:	fba2 2303 	umull	r2, r3, r2, r3
 80039de:	0c9b      	lsrs	r3, r3, #18
 80039e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68ba      	ldr	r2, [r7, #8]
 80039f2:	430a      	orrs	r2, r1
 80039f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	4a6a      	ldr	r2, [pc, #424]	; (8003bb0 <HAL_I2C_Init+0x274>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d802      	bhi.n	8003a10 <HAL_I2C_Init+0xd4>
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	e009      	b.n	8003a24 <HAL_I2C_Init+0xe8>
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a16:	fb02 f303 	mul.w	r3, r2, r3
 8003a1a:	4a69      	ldr	r2, [pc, #420]	; (8003bc0 <HAL_I2C_Init+0x284>)
 8003a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a20:	099b      	lsrs	r3, r3, #6
 8003a22:	3301      	adds	r3, #1
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	6812      	ldr	r2, [r2, #0]
 8003a28:	430b      	orrs	r3, r1
 8003a2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	69db      	ldr	r3, [r3, #28]
 8003a32:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a36:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	495c      	ldr	r1, [pc, #368]	; (8003bb0 <HAL_I2C_Init+0x274>)
 8003a40:	428b      	cmp	r3, r1
 8003a42:	d819      	bhi.n	8003a78 <HAL_I2C_Init+0x13c>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	1e59      	subs	r1, r3, #1
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	005b      	lsls	r3, r3, #1
 8003a4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a52:	1c59      	adds	r1, r3, #1
 8003a54:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a58:	400b      	ands	r3, r1
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00a      	beq.n	8003a74 <HAL_I2C_Init+0x138>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	1e59      	subs	r1, r3, #1
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a72:	e051      	b.n	8003b18 <HAL_I2C_Init+0x1dc>
 8003a74:	2304      	movs	r3, #4
 8003a76:	e04f      	b.n	8003b18 <HAL_I2C_Init+0x1dc>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d111      	bne.n	8003aa4 <HAL_I2C_Init+0x168>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	1e58      	subs	r0, r3, #1
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6859      	ldr	r1, [r3, #4]
 8003a88:	460b      	mov	r3, r1
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	440b      	add	r3, r1
 8003a8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a92:	3301      	adds	r3, #1
 8003a94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	bf0c      	ite	eq
 8003a9c:	2301      	moveq	r3, #1
 8003a9e:	2300      	movne	r3, #0
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	e012      	b.n	8003aca <HAL_I2C_Init+0x18e>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	1e58      	subs	r0, r3, #1
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6859      	ldr	r1, [r3, #4]
 8003aac:	460b      	mov	r3, r1
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	440b      	add	r3, r1
 8003ab2:	0099      	lsls	r1, r3, #2
 8003ab4:	440b      	add	r3, r1
 8003ab6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aba:	3301      	adds	r3, #1
 8003abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	bf0c      	ite	eq
 8003ac4:	2301      	moveq	r3, #1
 8003ac6:	2300      	movne	r3, #0
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d001      	beq.n	8003ad2 <HAL_I2C_Init+0x196>
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e022      	b.n	8003b18 <HAL_I2C_Init+0x1dc>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10e      	bne.n	8003af8 <HAL_I2C_Init+0x1bc>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	1e58      	subs	r0, r3, #1
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6859      	ldr	r1, [r3, #4]
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	005b      	lsls	r3, r3, #1
 8003ae6:	440b      	add	r3, r1
 8003ae8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aec:	3301      	adds	r3, #1
 8003aee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003af2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003af6:	e00f      	b.n	8003b18 <HAL_I2C_Init+0x1dc>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	1e58      	subs	r0, r3, #1
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6859      	ldr	r1, [r3, #4]
 8003b00:	460b      	mov	r3, r1
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	440b      	add	r3, r1
 8003b06:	0099      	lsls	r1, r3, #2
 8003b08:	440b      	add	r3, r1
 8003b0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b0e:	3301      	adds	r3, #1
 8003b10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b18:	6879      	ldr	r1, [r7, #4]
 8003b1a:	6809      	ldr	r1, [r1, #0]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	69da      	ldr	r2, [r3, #28]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	431a      	orrs	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	6911      	ldr	r1, [r2, #16]
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	68d2      	ldr	r2, [r2, #12]
 8003b52:	4311      	orrs	r1, r2
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	6812      	ldr	r2, [r2, #0]
 8003b58:	430b      	orrs	r3, r1
 8003b5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	695a      	ldr	r2, [r3, #20]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	430a      	orrs	r2, r1
 8003b76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f042 0201 	orr.w	r2, r2, #1
 8003b86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2220      	movs	r2, #32
 8003b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	000186a0 	.word	0x000186a0
 8003bb4:	001e847f 	.word	0x001e847f
 8003bb8:	003d08ff 	.word	0x003d08ff
 8003bbc:	431bde83 	.word	0x431bde83
 8003bc0:	10624dd3 	.word	0x10624dd3

08003bc4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b088      	sub	sp, #32
 8003bc8:	af02      	add	r7, sp, #8
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	607a      	str	r2, [r7, #4]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	817b      	strh	r3, [r7, #10]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bd8:	f7fe fc5c 	bl	8002494 <HAL_GetTick>
 8003bdc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b20      	cmp	r3, #32
 8003be8:	f040 80e0 	bne.w	8003dac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	9300      	str	r3, [sp, #0]
 8003bf0:	2319      	movs	r3, #25
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	4970      	ldr	r1, [pc, #448]	; (8003db8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f001 fe6e 	bl	80058d8 <I2C_WaitOnFlagUntilTimeout>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003c02:	2302      	movs	r3, #2
 8003c04:	e0d3      	b.n	8003dae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d101      	bne.n	8003c14 <HAL_I2C_Master_Transmit+0x50>
 8003c10:	2302      	movs	r3, #2
 8003c12:	e0cc      	b.n	8003dae <HAL_I2C_Master_Transmit+0x1ea>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d007      	beq.n	8003c3a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f042 0201 	orr.w	r2, r2, #1
 8003c38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c48:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2221      	movs	r2, #33	; 0x21
 8003c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2210      	movs	r2, #16
 8003c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	893a      	ldrh	r2, [r7, #8]
 8003c6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	4a50      	ldr	r2, [pc, #320]	; (8003dbc <HAL_I2C_Master_Transmit+0x1f8>)
 8003c7a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c7c:	8979      	ldrh	r1, [r7, #10]
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	6a3a      	ldr	r2, [r7, #32]
 8003c82:	68f8      	ldr	r0, [r7, #12]
 8003c84:	f001 fcfe 	bl	8005684 <I2C_MasterRequestWrite>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e08d      	b.n	8003dae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c92:	2300      	movs	r3, #0
 8003c94:	613b      	str	r3, [r7, #16]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	695b      	ldr	r3, [r3, #20]
 8003c9c:	613b      	str	r3, [r7, #16]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	613b      	str	r3, [r7, #16]
 8003ca6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003ca8:	e066      	b.n	8003d78 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	6a39      	ldr	r1, [r7, #32]
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f001 fee8 	bl	8005a84 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00d      	beq.n	8003cd6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbe:	2b04      	cmp	r3, #4
 8003cc0:	d107      	bne.n	8003cd2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cd0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e06b      	b.n	8003dae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cda:	781a      	ldrb	r2, [r3, #0]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce6:	1c5a      	adds	r2, r3, #1
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	695b      	ldr	r3, [r3, #20]
 8003d0c:	f003 0304 	and.w	r3, r3, #4
 8003d10:	2b04      	cmp	r3, #4
 8003d12:	d11b      	bne.n	8003d4c <HAL_I2C_Master_Transmit+0x188>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d017      	beq.n	8003d4c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d20:	781a      	ldrb	r2, [r3, #0]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2c:	1c5a      	adds	r2, r3, #1
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	b29a      	uxth	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d44:	3b01      	subs	r3, #1
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	6a39      	ldr	r1, [r7, #32]
 8003d50:	68f8      	ldr	r0, [r7, #12]
 8003d52:	f001 fed8 	bl	8005b06 <I2C_WaitOnBTFFlagUntilTimeout>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00d      	beq.n	8003d78 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d60:	2b04      	cmp	r3, #4
 8003d62:	d107      	bne.n	8003d74 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d72:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e01a      	b.n	8003dae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d194      	bne.n	8003caa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2220      	movs	r2, #32
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003da8:	2300      	movs	r3, #0
 8003daa:	e000      	b.n	8003dae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003dac:	2302      	movs	r3, #2
  }
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3718      	adds	r7, #24
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	00100002 	.word	0x00100002
 8003dbc:	ffff0000 	.word	0xffff0000

08003dc0 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b087      	sub	sp, #28
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	607a      	str	r2, [r7, #4]
 8003dca:	461a      	mov	r2, r3
 8003dcc:	460b      	mov	r3, r1
 8003dce:	817b      	strh	r3, [r7, #10]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b20      	cmp	r3, #32
 8003de2:	f040 808d 	bne.w	8003f00 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003de6:	4b4a      	ldr	r3, [pc, #296]	; (8003f10 <HAL_I2C_Master_Receive_IT+0x150>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	08db      	lsrs	r3, r3, #3
 8003dec:	4a49      	ldr	r2, [pc, #292]	; (8003f14 <HAL_I2C_Master_Receive_IT+0x154>)
 8003dee:	fba2 2303 	umull	r2, r3, r2, r3
 8003df2:	0a1a      	lsrs	r2, r3, #8
 8003df4:	4613      	mov	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4413      	add	r3, r2
 8003dfa:	009a      	lsls	r2, r3, #2
 8003dfc:	4413      	add	r3, r2
 8003dfe:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	3b01      	subs	r3, #1
 8003e04:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d116      	bne.n	8003e3a <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2220      	movs	r2, #32
 8003e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	f043 0220 	orr.w	r2, r3, #32
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e063      	b.n	8003f02 <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d0db      	beq.n	8003e00 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d101      	bne.n	8003e56 <HAL_I2C_Master_Receive_IT+0x96>
 8003e52:	2302      	movs	r3, #2
 8003e54:	e055      	b.n	8003f02 <HAL_I2C_Master_Receive_IT+0x142>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d007      	beq.n	8003e7c <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f042 0201 	orr.w	r2, r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e8a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2222      	movs	r2, #34	; 0x22
 8003e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2210      	movs	r2, #16
 8003e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	893a      	ldrh	r2, [r7, #8]
 8003eac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4a17      	ldr	r2, [pc, #92]	; (8003f18 <HAL_I2C_Master_Receive_IT+0x158>)
 8003ebc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003ebe:	897a      	ldrh	r2, [r7, #10]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	685a      	ldr	r2, [r3, #4]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003eda:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003eea:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003efa:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003efc:	2300      	movs	r3, #0
 8003efe:	e000      	b.n	8003f02 <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8003f00:	2302      	movs	r3, #2
  }
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	371c      	adds	r7, #28
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	20000004 	.word	0x20000004
 8003f14:	14f8b589 	.word	0x14f8b589
 8003f18:	ffff0000 	.word	0xffff0000

08003f1c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b088      	sub	sp, #32
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003f24:	2300      	movs	r3, #0
 8003f26:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f34:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f3c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f44:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003f46:	7bfb      	ldrb	r3, [r7, #15]
 8003f48:	2b10      	cmp	r3, #16
 8003f4a:	d003      	beq.n	8003f54 <HAL_I2C_EV_IRQHandler+0x38>
 8003f4c:	7bfb      	ldrb	r3, [r7, #15]
 8003f4e:	2b40      	cmp	r3, #64	; 0x40
 8003f50:	f040 80b1 	bne.w	80040b6 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10d      	bne.n	8003f8a <HAL_I2C_EV_IRQHandler+0x6e>
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003f74:	d003      	beq.n	8003f7e <HAL_I2C_EV_IRQHandler+0x62>
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003f7c:	d101      	bne.n	8003f82 <HAL_I2C_EV_IRQHandler+0x66>
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e000      	b.n	8003f84 <HAL_I2C_EV_IRQHandler+0x68>
 8003f82:	2300      	movs	r3, #0
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	f000 8114 	beq.w	80041b2 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00b      	beq.n	8003fac <HAL_I2C_EV_IRQHandler+0x90>
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d006      	beq.n	8003fac <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f001 fe53 	bl	8005c4a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 fd54 	bl	8004a52 <I2C_Master_SB>
 8003faa:	e083      	b.n	80040b4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	f003 0308 	and.w	r3, r3, #8
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d008      	beq.n	8003fc8 <HAL_I2C_EV_IRQHandler+0xac>
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d003      	beq.n	8003fc8 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 fdcc 	bl	8004b5e <I2C_Master_ADD10>
 8003fc6:	e075      	b.n	80040b4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d008      	beq.n	8003fe4 <HAL_I2C_EV_IRQHandler+0xc8>
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d003      	beq.n	8003fe4 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 fde8 	bl	8004bb2 <I2C_Master_ADDR>
 8003fe2:	e067      	b.n	80040b4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	f003 0304 	and.w	r3, r3, #4
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d036      	beq.n	800405c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ff8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ffc:	f000 80db 	beq.w	80041b6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00d      	beq.n	8004026 <HAL_I2C_EV_IRQHandler+0x10a>
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004010:	2b00      	cmp	r3, #0
 8004012:	d008      	beq.n	8004026 <HAL_I2C_EV_IRQHandler+0x10a>
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	f003 0304 	and.w	r3, r3, #4
 800401a:	2b00      	cmp	r3, #0
 800401c:	d103      	bne.n	8004026 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f9cc 	bl	80043bc <I2C_MasterTransmit_TXE>
 8004024:	e046      	b.n	80040b4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	f003 0304 	and.w	r3, r3, #4
 800402c:	2b00      	cmp	r3, #0
 800402e:	f000 80c2 	beq.w	80041b6 <HAL_I2C_EV_IRQHandler+0x29a>
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004038:	2b00      	cmp	r3, #0
 800403a:	f000 80bc 	beq.w	80041b6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800403e:	7bbb      	ldrb	r3, [r7, #14]
 8004040:	2b21      	cmp	r3, #33	; 0x21
 8004042:	d103      	bne.n	800404c <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 fa55 	bl	80044f4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800404a:	e0b4      	b.n	80041b6 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800404c:	7bfb      	ldrb	r3, [r7, #15]
 800404e:	2b40      	cmp	r3, #64	; 0x40
 8004050:	f040 80b1 	bne.w	80041b6 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 fac3 	bl	80045e0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800405a:	e0ac      	b.n	80041b6 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004066:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800406a:	f000 80a4 	beq.w	80041b6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00d      	beq.n	8004094 <HAL_I2C_EV_IRQHandler+0x178>
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800407e:	2b00      	cmp	r3, #0
 8004080:	d008      	beq.n	8004094 <HAL_I2C_EV_IRQHandler+0x178>
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	f003 0304 	and.w	r3, r3, #4
 8004088:	2b00      	cmp	r3, #0
 800408a:	d103      	bne.n	8004094 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 fb3b 	bl	8004708 <I2C_MasterReceive_RXNE>
 8004092:	e00f      	b.n	80040b4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	f003 0304 	and.w	r3, r3, #4
 800409a:	2b00      	cmp	r3, #0
 800409c:	f000 808b 	beq.w	80041b6 <HAL_I2C_EV_IRQHandler+0x29a>
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 8085 	beq.w	80041b6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 fbe6 	bl	800487e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040b2:	e080      	b.n	80041b6 <HAL_I2C_EV_IRQHandler+0x29a>
 80040b4:	e07f      	b.n	80041b6 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d004      	beq.n	80040c8 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	61fb      	str	r3, [r7, #28]
 80040c6:	e007      	b.n	80040d8 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d011      	beq.n	8004106 <HAL_I2C_EV_IRQHandler+0x1ea>
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00c      	beq.n	8004106 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d003      	beq.n	80040fc <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80040fc:	69b9      	ldr	r1, [r7, #24]
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 ffa6 	bl	8005050 <I2C_Slave_ADDR>
 8004104:	e05a      	b.n	80041bc <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	f003 0310 	and.w	r3, r3, #16
 800410c:	2b00      	cmp	r3, #0
 800410e:	d008      	beq.n	8004122 <HAL_I2C_EV_IRQHandler+0x206>
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004116:	2b00      	cmp	r3, #0
 8004118:	d003      	beq.n	8004122 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 ffe0 	bl	80050e0 <I2C_Slave_STOPF>
 8004120:	e04c      	b.n	80041bc <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004122:	7bbb      	ldrb	r3, [r7, #14]
 8004124:	2b21      	cmp	r3, #33	; 0x21
 8004126:	d002      	beq.n	800412e <HAL_I2C_EV_IRQHandler+0x212>
 8004128:	7bbb      	ldrb	r3, [r7, #14]
 800412a:	2b29      	cmp	r3, #41	; 0x29
 800412c:	d120      	bne.n	8004170 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00d      	beq.n	8004154 <HAL_I2C_EV_IRQHandler+0x238>
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800413e:	2b00      	cmp	r3, #0
 8004140:	d008      	beq.n	8004154 <HAL_I2C_EV_IRQHandler+0x238>
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	f003 0304 	and.w	r3, r3, #4
 8004148:	2b00      	cmp	r3, #0
 800414a:	d103      	bne.n	8004154 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 fec1 	bl	8004ed4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004152:	e032      	b.n	80041ba <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	f003 0304 	and.w	r3, r3, #4
 800415a:	2b00      	cmp	r3, #0
 800415c:	d02d      	beq.n	80041ba <HAL_I2C_EV_IRQHandler+0x29e>
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004164:	2b00      	cmp	r3, #0
 8004166:	d028      	beq.n	80041ba <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 fef0 	bl	8004f4e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800416e:	e024      	b.n	80041ba <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00d      	beq.n	8004196 <HAL_I2C_EV_IRQHandler+0x27a>
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004180:	2b00      	cmp	r3, #0
 8004182:	d008      	beq.n	8004196 <HAL_I2C_EV_IRQHandler+0x27a>
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	f003 0304 	and.w	r3, r3, #4
 800418a:	2b00      	cmp	r3, #0
 800418c:	d103      	bne.n	8004196 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 fefe 	bl	8004f90 <I2C_SlaveReceive_RXNE>
 8004194:	e012      	b.n	80041bc <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	f003 0304 	and.w	r3, r3, #4
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00d      	beq.n	80041bc <HAL_I2C_EV_IRQHandler+0x2a0>
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d008      	beq.n	80041bc <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 ff2e 	bl	800500c <I2C_SlaveReceive_BTF>
 80041b0:	e004      	b.n	80041bc <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80041b2:	bf00      	nop
 80041b4:	e002      	b.n	80041bc <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041b6:	bf00      	nop
 80041b8:	e000      	b.n	80041bc <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80041ba:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80041bc:	3720      	adds	r7, #32
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b08a      	sub	sp, #40	; 0x28
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80041da:	2300      	movs	r3, #0
 80041dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041e4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80041e6:	6a3b      	ldr	r3, [r7, #32]
 80041e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00d      	beq.n	800420c <HAL_I2C_ER_IRQHandler+0x4a>
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d008      	beq.n	800420c <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80041fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fc:	f043 0301 	orr.w	r3, r3, #1
 8004200:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800420a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800420c:	6a3b      	ldr	r3, [r7, #32]
 800420e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00d      	beq.n	8004232 <HAL_I2C_ER_IRQHandler+0x70>
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800421c:	2b00      	cmp	r3, #0
 800421e:	d008      	beq.n	8004232 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004222:	f043 0302 	orr.w	r3, r3, #2
 8004226:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004230:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004232:	6a3b      	ldr	r3, [r7, #32]
 8004234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004238:	2b00      	cmp	r3, #0
 800423a:	d03e      	beq.n	80042ba <HAL_I2C_ER_IRQHandler+0xf8>
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004242:	2b00      	cmp	r3, #0
 8004244:	d039      	beq.n	80042ba <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8004246:	7efb      	ldrb	r3, [r7, #27]
 8004248:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800424e:	b29b      	uxth	r3, r3
 8004250:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004258:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004260:	7ebb      	ldrb	r3, [r7, #26]
 8004262:	2b20      	cmp	r3, #32
 8004264:	d112      	bne.n	800428c <HAL_I2C_ER_IRQHandler+0xca>
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d10f      	bne.n	800428c <HAL_I2C_ER_IRQHandler+0xca>
 800426c:	7cfb      	ldrb	r3, [r7, #19]
 800426e:	2b21      	cmp	r3, #33	; 0x21
 8004270:	d008      	beq.n	8004284 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004272:	7cfb      	ldrb	r3, [r7, #19]
 8004274:	2b29      	cmp	r3, #41	; 0x29
 8004276:	d005      	beq.n	8004284 <HAL_I2C_ER_IRQHandler+0xc2>
 8004278:	7cfb      	ldrb	r3, [r7, #19]
 800427a:	2b28      	cmp	r3, #40	; 0x28
 800427c:	d106      	bne.n	800428c <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2b21      	cmp	r3, #33	; 0x21
 8004282:	d103      	bne.n	800428c <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f001 f85b 	bl	8005340 <I2C_Slave_AF>
 800428a:	e016      	b.n	80042ba <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004294:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004298:	f043 0304 	orr.w	r3, r3, #4
 800429c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800429e:	7efb      	ldrb	r3, [r7, #27]
 80042a0:	2b10      	cmp	r3, #16
 80042a2:	d002      	beq.n	80042aa <HAL_I2C_ER_IRQHandler+0xe8>
 80042a4:	7efb      	ldrb	r3, [r7, #27]
 80042a6:	2b40      	cmp	r3, #64	; 0x40
 80042a8:	d107      	bne.n	80042ba <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042b8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80042ba:	6a3b      	ldr	r3, [r7, #32]
 80042bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00d      	beq.n	80042e0 <HAL_I2C_ER_IRQHandler+0x11e>
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d008      	beq.n	80042e0 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80042ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d0:	f043 0308 	orr.w	r3, r3, #8
 80042d4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80042de:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80042e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d008      	beq.n	80042f8 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ec:	431a      	orrs	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f001 f894 	bl	8005420 <I2C_ITError>
  }
}
 80042f8:	bf00      	nop
 80042fa:	3728      	adds	r7, #40	; 0x28
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	460b      	mov	r3, r1
 8004346:	70fb      	strb	r3, [r7, #3]
 8004348:	4613      	mov	r3, r2
 800434a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ca:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043d2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d150      	bne.n	8004484 <I2C_MasterTransmit_TXE+0xc8>
 80043e2:	7bfb      	ldrb	r3, [r7, #15]
 80043e4:	2b21      	cmp	r3, #33	; 0x21
 80043e6:	d14d      	bne.n	8004484 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	2b08      	cmp	r3, #8
 80043ec:	d01d      	beq.n	800442a <I2C_MasterTransmit_TXE+0x6e>
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	2b20      	cmp	r3, #32
 80043f2:	d01a      	beq.n	800442a <I2C_MasterTransmit_TXE+0x6e>
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80043fa:	d016      	beq.n	800442a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800440a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2211      	movs	r2, #17
 8004410:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2220      	movs	r2, #32
 800441e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f7ff ff6c 	bl	8004300 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004428:	e060      	b.n	80044ec <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	685a      	ldr	r2, [r3, #4]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004438:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004448:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2220      	movs	r2, #32
 8004454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800445e:	b2db      	uxtb	r3, r3
 8004460:	2b40      	cmp	r3, #64	; 0x40
 8004462:	d107      	bne.n	8004474 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f7ff ff7d 	bl	800436c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004472:	e03b      	b.n	80044ec <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f7ff ff3f 	bl	8004300 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004482:	e033      	b.n	80044ec <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004484:	7bfb      	ldrb	r3, [r7, #15]
 8004486:	2b21      	cmp	r3, #33	; 0x21
 8004488:	d005      	beq.n	8004496 <I2C_MasterTransmit_TXE+0xda>
 800448a:	7bbb      	ldrb	r3, [r7, #14]
 800448c:	2b40      	cmp	r3, #64	; 0x40
 800448e:	d12d      	bne.n	80044ec <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004490:	7bfb      	ldrb	r3, [r7, #15]
 8004492:	2b22      	cmp	r3, #34	; 0x22
 8004494:	d12a      	bne.n	80044ec <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800449a:	b29b      	uxth	r3, r3
 800449c:	2b00      	cmp	r3, #0
 800449e:	d108      	bne.n	80044b2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685a      	ldr	r2, [r3, #4]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044ae:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80044b0:	e01c      	b.n	80044ec <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b40      	cmp	r3, #64	; 0x40
 80044bc:	d103      	bne.n	80044c6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 f88e 	bl	80045e0 <I2C_MemoryTransmit_TXE_BTF>
}
 80044c4:	e012      	b.n	80044ec <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ca:	781a      	ldrb	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d6:	1c5a      	adds	r2, r3, #1
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	3b01      	subs	r3, #1
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80044ea:	e7ff      	b.n	80044ec <I2C_MasterTransmit_TXE+0x130>
 80044ec:	bf00      	nop
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004500:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b21      	cmp	r3, #33	; 0x21
 800450c:	d164      	bne.n	80045d8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004512:	b29b      	uxth	r3, r3
 8004514:	2b00      	cmp	r3, #0
 8004516:	d012      	beq.n	800453e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451c:	781a      	ldrb	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004528:	1c5a      	adds	r2, r3, #1
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004532:	b29b      	uxth	r3, r3
 8004534:	3b01      	subs	r3, #1
 8004536:	b29a      	uxth	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800453c:	e04c      	b.n	80045d8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2b08      	cmp	r3, #8
 8004542:	d01d      	beq.n	8004580 <I2C_MasterTransmit_BTF+0x8c>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2b20      	cmp	r3, #32
 8004548:	d01a      	beq.n	8004580 <I2C_MasterTransmit_BTF+0x8c>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004550:	d016      	beq.n	8004580 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	685a      	ldr	r2, [r3, #4]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004560:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2211      	movs	r2, #17
 8004566:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2220      	movs	r2, #32
 8004574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f7ff fec1 	bl	8004300 <HAL_I2C_MasterTxCpltCallback>
}
 800457e:	e02b      	b.n	80045d8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	685a      	ldr	r2, [r3, #4]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800458e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800459e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2220      	movs	r2, #32
 80045aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b40      	cmp	r3, #64	; 0x40
 80045b8:	d107      	bne.n	80045ca <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f7ff fed2 	bl	800436c <HAL_I2C_MemTxCpltCallback>
}
 80045c8:	e006      	b.n	80045d8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f7ff fe94 	bl	8004300 <HAL_I2C_MasterTxCpltCallback>
}
 80045d8:	bf00      	nop
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ee:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d11d      	bne.n	8004634 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d10b      	bne.n	8004618 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004604:	b2da      	uxtb	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004610:	1c9a      	adds	r2, r3, #2
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004616:	e073      	b.n	8004700 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800461c:	b29b      	uxth	r3, r3
 800461e:	121b      	asrs	r3, r3, #8
 8004620:	b2da      	uxtb	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800462c:	1c5a      	adds	r2, r3, #1
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004632:	e065      	b.n	8004700 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004638:	2b01      	cmp	r3, #1
 800463a:	d10b      	bne.n	8004654 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004640:	b2da      	uxtb	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800464c:	1c5a      	adds	r2, r3, #1
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004652:	e055      	b.n	8004700 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004658:	2b02      	cmp	r3, #2
 800465a:	d151      	bne.n	8004700 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800465c:	7bfb      	ldrb	r3, [r7, #15]
 800465e:	2b22      	cmp	r3, #34	; 0x22
 8004660:	d10d      	bne.n	800467e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004670:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004676:	1c5a      	adds	r2, r3, #1
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800467c:	e040      	b.n	8004700 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004682:	b29b      	uxth	r3, r3
 8004684:	2b00      	cmp	r3, #0
 8004686:	d015      	beq.n	80046b4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004688:	7bfb      	ldrb	r3, [r7, #15]
 800468a:	2b21      	cmp	r3, #33	; 0x21
 800468c:	d112      	bne.n	80046b4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004692:	781a      	ldrb	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469e:	1c5a      	adds	r2, r3, #1
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	3b01      	subs	r3, #1
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80046b2:	e025      	b.n	8004700 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d120      	bne.n	8004700 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80046be:	7bfb      	ldrb	r3, [r7, #15]
 80046c0:	2b21      	cmp	r3, #33	; 0x21
 80046c2:	d11d      	bne.n	8004700 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	685a      	ldr	r2, [r3, #4]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046d2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046e2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2220      	movs	r2, #32
 80046ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f7ff fe36 	bl	800436c <HAL_I2C_MemTxCpltCallback>
}
 8004700:	bf00      	nop
 8004702:	3710      	adds	r7, #16
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b22      	cmp	r3, #34	; 0x22
 800471a:	f040 80ac 	bne.w	8004876 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004722:	b29b      	uxth	r3, r3
 8004724:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2b03      	cmp	r3, #3
 800472a:	d921      	bls.n	8004770 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	691a      	ldr	r2, [r3, #16]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004736:	b2d2      	uxtb	r2, r2
 8004738:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473e:	1c5a      	adds	r2, r3, #1
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004748:	b29b      	uxth	r3, r3
 800474a:	3b01      	subs	r3, #1
 800474c:	b29a      	uxth	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004756:	b29b      	uxth	r3, r3
 8004758:	2b03      	cmp	r3, #3
 800475a:	f040 808c 	bne.w	8004876 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	685a      	ldr	r2, [r3, #4]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800476c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800476e:	e082      	b.n	8004876 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004774:	2b02      	cmp	r3, #2
 8004776:	d075      	beq.n	8004864 <I2C_MasterReceive_RXNE+0x15c>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d002      	beq.n	8004784 <I2C_MasterReceive_RXNE+0x7c>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d16f      	bne.n	8004864 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f001 f9ff 	bl	8005b88 <I2C_WaitOnSTOPRequestThroughIT>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d142      	bne.n	8004816 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800479e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047ae:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	691a      	ldr	r2, [r3, #16]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ba:	b2d2      	uxtb	r2, r2
 80047bc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c2:	1c5a      	adds	r2, r3, #1
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	3b01      	subs	r3, #1
 80047d0:	b29a      	uxth	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2220      	movs	r2, #32
 80047da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b40      	cmp	r3, #64	; 0x40
 80047e8:	d10a      	bne.n	8004800 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f7ff fdc1 	bl	8004380 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80047fe:	e03a      	b.n	8004876 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2212      	movs	r2, #18
 800480c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f7fc fede 	bl	80015d0 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004814:	e02f      	b.n	8004876 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	685a      	ldr	r2, [r3, #4]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004824:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	691a      	ldr	r2, [r3, #16]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004830:	b2d2      	uxtb	r2, r2
 8004832:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004838:	1c5a      	adds	r2, r3, #1
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004842:	b29b      	uxth	r3, r3
 8004844:	3b01      	subs	r3, #1
 8004846:	b29a      	uxth	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2220      	movs	r2, #32
 8004850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f7ff fd99 	bl	8004394 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004862:	e008      	b.n	8004876 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	685a      	ldr	r2, [r3, #4]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004872:	605a      	str	r2, [r3, #4]
}
 8004874:	e7ff      	b.n	8004876 <I2C_MasterReceive_RXNE+0x16e>
 8004876:	bf00      	nop
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	b084      	sub	sp, #16
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004890:	b29b      	uxth	r3, r3
 8004892:	2b04      	cmp	r3, #4
 8004894:	d11b      	bne.n	80048ce <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	685a      	ldr	r2, [r3, #4]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048a4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	691a      	ldr	r2, [r3, #16]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b0:	b2d2      	uxtb	r2, r2
 80048b2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b8:	1c5a      	adds	r2, r3, #1
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	3b01      	subs	r3, #1
 80048c6:	b29a      	uxth	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80048cc:	e0bd      	b.n	8004a4a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	2b03      	cmp	r3, #3
 80048d6:	d129      	bne.n	800492c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	685a      	ldr	r2, [r3, #4]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048e6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2b04      	cmp	r3, #4
 80048ec:	d00a      	beq.n	8004904 <I2C_MasterReceive_BTF+0x86>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d007      	beq.n	8004904 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004902:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	691a      	ldr	r2, [r3, #16]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490e:	b2d2      	uxtb	r2, r2
 8004910:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004916:	1c5a      	adds	r2, r3, #1
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004920:	b29b      	uxth	r3, r3
 8004922:	3b01      	subs	r3, #1
 8004924:	b29a      	uxth	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800492a:	e08e      	b.n	8004a4a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004930:	b29b      	uxth	r3, r3
 8004932:	2b02      	cmp	r3, #2
 8004934:	d176      	bne.n	8004a24 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d002      	beq.n	8004942 <I2C_MasterReceive_BTF+0xc4>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2b10      	cmp	r3, #16
 8004940:	d108      	bne.n	8004954 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004950:	601a      	str	r2, [r3, #0]
 8004952:	e019      	b.n	8004988 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2b04      	cmp	r3, #4
 8004958:	d002      	beq.n	8004960 <I2C_MasterReceive_BTF+0xe2>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2b02      	cmp	r3, #2
 800495e:	d108      	bne.n	8004972 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800496e:	601a      	str	r2, [r3, #0]
 8004970:	e00a      	b.n	8004988 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2b10      	cmp	r3, #16
 8004976:	d007      	beq.n	8004988 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004986:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	691a      	ldr	r2, [r3, #16]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004992:	b2d2      	uxtb	r2, r2
 8004994:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499a:	1c5a      	adds	r2, r3, #1
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	3b01      	subs	r3, #1
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	691a      	ldr	r2, [r3, #16]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b8:	b2d2      	uxtb	r2, r2
 80049ba:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c0:	1c5a      	adds	r2, r3, #1
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	3b01      	subs	r3, #1
 80049ce:	b29a      	uxth	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	685a      	ldr	r2, [r3, #4]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80049e2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2220      	movs	r2, #32
 80049e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	2b40      	cmp	r3, #64	; 0x40
 80049f6:	d10a      	bne.n	8004a0e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f7ff fcba 	bl	8004380 <HAL_I2C_MemRxCpltCallback>
}
 8004a0c:	e01d      	b.n	8004a4a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2212      	movs	r2, #18
 8004a1a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f7fc fdd7 	bl	80015d0 <HAL_I2C_MasterRxCpltCallback>
}
 8004a22:	e012      	b.n	8004a4a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	691a      	ldr	r2, [r3, #16]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2e:	b2d2      	uxtb	r2, r2
 8004a30:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a36:	1c5a      	adds	r2, r3, #1
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	3b01      	subs	r3, #1
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004a4a:	bf00      	nop
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b083      	sub	sp, #12
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b40      	cmp	r3, #64	; 0x40
 8004a64:	d117      	bne.n	8004a96 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d109      	bne.n	8004a82 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	461a      	mov	r2, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a7e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004a80:	e067      	b.n	8004b52 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	f043 0301 	orr.w	r3, r3, #1
 8004a8c:	b2da      	uxtb	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	611a      	str	r2, [r3, #16]
}
 8004a94:	e05d      	b.n	8004b52 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a9e:	d133      	bne.n	8004b08 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	2b21      	cmp	r3, #33	; 0x21
 8004aaa:	d109      	bne.n	8004ac0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004abc:	611a      	str	r2, [r3, #16]
 8004abe:	e008      	b.n	8004ad2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	f043 0301 	orr.w	r3, r3, #1
 8004aca:	b2da      	uxtb	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d004      	beq.n	8004ae4 <I2C_Master_SB+0x92>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d108      	bne.n	8004af6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d032      	beq.n	8004b52 <I2C_Master_SB+0x100>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d02d      	beq.n	8004b52 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b04:	605a      	str	r2, [r3, #4]
}
 8004b06:	e024      	b.n	8004b52 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d10e      	bne.n	8004b2e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	11db      	asrs	r3, r3, #7
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	f003 0306 	and.w	r3, r3, #6
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	f063 030f 	orn	r3, r3, #15
 8004b24:	b2da      	uxtb	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	611a      	str	r2, [r3, #16]
}
 8004b2c:	e011      	b.n	8004b52 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d10d      	bne.n	8004b52 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	11db      	asrs	r3, r3, #7
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	f003 0306 	and.w	r3, r3, #6
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	f063 030e 	orn	r3, r3, #14
 8004b4a:	b2da      	uxtb	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	611a      	str	r2, [r3, #16]
}
 8004b52:	bf00      	nop
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b083      	sub	sp, #12
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b6a:	b2da      	uxtb	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d004      	beq.n	8004b84 <I2C_Master_ADD10+0x26>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d108      	bne.n	8004b96 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00c      	beq.n	8004ba6 <I2C_Master_ADD10+0x48>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d007      	beq.n	8004ba6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	685a      	ldr	r2, [r3, #4]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ba4:	605a      	str	r2, [r3, #4]
  }
}
 8004ba6:	bf00      	nop
 8004ba8:	370c      	adds	r7, #12
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr

08004bb2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	b091      	sub	sp, #68	; 0x44
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bc0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bce:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	2b22      	cmp	r3, #34	; 0x22
 8004bda:	f040 8169 	bne.w	8004eb0 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d10f      	bne.n	8004c06 <I2C_Master_ADDR+0x54>
 8004be6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004bea:	2b40      	cmp	r3, #64	; 0x40
 8004bec:	d10b      	bne.n	8004c06 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bee:	2300      	movs	r3, #0
 8004bf0:	633b      	str	r3, [r7, #48]	; 0x30
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	695b      	ldr	r3, [r3, #20]
 8004bf8:	633b      	str	r3, [r7, #48]	; 0x30
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	633b      	str	r3, [r7, #48]	; 0x30
 8004c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c04:	e160      	b.n	8004ec8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d11d      	bne.n	8004c4a <I2C_Master_ADDR+0x98>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004c16:	d118      	bne.n	8004c4a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c18:	2300      	movs	r3, #0
 8004c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c3c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c42:	1c5a      	adds	r2, r3, #1
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	651a      	str	r2, [r3, #80]	; 0x50
 8004c48:	e13e      	b.n	8004ec8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d113      	bne.n	8004c7c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c54:	2300      	movs	r3, #0
 8004c56:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c68:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c78:	601a      	str	r2, [r3, #0]
 8004c7a:	e115      	b.n	8004ea8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	f040 808a 	bne.w	8004d9c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c8a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c8e:	d137      	bne.n	8004d00 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c9e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004caa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cae:	d113      	bne.n	8004cd8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cbe:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	627b      	str	r3, [r7, #36]	; 0x24
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	627b      	str	r3, [r7, #36]	; 0x24
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd6:	e0e7      	b.n	8004ea8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cd8:	2300      	movs	r3, #0
 8004cda:	623b      	str	r3, [r7, #32]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	623b      	str	r3, [r7, #32]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	623b      	str	r3, [r7, #32]
 8004cec:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cfc:	601a      	str	r2, [r3, #0]
 8004cfe:	e0d3      	b.n	8004ea8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d02:	2b08      	cmp	r3, #8
 8004d04:	d02e      	beq.n	8004d64 <I2C_Master_ADDR+0x1b2>
 8004d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d08:	2b20      	cmp	r3, #32
 8004d0a:	d02b      	beq.n	8004d64 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d0e:	2b12      	cmp	r3, #18
 8004d10:	d102      	bne.n	8004d18 <I2C_Master_ADDR+0x166>
 8004d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d125      	bne.n	8004d64 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d1a:	2b04      	cmp	r3, #4
 8004d1c:	d00e      	beq.n	8004d3c <I2C_Master_ADDR+0x18a>
 8004d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d00b      	beq.n	8004d3c <I2C_Master_ADDR+0x18a>
 8004d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d26:	2b10      	cmp	r3, #16
 8004d28:	d008      	beq.n	8004d3c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d38:	601a      	str	r2, [r3, #0]
 8004d3a:	e007      	b.n	8004d4c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d4a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	61fb      	str	r3, [r7, #28]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	695b      	ldr	r3, [r3, #20]
 8004d56:	61fb      	str	r3, [r7, #28]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	699b      	ldr	r3, [r3, #24]
 8004d5e:	61fb      	str	r3, [r7, #28]
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	e0a1      	b.n	8004ea8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d72:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d74:	2300      	movs	r3, #0
 8004d76:	61bb      	str	r3, [r7, #24]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	61bb      	str	r3, [r7, #24]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	61bb      	str	r3, [r7, #24]
 8004d88:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d98:	601a      	str	r2, [r3, #0]
 8004d9a:	e085      	b.n	8004ea8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d14d      	bne.n	8004e42 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da8:	2b04      	cmp	r3, #4
 8004daa:	d016      	beq.n	8004dda <I2C_Master_ADDR+0x228>
 8004dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d013      	beq.n	8004dda <I2C_Master_ADDR+0x228>
 8004db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db4:	2b10      	cmp	r3, #16
 8004db6:	d010      	beq.n	8004dda <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dc6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dd6:	601a      	str	r2, [r3, #0]
 8004dd8:	e007      	b.n	8004dea <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004de8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004df4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004df8:	d117      	bne.n	8004e2a <I2C_Master_ADDR+0x278>
 8004dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dfc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e00:	d00b      	beq.n	8004e1a <I2C_Master_ADDR+0x268>
 8004e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d008      	beq.n	8004e1a <I2C_Master_ADDR+0x268>
 8004e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0a:	2b08      	cmp	r3, #8
 8004e0c:	d005      	beq.n	8004e1a <I2C_Master_ADDR+0x268>
 8004e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e10:	2b10      	cmp	r3, #16
 8004e12:	d002      	beq.n	8004e1a <I2C_Master_ADDR+0x268>
 8004e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e16:	2b20      	cmp	r3, #32
 8004e18:	d107      	bne.n	8004e2a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	685a      	ldr	r2, [r3, #4]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e28:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	617b      	str	r3, [r7, #20]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	695b      	ldr	r3, [r3, #20]
 8004e34:	617b      	str	r3, [r7, #20]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	699b      	ldr	r3, [r3, #24]
 8004e3c:	617b      	str	r3, [r7, #20]
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	e032      	b.n	8004ea8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e50:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e60:	d117      	bne.n	8004e92 <I2C_Master_ADDR+0x2e0>
 8004e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e68:	d00b      	beq.n	8004e82 <I2C_Master_ADDR+0x2d0>
 8004e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d008      	beq.n	8004e82 <I2C_Master_ADDR+0x2d0>
 8004e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e72:	2b08      	cmp	r3, #8
 8004e74:	d005      	beq.n	8004e82 <I2C_Master_ADDR+0x2d0>
 8004e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e78:	2b10      	cmp	r3, #16
 8004e7a:	d002      	beq.n	8004e82 <I2C_Master_ADDR+0x2d0>
 8004e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e7e:	2b20      	cmp	r3, #32
 8004e80:	d107      	bne.n	8004e92 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e90:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e92:	2300      	movs	r3, #0
 8004e94:	613b      	str	r3, [r7, #16]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	695b      	ldr	r3, [r3, #20]
 8004e9c:	613b      	str	r3, [r7, #16]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	613b      	str	r3, [r7, #16]
 8004ea6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004eae:	e00b      	b.n	8004ec8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	60fb      	str	r3, [r7, #12]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	60fb      	str	r3, [r7, #12]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	60fb      	str	r3, [r7, #12]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
}
 8004ec6:	e7ff      	b.n	8004ec8 <I2C_Master_ADDR+0x316>
 8004ec8:	bf00      	nop
 8004eca:	3744      	adds	r7, #68	; 0x44
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ee2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d02b      	beq.n	8004f46 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef2:	781a      	ldrb	r2, [r3, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efe:	1c5a      	adds	r2, r3, #1
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d114      	bne.n	8004f46 <I2C_SlaveTransmit_TXE+0x72>
 8004f1c:	7bfb      	ldrb	r3, [r7, #15]
 8004f1e:	2b29      	cmp	r3, #41	; 0x29
 8004f20:	d111      	bne.n	8004f46 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	685a      	ldr	r2, [r3, #4]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f30:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2221      	movs	r2, #33	; 0x21
 8004f36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2228      	movs	r2, #40	; 0x28
 8004f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f7ff f9e7 	bl	8004314 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004f46:	bf00      	nop
 8004f48:	3710      	adds	r7, #16
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b083      	sub	sp, #12
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d011      	beq.n	8004f84 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f64:	781a      	ldrb	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f70:	1c5a      	adds	r2, r3, #1
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004f84:	bf00      	nop
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f9e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d02c      	beq.n	8005004 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	691a      	ldr	r2, [r3, #16]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb4:	b2d2      	uxtb	r2, r2
 8004fb6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbc:	1c5a      	adds	r2, r3, #1
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	b29a      	uxth	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d114      	bne.n	8005004 <I2C_SlaveReceive_RXNE+0x74>
 8004fda:	7bfb      	ldrb	r3, [r7, #15]
 8004fdc:	2b2a      	cmp	r3, #42	; 0x2a
 8004fde:	d111      	bne.n	8005004 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	685a      	ldr	r2, [r3, #4]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fee:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2222      	movs	r2, #34	; 0x22
 8004ff4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2228      	movs	r2, #40	; 0x28
 8004ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f7ff f992 	bl	8004328 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005004:	bf00      	nop
 8005006:	3710      	adds	r7, #16
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005018:	b29b      	uxth	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d012      	beq.n	8005044 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	691a      	ldr	r2, [r3, #16]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005028:	b2d2      	uxtb	r2, r2
 800502a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005030:	1c5a      	adds	r2, r3, #1
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800503a:	b29b      	uxth	r3, r3
 800503c:	3b01      	subs	r3, #1
 800503e:	b29a      	uxth	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005044:	bf00      	nop
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800505a:	2300      	movs	r3, #0
 800505c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005064:	b2db      	uxtb	r3, r3
 8005066:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800506a:	2b28      	cmp	r3, #40	; 0x28
 800506c:	d125      	bne.n	80050ba <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	685a      	ldr	r2, [r3, #4]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800507c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	f003 0304 	and.w	r3, r3, #4
 8005084:	2b00      	cmp	r3, #0
 8005086:	d101      	bne.n	800508c <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005088:	2301      	movs	r3, #1
 800508a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005092:	2b00      	cmp	r3, #0
 8005094:	d103      	bne.n	800509e <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	81bb      	strh	r3, [r7, #12]
 800509c:	e002      	b.n	80050a4 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80050ac:	89ba      	ldrh	r2, [r7, #12]
 80050ae:	7bfb      	ldrb	r3, [r7, #15]
 80050b0:	4619      	mov	r1, r3
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f7ff f942 	bl	800433c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80050b8:	e00e      	b.n	80050d8 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050ba:	2300      	movs	r3, #0
 80050bc:	60bb      	str	r3, [r7, #8]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	695b      	ldr	r3, [r3, #20]
 80050c4:	60bb      	str	r3, [r7, #8]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	60bb      	str	r3, [r7, #8]
 80050ce:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80050d8:	bf00      	nop
 80050da:	3710      	adds	r7, #16
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050ee:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	685a      	ldr	r2, [r3, #4]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050fe:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005100:	2300      	movs	r3, #0
 8005102:	60bb      	str	r3, [r7, #8]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	60bb      	str	r3, [r7, #8]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f042 0201 	orr.w	r2, r2, #1
 800511a:	601a      	str	r2, [r3, #0]
 800511c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800512c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005138:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800513c:	d172      	bne.n	8005224 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800513e:	7bfb      	ldrb	r3, [r7, #15]
 8005140:	2b22      	cmp	r3, #34	; 0x22
 8005142:	d002      	beq.n	800514a <I2C_Slave_STOPF+0x6a>
 8005144:	7bfb      	ldrb	r3, [r7, #15]
 8005146:	2b2a      	cmp	r3, #42	; 0x2a
 8005148:	d135      	bne.n	80051b6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	b29a      	uxth	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800515c:	b29b      	uxth	r3, r3
 800515e:	2b00      	cmp	r3, #0
 8005160:	d005      	beq.n	800516e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005166:	f043 0204 	orr.w	r2, r3, #4
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	685a      	ldr	r2, [r3, #4]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800517c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005182:	4618      	mov	r0, r3
 8005184:	f7fe f94e 	bl	8003424 <HAL_DMA_GetState>
 8005188:	4603      	mov	r3, r0
 800518a:	2b01      	cmp	r3, #1
 800518c:	d049      	beq.n	8005222 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005192:	4a69      	ldr	r2, [pc, #420]	; (8005338 <I2C_Slave_STOPF+0x258>)
 8005194:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519a:	4618      	mov	r0, r3
 800519c:	f7fd ff96 	bl	80030cc <HAL_DMA_Abort_IT>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d03d      	beq.n	8005222 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80051b0:	4610      	mov	r0, r2
 80051b2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80051b4:	e035      	b.n	8005222 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	b29a      	uxth	r2, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d005      	beq.n	80051da <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d2:	f043 0204 	orr.w	r2, r3, #4
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	685a      	ldr	r2, [r3, #4]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051e8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7fe f918 	bl	8003424 <HAL_DMA_GetState>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d014      	beq.n	8005224 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051fe:	4a4e      	ldr	r2, [pc, #312]	; (8005338 <I2C_Slave_STOPF+0x258>)
 8005200:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005206:	4618      	mov	r0, r3
 8005208:	f7fd ff60 	bl	80030cc <HAL_DMA_Abort_IT>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d008      	beq.n	8005224 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800521c:	4610      	mov	r0, r2
 800521e:	4798      	blx	r3
 8005220:	e000      	b.n	8005224 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005222:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005228:	b29b      	uxth	r3, r3
 800522a:	2b00      	cmp	r3, #0
 800522c:	d03e      	beq.n	80052ac <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	f003 0304 	and.w	r3, r3, #4
 8005238:	2b04      	cmp	r3, #4
 800523a:	d112      	bne.n	8005262 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	691a      	ldr	r2, [r3, #16]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005246:	b2d2      	uxtb	r2, r2
 8005248:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524e:	1c5a      	adds	r2, r3, #1
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005258:	b29b      	uxth	r3, r3
 800525a:	3b01      	subs	r3, #1
 800525c:	b29a      	uxth	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	695b      	ldr	r3, [r3, #20]
 8005268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800526c:	2b40      	cmp	r3, #64	; 0x40
 800526e:	d112      	bne.n	8005296 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	691a      	ldr	r2, [r3, #16]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527a:	b2d2      	uxtb	r2, r2
 800527c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005282:	1c5a      	adds	r2, r3, #1
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800528c:	b29b      	uxth	r3, r3
 800528e:	3b01      	subs	r3, #1
 8005290:	b29a      	uxth	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800529a:	b29b      	uxth	r3, r3
 800529c:	2b00      	cmp	r3, #0
 800529e:	d005      	beq.n	80052ac <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a4:	f043 0204 	orr.w	r2, r3, #4
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d003      	beq.n	80052bc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 f8b3 	bl	8005420 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80052ba:	e039      	b.n	8005330 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80052bc:	7bfb      	ldrb	r3, [r7, #15]
 80052be:	2b2a      	cmp	r3, #42	; 0x2a
 80052c0:	d109      	bne.n	80052d6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2228      	movs	r2, #40	; 0x28
 80052cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f7ff f829 	bl	8004328 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b28      	cmp	r3, #40	; 0x28
 80052e0:	d111      	bne.n	8005306 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a15      	ldr	r2, [pc, #84]	; (800533c <I2C_Slave_STOPF+0x25c>)
 80052e6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2220      	movs	r2, #32
 80052f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f7ff f82a 	bl	8004358 <HAL_I2C_ListenCpltCallback>
}
 8005304:	e014      	b.n	8005330 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530a:	2b22      	cmp	r3, #34	; 0x22
 800530c:	d002      	beq.n	8005314 <I2C_Slave_STOPF+0x234>
 800530e:	7bfb      	ldrb	r3, [r7, #15]
 8005310:	2b22      	cmp	r3, #34	; 0x22
 8005312:	d10d      	bne.n	8005330 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2220      	movs	r2, #32
 800531e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f7fe fffc 	bl	8004328 <HAL_I2C_SlaveRxCpltCallback>
}
 8005330:	bf00      	nop
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	08005789 	.word	0x08005789
 800533c:	ffff0000 	.word	0xffff0000

08005340 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800534e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005354:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	2b08      	cmp	r3, #8
 800535a:	d002      	beq.n	8005362 <I2C_Slave_AF+0x22>
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	2b20      	cmp	r3, #32
 8005360:	d129      	bne.n	80053b6 <I2C_Slave_AF+0x76>
 8005362:	7bfb      	ldrb	r3, [r7, #15]
 8005364:	2b28      	cmp	r3, #40	; 0x28
 8005366:	d126      	bne.n	80053b6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a2c      	ldr	r2, [pc, #176]	; (800541c <I2C_Slave_AF+0xdc>)
 800536c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	685a      	ldr	r2, [r3, #4]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800537c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005386:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005396:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2220      	movs	r2, #32
 80053a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f7fe ffd2 	bl	8004358 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80053b4:	e02e      	b.n	8005414 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80053b6:	7bfb      	ldrb	r3, [r7, #15]
 80053b8:	2b21      	cmp	r3, #33	; 0x21
 80053ba:	d126      	bne.n	800540a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a17      	ldr	r2, [pc, #92]	; (800541c <I2C_Slave_AF+0xdc>)
 80053c0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2221      	movs	r2, #33	; 0x21
 80053c6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2220      	movs	r2, #32
 80053cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	685a      	ldr	r2, [r3, #4]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80053e6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053f0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005400:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f7fe ff86 	bl	8004314 <HAL_I2C_SlaveTxCpltCallback>
}
 8005408:	e004      	b.n	8005414 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005412:	615a      	str	r2, [r3, #20]
}
 8005414:	bf00      	nop
 8005416:	3710      	adds	r7, #16
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	ffff0000 	.word	0xffff0000

08005420 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800542e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005436:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005438:	7bbb      	ldrb	r3, [r7, #14]
 800543a:	2b10      	cmp	r3, #16
 800543c:	d002      	beq.n	8005444 <I2C_ITError+0x24>
 800543e:	7bbb      	ldrb	r3, [r7, #14]
 8005440:	2b40      	cmp	r3, #64	; 0x40
 8005442:	d10a      	bne.n	800545a <I2C_ITError+0x3a>
 8005444:	7bfb      	ldrb	r3, [r7, #15]
 8005446:	2b22      	cmp	r3, #34	; 0x22
 8005448:	d107      	bne.n	800545a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005458:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800545a:	7bfb      	ldrb	r3, [r7, #15]
 800545c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005460:	2b28      	cmp	r3, #40	; 0x28
 8005462:	d107      	bne.n	8005474 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2228      	movs	r2, #40	; 0x28
 800546e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005472:	e015      	b.n	80054a0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800547e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005482:	d00a      	beq.n	800549a <I2C_ITError+0x7a>
 8005484:	7bfb      	ldrb	r3, [r7, #15]
 8005486:	2b60      	cmp	r3, #96	; 0x60
 8005488:	d007      	beq.n	800549a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2220      	movs	r2, #32
 800548e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054ae:	d162      	bne.n	8005576 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	685a      	ldr	r2, [r3, #4]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054be:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d020      	beq.n	8005510 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054d2:	4a6a      	ldr	r2, [pc, #424]	; (800567c <I2C_ITError+0x25c>)
 80054d4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054da:	4618      	mov	r0, r3
 80054dc:	f7fd fdf6 	bl	80030cc <HAL_DMA_Abort_IT>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	f000 8089 	beq.w	80055fa <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f022 0201 	bic.w	r2, r2, #1
 80054f6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2220      	movs	r2, #32
 80054fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800550a:	4610      	mov	r0, r2
 800550c:	4798      	blx	r3
 800550e:	e074      	b.n	80055fa <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005514:	4a59      	ldr	r2, [pc, #356]	; (800567c <I2C_ITError+0x25c>)
 8005516:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551c:	4618      	mov	r0, r3
 800551e:	f7fd fdd5 	bl	80030cc <HAL_DMA_Abort_IT>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d068      	beq.n	80055fa <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005532:	2b40      	cmp	r3, #64	; 0x40
 8005534:	d10b      	bne.n	800554e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	691a      	ldr	r2, [r3, #16]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005540:	b2d2      	uxtb	r2, r2
 8005542:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005548:	1c5a      	adds	r2, r3, #1
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f022 0201 	bic.w	r2, r2, #1
 800555c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2220      	movs	r2, #32
 8005562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800556a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005570:	4610      	mov	r0, r2
 8005572:	4798      	blx	r3
 8005574:	e041      	b.n	80055fa <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b60      	cmp	r3, #96	; 0x60
 8005580:	d125      	bne.n	80055ce <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2220      	movs	r2, #32
 8005586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800559a:	2b40      	cmp	r3, #64	; 0x40
 800559c:	d10b      	bne.n	80055b6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	691a      	ldr	r2, [r3, #16]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a8:	b2d2      	uxtb	r2, r2
 80055aa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b0:	1c5a      	adds	r2, r3, #1
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f022 0201 	bic.w	r2, r2, #1
 80055c4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f7fe feee 	bl	80043a8 <HAL_I2C_AbortCpltCallback>
 80055cc:	e015      	b.n	80055fa <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	695b      	ldr	r3, [r3, #20]
 80055d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d8:	2b40      	cmp	r3, #64	; 0x40
 80055da:	d10b      	bne.n	80055f4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	691a      	ldr	r2, [r3, #16]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e6:	b2d2      	uxtb	r2, r2
 80055e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ee:	1c5a      	adds	r2, r3, #1
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f7fe fecd 	bl	8004394 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fe:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b00      	cmp	r3, #0
 8005608:	d10e      	bne.n	8005628 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005610:	2b00      	cmp	r3, #0
 8005612:	d109      	bne.n	8005628 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800561a:	2b00      	cmp	r3, #0
 800561c:	d104      	bne.n	8005628 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005624:	2b00      	cmp	r3, #0
 8005626:	d007      	beq.n	8005638 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	685a      	ldr	r2, [r3, #4]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005636:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800563e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005644:	f003 0304 	and.w	r3, r3, #4
 8005648:	2b04      	cmp	r3, #4
 800564a:	d113      	bne.n	8005674 <I2C_ITError+0x254>
 800564c:	7bfb      	ldrb	r3, [r7, #15]
 800564e:	2b28      	cmp	r3, #40	; 0x28
 8005650:	d110      	bne.n	8005674 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a0a      	ldr	r2, [pc, #40]	; (8005680 <I2C_ITError+0x260>)
 8005656:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2220      	movs	r2, #32
 8005662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f7fe fe72 	bl	8004358 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005674:	bf00      	nop
 8005676:	3710      	adds	r7, #16
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	08005789 	.word	0x08005789
 8005680:	ffff0000 	.word	0xffff0000

08005684 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b088      	sub	sp, #32
 8005688:	af02      	add	r7, sp, #8
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	607a      	str	r2, [r7, #4]
 800568e:	603b      	str	r3, [r7, #0]
 8005690:	460b      	mov	r3, r1
 8005692:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005698:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	2b08      	cmp	r3, #8
 800569e:	d006      	beq.n	80056ae <I2C_MasterRequestWrite+0x2a>
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d003      	beq.n	80056ae <I2C_MasterRequestWrite+0x2a>
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80056ac:	d108      	bne.n	80056c0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056bc:	601a      	str	r2, [r3, #0]
 80056be:	e00b      	b.n	80056d8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c4:	2b12      	cmp	r3, #18
 80056c6:	d107      	bne.n	80056d8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	9300      	str	r3, [sp, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056e4:	68f8      	ldr	r0, [r7, #12]
 80056e6:	f000 f8f7 	bl	80058d8 <I2C_WaitOnFlagUntilTimeout>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d00d      	beq.n	800570c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056fe:	d103      	bne.n	8005708 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005706:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	e035      	b.n	8005778 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005714:	d108      	bne.n	8005728 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005716:	897b      	ldrh	r3, [r7, #10]
 8005718:	b2db      	uxtb	r3, r3
 800571a:	461a      	mov	r2, r3
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005724:	611a      	str	r2, [r3, #16]
 8005726:	e01b      	b.n	8005760 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005728:	897b      	ldrh	r3, [r7, #10]
 800572a:	11db      	asrs	r3, r3, #7
 800572c:	b2db      	uxtb	r3, r3
 800572e:	f003 0306 	and.w	r3, r3, #6
 8005732:	b2db      	uxtb	r3, r3
 8005734:	f063 030f 	orn	r3, r3, #15
 8005738:	b2da      	uxtb	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	490e      	ldr	r1, [pc, #56]	; (8005780 <I2C_MasterRequestWrite+0xfc>)
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	f000 f91d 	bl	8005986 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d001      	beq.n	8005756 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e010      	b.n	8005778 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005756:	897b      	ldrh	r3, [r7, #10]
 8005758:	b2da      	uxtb	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	4907      	ldr	r1, [pc, #28]	; (8005784 <I2C_MasterRequestWrite+0x100>)
 8005766:	68f8      	ldr	r0, [r7, #12]
 8005768:	f000 f90d 	bl	8005986 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d001      	beq.n	8005776 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e000      	b.n	8005778 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005776:	2300      	movs	r3, #0
}
 8005778:	4618      	mov	r0, r3
 800577a:	3718      	adds	r7, #24
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}
 8005780:	00010008 	.word	0x00010008
 8005784:	00010002 	.word	0x00010002

08005788 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b086      	sub	sp, #24
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005790:	2300      	movs	r3, #0
 8005792:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005798:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057a0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80057a2:	4b4b      	ldr	r3, [pc, #300]	; (80058d0 <I2C_DMAAbort+0x148>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	08db      	lsrs	r3, r3, #3
 80057a8:	4a4a      	ldr	r2, [pc, #296]	; (80058d4 <I2C_DMAAbort+0x14c>)
 80057aa:	fba2 2303 	umull	r2, r3, r2, r3
 80057ae:	0a1a      	lsrs	r2, r3, #8
 80057b0:	4613      	mov	r3, r2
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	4413      	add	r3, r2
 80057b6:	00da      	lsls	r2, r3, #3
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d106      	bne.n	80057d0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c6:	f043 0220 	orr.w	r2, r3, #32
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80057ce:	e00a      	b.n	80057e6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	3b01      	subs	r3, #1
 80057d4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057e4:	d0ea      	beq.n	80057bc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d003      	beq.n	80057f6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057f2:	2200      	movs	r2, #0
 80057f4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d003      	beq.n	8005806 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005802:	2200      	movs	r2, #0
 8005804:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005814:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	2200      	movs	r2, #0
 800581a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005820:	2b00      	cmp	r3, #0
 8005822:	d003      	beq.n	800582c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005828:	2200      	movs	r2, #0
 800582a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005830:	2b00      	cmp	r3, #0
 8005832:	d003      	beq.n	800583c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005838:	2200      	movs	r2, #0
 800583a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f022 0201 	bic.w	r2, r2, #1
 800584a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005852:	b2db      	uxtb	r3, r3
 8005854:	2b60      	cmp	r3, #96	; 0x60
 8005856:	d10e      	bne.n	8005876 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	2220      	movs	r2, #32
 800585c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	2200      	movs	r2, #0
 800586c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800586e:	6978      	ldr	r0, [r7, #20]
 8005870:	f7fe fd9a 	bl	80043a8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005874:	e027      	b.n	80058c6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005876:	7cfb      	ldrb	r3, [r7, #19]
 8005878:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800587c:	2b28      	cmp	r3, #40	; 0x28
 800587e:	d117      	bne.n	80058b0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f042 0201 	orr.w	r2, r2, #1
 800588e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800589e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	2200      	movs	r2, #0
 80058a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	2228      	movs	r2, #40	; 0x28
 80058aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80058ae:	e007      	b.n	80058c0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	2220      	movs	r2, #32
 80058b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80058c0:	6978      	ldr	r0, [r7, #20]
 80058c2:	f7fe fd67 	bl	8004394 <HAL_I2C_ErrorCallback>
}
 80058c6:	bf00      	nop
 80058c8:	3718      	adds	r7, #24
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	20000004 	.word	0x20000004
 80058d4:	14f8b589 	.word	0x14f8b589

080058d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	603b      	str	r3, [r7, #0]
 80058e4:	4613      	mov	r3, r2
 80058e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058e8:	e025      	b.n	8005936 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058f0:	d021      	beq.n	8005936 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058f2:	f7fc fdcf 	bl	8002494 <HAL_GetTick>
 80058f6:	4602      	mov	r2, r0
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	683a      	ldr	r2, [r7, #0]
 80058fe:	429a      	cmp	r2, r3
 8005900:	d302      	bcc.n	8005908 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d116      	bne.n	8005936 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2220      	movs	r2, #32
 8005912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005922:	f043 0220 	orr.w	r2, r3, #32
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e023      	b.n	800597e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	0c1b      	lsrs	r3, r3, #16
 800593a:	b2db      	uxtb	r3, r3
 800593c:	2b01      	cmp	r3, #1
 800593e:	d10d      	bne.n	800595c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	695b      	ldr	r3, [r3, #20]
 8005946:	43da      	mvns	r2, r3
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	4013      	ands	r3, r2
 800594c:	b29b      	uxth	r3, r3
 800594e:	2b00      	cmp	r3, #0
 8005950:	bf0c      	ite	eq
 8005952:	2301      	moveq	r3, #1
 8005954:	2300      	movne	r3, #0
 8005956:	b2db      	uxtb	r3, r3
 8005958:	461a      	mov	r2, r3
 800595a:	e00c      	b.n	8005976 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	699b      	ldr	r3, [r3, #24]
 8005962:	43da      	mvns	r2, r3
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	4013      	ands	r3, r2
 8005968:	b29b      	uxth	r3, r3
 800596a:	2b00      	cmp	r3, #0
 800596c:	bf0c      	ite	eq
 800596e:	2301      	moveq	r3, #1
 8005970:	2300      	movne	r3, #0
 8005972:	b2db      	uxtb	r3, r3
 8005974:	461a      	mov	r2, r3
 8005976:	79fb      	ldrb	r3, [r7, #7]
 8005978:	429a      	cmp	r2, r3
 800597a:	d0b6      	beq.n	80058ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005986:	b580      	push	{r7, lr}
 8005988:	b084      	sub	sp, #16
 800598a:	af00      	add	r7, sp, #0
 800598c:	60f8      	str	r0, [r7, #12]
 800598e:	60b9      	str	r1, [r7, #8]
 8005990:	607a      	str	r2, [r7, #4]
 8005992:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005994:	e051      	b.n	8005a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	695b      	ldr	r3, [r3, #20]
 800599c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059a4:	d123      	bne.n	80059ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059b4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059be:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2220      	movs	r2, #32
 80059ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059da:	f043 0204 	orr.w	r2, r3, #4
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e046      	b.n	8005a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059f4:	d021      	beq.n	8005a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059f6:	f7fc fd4d 	bl	8002494 <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d302      	bcc.n	8005a0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d116      	bne.n	8005a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2220      	movs	r2, #32
 8005a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a26:	f043 0220 	orr.w	r2, r3, #32
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e020      	b.n	8005a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	0c1b      	lsrs	r3, r3, #16
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d10c      	bne.n	8005a5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	43da      	mvns	r2, r3
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	4013      	ands	r3, r2
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	bf14      	ite	ne
 8005a56:	2301      	movne	r3, #1
 8005a58:	2300      	moveq	r3, #0
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	e00b      	b.n	8005a76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	699b      	ldr	r3, [r3, #24]
 8005a64:	43da      	mvns	r2, r3
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	4013      	ands	r3, r2
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	bf14      	ite	ne
 8005a70:	2301      	movne	r3, #1
 8005a72:	2300      	moveq	r3, #0
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d18d      	bne.n	8005996 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3710      	adds	r7, #16
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a90:	e02d      	b.n	8005aee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f000 f8aa 	bl	8005bec <I2C_IsAcknowledgeFailed>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d001      	beq.n	8005aa2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e02d      	b.n	8005afe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005aa8:	d021      	beq.n	8005aee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aaa:	f7fc fcf3 	bl	8002494 <HAL_GetTick>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	68ba      	ldr	r2, [r7, #8]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d302      	bcc.n	8005ac0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d116      	bne.n	8005aee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2220      	movs	r2, #32
 8005aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ada:	f043 0220 	orr.w	r2, r3, #32
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e007      	b.n	8005afe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	695b      	ldr	r3, [r3, #20]
 8005af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005af8:	2b80      	cmp	r3, #128	; 0x80
 8005afa:	d1ca      	bne.n	8005a92 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b084      	sub	sp, #16
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	60f8      	str	r0, [r7, #12]
 8005b0e:	60b9      	str	r1, [r7, #8]
 8005b10:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b12:	e02d      	b.n	8005b70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b14:	68f8      	ldr	r0, [r7, #12]
 8005b16:	f000 f869 	bl	8005bec <I2C_IsAcknowledgeFailed>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d001      	beq.n	8005b24 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e02d      	b.n	8005b80 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b2a:	d021      	beq.n	8005b70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b2c:	f7fc fcb2 	bl	8002494 <HAL_GetTick>
 8005b30:	4602      	mov	r2, r0
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	68ba      	ldr	r2, [r7, #8]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d302      	bcc.n	8005b42 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d116      	bne.n	8005b70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2200      	movs	r2, #0
 8005b46:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2220      	movs	r2, #32
 8005b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5c:	f043 0220 	orr.w	r2, r3, #32
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e007      	b.n	8005b80 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	695b      	ldr	r3, [r3, #20]
 8005b76:	f003 0304 	and.w	r3, r3, #4
 8005b7a:	2b04      	cmp	r3, #4
 8005b7c:	d1ca      	bne.n	8005b14 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3710      	adds	r7, #16
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b90:	2300      	movs	r3, #0
 8005b92:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005b94:	4b13      	ldr	r3, [pc, #76]	; (8005be4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	08db      	lsrs	r3, r3, #3
 8005b9a:	4a13      	ldr	r2, [pc, #76]	; (8005be8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba0:	0a1a      	lsrs	r2, r3, #8
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	4413      	add	r3, r2
 8005ba8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	3b01      	subs	r3, #1
 8005bae:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d107      	bne.n	8005bc6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bba:	f043 0220 	orr.w	r2, r3, #32
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e008      	b.n	8005bd8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bd4:	d0e9      	beq.n	8005baa <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3714      	adds	r7, #20
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr
 8005be4:	20000004 	.word	0x20000004
 8005be8:	14f8b589 	.word	0x14f8b589

08005bec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c02:	d11b      	bne.n	8005c3c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c0c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2220      	movs	r2, #32
 8005c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c28:	f043 0204 	orr.w	r2, r3, #4
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e000      	b.n	8005c3e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	370c      	adds	r7, #12
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr

08005c4a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	b083      	sub	sp, #12
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c56:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005c5a:	d103      	bne.n	8005c64 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005c62:	e007      	b.n	8005c74 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c68:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005c6c:	d102      	bne.n	8005c74 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2208      	movs	r2, #8
 8005c72:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b086      	sub	sp, #24
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d101      	bne.n	8005c92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e267      	b.n	8006162 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0301 	and.w	r3, r3, #1
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d075      	beq.n	8005d8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c9e:	4b88      	ldr	r3, [pc, #544]	; (8005ec0 <HAL_RCC_OscConfig+0x240>)
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	f003 030c 	and.w	r3, r3, #12
 8005ca6:	2b04      	cmp	r3, #4
 8005ca8:	d00c      	beq.n	8005cc4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005caa:	4b85      	ldr	r3, [pc, #532]	; (8005ec0 <HAL_RCC_OscConfig+0x240>)
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005cb2:	2b08      	cmp	r3, #8
 8005cb4:	d112      	bne.n	8005cdc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cb6:	4b82      	ldr	r3, [pc, #520]	; (8005ec0 <HAL_RCC_OscConfig+0x240>)
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cc2:	d10b      	bne.n	8005cdc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cc4:	4b7e      	ldr	r3, [pc, #504]	; (8005ec0 <HAL_RCC_OscConfig+0x240>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d05b      	beq.n	8005d88 <HAL_RCC_OscConfig+0x108>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d157      	bne.n	8005d88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e242      	b.n	8006162 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ce4:	d106      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x74>
 8005ce6:	4b76      	ldr	r3, [pc, #472]	; (8005ec0 <HAL_RCC_OscConfig+0x240>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a75      	ldr	r2, [pc, #468]	; (8005ec0 <HAL_RCC_OscConfig+0x240>)
 8005cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cf0:	6013      	str	r3, [r2, #0]
 8005cf2:	e01d      	b.n	8005d30 <HAL_RCC_OscConfig+0xb0>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cfc:	d10c      	bne.n	8005d18 <HAL_RCC_OscConfig+0x98>
 8005cfe:	4b70      	ldr	r3, [pc, #448]	; (8005ec0 <HAL_RCC_OscConfig+0x240>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a6f      	ldr	r2, [pc, #444]	; (8005ec0 <HAL_RCC_OscConfig+0x240>)
 8005d04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d08:	6013      	str	r3, [r2, #0]
 8005d0a:	4b6d      	ldr	r3, [pc, #436]	; (8005ec0 <HAL_RCC_OscConfig+0x240>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a6c      	ldr	r2, [pc, #432]	; (8005ec0 <HAL_RCC_OscConfig+0x240>)
 8005d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d14:	6013      	str	r3, [r2, #0]
 8005d16:	e00b      	b.n	8005d30 <HAL_RCC_OscConfig+0xb0>
 8005d18:	4b69      	ldr	r3, [pc, #420]	; (8005ec0 <HAL_RCC_OscConfig+0x240>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a68      	ldr	r2, [pc, #416]	; (8005ec0 <HAL_RCC_OscConfig+0x240>)
 8005d1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d22:	6013      	str	r3, [r2, #0]
 8005d24:	4b66      	ldr	r3, [pc, #408]	; (8005ec0 <HAL_RCC_OscConfig+0x240>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a65      	ldr	r2, [pc, #404]	; (8005ec0 <HAL_RCC_OscConfig+0x240>)
 8005d2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d013      	beq.n	8005d60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d38:	f7fc fbac 	bl	8002494 <HAL_GetTick>
 8005d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d3e:	e008      	b.n	8005d52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d40:	f7fc fba8 	bl	8002494 <HAL_GetTick>
 8005d44:	4602      	mov	r2, r0
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	2b64      	cmp	r3, #100	; 0x64
 8005d4c:	d901      	bls.n	8005d52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	e207      	b.n	8006162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d52:	4b5b      	ldr	r3, [pc, #364]	; (8005ec0 <HAL_RCC_OscConfig+0x240>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d0f0      	beq.n	8005d40 <HAL_RCC_OscConfig+0xc0>
 8005d5e:	e014      	b.n	8005d8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d60:	f7fc fb98 	bl	8002494 <HAL_GetTick>
 8005d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d66:	e008      	b.n	8005d7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d68:	f7fc fb94 	bl	8002494 <HAL_GetTick>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	2b64      	cmp	r3, #100	; 0x64
 8005d74:	d901      	bls.n	8005d7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e1f3      	b.n	8006162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d7a:	4b51      	ldr	r3, [pc, #324]	; (8005ec0 <HAL_RCC_OscConfig+0x240>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d1f0      	bne.n	8005d68 <HAL_RCC_OscConfig+0xe8>
 8005d86:	e000      	b.n	8005d8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 0302 	and.w	r3, r3, #2
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d063      	beq.n	8005e5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d96:	4b4a      	ldr	r3, [pc, #296]	; (8005ec0 <HAL_RCC_OscConfig+0x240>)
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	f003 030c 	and.w	r3, r3, #12
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00b      	beq.n	8005dba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005da2:	4b47      	ldr	r3, [pc, #284]	; (8005ec0 <HAL_RCC_OscConfig+0x240>)
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005daa:	2b08      	cmp	r3, #8
 8005dac:	d11c      	bne.n	8005de8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005dae:	4b44      	ldr	r3, [pc, #272]	; (8005ec0 <HAL_RCC_OscConfig+0x240>)
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d116      	bne.n	8005de8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dba:	4b41      	ldr	r3, [pc, #260]	; (8005ec0 <HAL_RCC_OscConfig+0x240>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0302 	and.w	r3, r3, #2
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d005      	beq.n	8005dd2 <HAL_RCC_OscConfig+0x152>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d001      	beq.n	8005dd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e1c7      	b.n	8006162 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dd2:	4b3b      	ldr	r3, [pc, #236]	; (8005ec0 <HAL_RCC_OscConfig+0x240>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	00db      	lsls	r3, r3, #3
 8005de0:	4937      	ldr	r1, [pc, #220]	; (8005ec0 <HAL_RCC_OscConfig+0x240>)
 8005de2:	4313      	orrs	r3, r2
 8005de4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005de6:	e03a      	b.n	8005e5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d020      	beq.n	8005e32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005df0:	4b34      	ldr	r3, [pc, #208]	; (8005ec4 <HAL_RCC_OscConfig+0x244>)
 8005df2:	2201      	movs	r2, #1
 8005df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005df6:	f7fc fb4d 	bl	8002494 <HAL_GetTick>
 8005dfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dfc:	e008      	b.n	8005e10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005dfe:	f7fc fb49 	bl	8002494 <HAL_GetTick>
 8005e02:	4602      	mov	r2, r0
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	1ad3      	subs	r3, r2, r3
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	d901      	bls.n	8005e10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	e1a8      	b.n	8006162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e10:	4b2b      	ldr	r3, [pc, #172]	; (8005ec0 <HAL_RCC_OscConfig+0x240>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 0302 	and.w	r3, r3, #2
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d0f0      	beq.n	8005dfe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e1c:	4b28      	ldr	r3, [pc, #160]	; (8005ec0 <HAL_RCC_OscConfig+0x240>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	691b      	ldr	r3, [r3, #16]
 8005e28:	00db      	lsls	r3, r3, #3
 8005e2a:	4925      	ldr	r1, [pc, #148]	; (8005ec0 <HAL_RCC_OscConfig+0x240>)
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	600b      	str	r3, [r1, #0]
 8005e30:	e015      	b.n	8005e5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e32:	4b24      	ldr	r3, [pc, #144]	; (8005ec4 <HAL_RCC_OscConfig+0x244>)
 8005e34:	2200      	movs	r2, #0
 8005e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e38:	f7fc fb2c 	bl	8002494 <HAL_GetTick>
 8005e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e3e:	e008      	b.n	8005e52 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e40:	f7fc fb28 	bl	8002494 <HAL_GetTick>
 8005e44:	4602      	mov	r2, r0
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	d901      	bls.n	8005e52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e187      	b.n	8006162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e52:	4b1b      	ldr	r3, [pc, #108]	; (8005ec0 <HAL_RCC_OscConfig+0x240>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 0302 	and.w	r3, r3, #2
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d1f0      	bne.n	8005e40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0308 	and.w	r3, r3, #8
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d036      	beq.n	8005ed8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	695b      	ldr	r3, [r3, #20]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d016      	beq.n	8005ea0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e72:	4b15      	ldr	r3, [pc, #84]	; (8005ec8 <HAL_RCC_OscConfig+0x248>)
 8005e74:	2201      	movs	r2, #1
 8005e76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e78:	f7fc fb0c 	bl	8002494 <HAL_GetTick>
 8005e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e7e:	e008      	b.n	8005e92 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e80:	f7fc fb08 	bl	8002494 <HAL_GetTick>
 8005e84:	4602      	mov	r2, r0
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d901      	bls.n	8005e92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e167      	b.n	8006162 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e92:	4b0b      	ldr	r3, [pc, #44]	; (8005ec0 <HAL_RCC_OscConfig+0x240>)
 8005e94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e96:	f003 0302 	and.w	r3, r3, #2
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d0f0      	beq.n	8005e80 <HAL_RCC_OscConfig+0x200>
 8005e9e:	e01b      	b.n	8005ed8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ea0:	4b09      	ldr	r3, [pc, #36]	; (8005ec8 <HAL_RCC_OscConfig+0x248>)
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ea6:	f7fc faf5 	bl	8002494 <HAL_GetTick>
 8005eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005eac:	e00e      	b.n	8005ecc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005eae:	f7fc faf1 	bl	8002494 <HAL_GetTick>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d907      	bls.n	8005ecc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005ebc:	2303      	movs	r3, #3
 8005ebe:	e150      	b.n	8006162 <HAL_RCC_OscConfig+0x4e2>
 8005ec0:	40023800 	.word	0x40023800
 8005ec4:	42470000 	.word	0x42470000
 8005ec8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ecc:	4b88      	ldr	r3, [pc, #544]	; (80060f0 <HAL_RCC_OscConfig+0x470>)
 8005ece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ed0:	f003 0302 	and.w	r3, r3, #2
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d1ea      	bne.n	8005eae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0304 	and.w	r3, r3, #4
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f000 8097 	beq.w	8006014 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005eea:	4b81      	ldr	r3, [pc, #516]	; (80060f0 <HAL_RCC_OscConfig+0x470>)
 8005eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d10f      	bne.n	8005f16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	60bb      	str	r3, [r7, #8]
 8005efa:	4b7d      	ldr	r3, [pc, #500]	; (80060f0 <HAL_RCC_OscConfig+0x470>)
 8005efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efe:	4a7c      	ldr	r2, [pc, #496]	; (80060f0 <HAL_RCC_OscConfig+0x470>)
 8005f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f04:	6413      	str	r3, [r2, #64]	; 0x40
 8005f06:	4b7a      	ldr	r3, [pc, #488]	; (80060f0 <HAL_RCC_OscConfig+0x470>)
 8005f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f0e:	60bb      	str	r3, [r7, #8]
 8005f10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f12:	2301      	movs	r3, #1
 8005f14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f16:	4b77      	ldr	r3, [pc, #476]	; (80060f4 <HAL_RCC_OscConfig+0x474>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d118      	bne.n	8005f54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f22:	4b74      	ldr	r3, [pc, #464]	; (80060f4 <HAL_RCC_OscConfig+0x474>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a73      	ldr	r2, [pc, #460]	; (80060f4 <HAL_RCC_OscConfig+0x474>)
 8005f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f2e:	f7fc fab1 	bl	8002494 <HAL_GetTick>
 8005f32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f34:	e008      	b.n	8005f48 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f36:	f7fc faad 	bl	8002494 <HAL_GetTick>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d901      	bls.n	8005f48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005f44:	2303      	movs	r3, #3
 8005f46:	e10c      	b.n	8006162 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f48:	4b6a      	ldr	r3, [pc, #424]	; (80060f4 <HAL_RCC_OscConfig+0x474>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d0f0      	beq.n	8005f36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d106      	bne.n	8005f6a <HAL_RCC_OscConfig+0x2ea>
 8005f5c:	4b64      	ldr	r3, [pc, #400]	; (80060f0 <HAL_RCC_OscConfig+0x470>)
 8005f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f60:	4a63      	ldr	r2, [pc, #396]	; (80060f0 <HAL_RCC_OscConfig+0x470>)
 8005f62:	f043 0301 	orr.w	r3, r3, #1
 8005f66:	6713      	str	r3, [r2, #112]	; 0x70
 8005f68:	e01c      	b.n	8005fa4 <HAL_RCC_OscConfig+0x324>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	2b05      	cmp	r3, #5
 8005f70:	d10c      	bne.n	8005f8c <HAL_RCC_OscConfig+0x30c>
 8005f72:	4b5f      	ldr	r3, [pc, #380]	; (80060f0 <HAL_RCC_OscConfig+0x470>)
 8005f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f76:	4a5e      	ldr	r2, [pc, #376]	; (80060f0 <HAL_RCC_OscConfig+0x470>)
 8005f78:	f043 0304 	orr.w	r3, r3, #4
 8005f7c:	6713      	str	r3, [r2, #112]	; 0x70
 8005f7e:	4b5c      	ldr	r3, [pc, #368]	; (80060f0 <HAL_RCC_OscConfig+0x470>)
 8005f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f82:	4a5b      	ldr	r2, [pc, #364]	; (80060f0 <HAL_RCC_OscConfig+0x470>)
 8005f84:	f043 0301 	orr.w	r3, r3, #1
 8005f88:	6713      	str	r3, [r2, #112]	; 0x70
 8005f8a:	e00b      	b.n	8005fa4 <HAL_RCC_OscConfig+0x324>
 8005f8c:	4b58      	ldr	r3, [pc, #352]	; (80060f0 <HAL_RCC_OscConfig+0x470>)
 8005f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f90:	4a57      	ldr	r2, [pc, #348]	; (80060f0 <HAL_RCC_OscConfig+0x470>)
 8005f92:	f023 0301 	bic.w	r3, r3, #1
 8005f96:	6713      	str	r3, [r2, #112]	; 0x70
 8005f98:	4b55      	ldr	r3, [pc, #340]	; (80060f0 <HAL_RCC_OscConfig+0x470>)
 8005f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f9c:	4a54      	ldr	r2, [pc, #336]	; (80060f0 <HAL_RCC_OscConfig+0x470>)
 8005f9e:	f023 0304 	bic.w	r3, r3, #4
 8005fa2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d015      	beq.n	8005fd8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fac:	f7fc fa72 	bl	8002494 <HAL_GetTick>
 8005fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fb2:	e00a      	b.n	8005fca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fb4:	f7fc fa6e 	bl	8002494 <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d901      	bls.n	8005fca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e0cb      	b.n	8006162 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fca:	4b49      	ldr	r3, [pc, #292]	; (80060f0 <HAL_RCC_OscConfig+0x470>)
 8005fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fce:	f003 0302 	and.w	r3, r3, #2
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d0ee      	beq.n	8005fb4 <HAL_RCC_OscConfig+0x334>
 8005fd6:	e014      	b.n	8006002 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fd8:	f7fc fa5c 	bl	8002494 <HAL_GetTick>
 8005fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fde:	e00a      	b.n	8005ff6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fe0:	f7fc fa58 	bl	8002494 <HAL_GetTick>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d901      	bls.n	8005ff6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005ff2:	2303      	movs	r3, #3
 8005ff4:	e0b5      	b.n	8006162 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ff6:	4b3e      	ldr	r3, [pc, #248]	; (80060f0 <HAL_RCC_OscConfig+0x470>)
 8005ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ffa:	f003 0302 	and.w	r3, r3, #2
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d1ee      	bne.n	8005fe0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006002:	7dfb      	ldrb	r3, [r7, #23]
 8006004:	2b01      	cmp	r3, #1
 8006006:	d105      	bne.n	8006014 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006008:	4b39      	ldr	r3, [pc, #228]	; (80060f0 <HAL_RCC_OscConfig+0x470>)
 800600a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600c:	4a38      	ldr	r2, [pc, #224]	; (80060f0 <HAL_RCC_OscConfig+0x470>)
 800600e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006012:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	699b      	ldr	r3, [r3, #24]
 8006018:	2b00      	cmp	r3, #0
 800601a:	f000 80a1 	beq.w	8006160 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800601e:	4b34      	ldr	r3, [pc, #208]	; (80060f0 <HAL_RCC_OscConfig+0x470>)
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	f003 030c 	and.w	r3, r3, #12
 8006026:	2b08      	cmp	r3, #8
 8006028:	d05c      	beq.n	80060e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	2b02      	cmp	r3, #2
 8006030:	d141      	bne.n	80060b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006032:	4b31      	ldr	r3, [pc, #196]	; (80060f8 <HAL_RCC_OscConfig+0x478>)
 8006034:	2200      	movs	r2, #0
 8006036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006038:	f7fc fa2c 	bl	8002494 <HAL_GetTick>
 800603c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800603e:	e008      	b.n	8006052 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006040:	f7fc fa28 	bl	8002494 <HAL_GetTick>
 8006044:	4602      	mov	r2, r0
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	2b02      	cmp	r3, #2
 800604c:	d901      	bls.n	8006052 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800604e:	2303      	movs	r3, #3
 8006050:	e087      	b.n	8006162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006052:	4b27      	ldr	r3, [pc, #156]	; (80060f0 <HAL_RCC_OscConfig+0x470>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800605a:	2b00      	cmp	r3, #0
 800605c:	d1f0      	bne.n	8006040 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	69da      	ldr	r2, [r3, #28]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a1b      	ldr	r3, [r3, #32]
 8006066:	431a      	orrs	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606c:	019b      	lsls	r3, r3, #6
 800606e:	431a      	orrs	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006074:	085b      	lsrs	r3, r3, #1
 8006076:	3b01      	subs	r3, #1
 8006078:	041b      	lsls	r3, r3, #16
 800607a:	431a      	orrs	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006080:	061b      	lsls	r3, r3, #24
 8006082:	491b      	ldr	r1, [pc, #108]	; (80060f0 <HAL_RCC_OscConfig+0x470>)
 8006084:	4313      	orrs	r3, r2
 8006086:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006088:	4b1b      	ldr	r3, [pc, #108]	; (80060f8 <HAL_RCC_OscConfig+0x478>)
 800608a:	2201      	movs	r2, #1
 800608c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800608e:	f7fc fa01 	bl	8002494 <HAL_GetTick>
 8006092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006094:	e008      	b.n	80060a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006096:	f7fc f9fd 	bl	8002494 <HAL_GetTick>
 800609a:	4602      	mov	r2, r0
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	d901      	bls.n	80060a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e05c      	b.n	8006162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060a8:	4b11      	ldr	r3, [pc, #68]	; (80060f0 <HAL_RCC_OscConfig+0x470>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d0f0      	beq.n	8006096 <HAL_RCC_OscConfig+0x416>
 80060b4:	e054      	b.n	8006160 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060b6:	4b10      	ldr	r3, [pc, #64]	; (80060f8 <HAL_RCC_OscConfig+0x478>)
 80060b8:	2200      	movs	r2, #0
 80060ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060bc:	f7fc f9ea 	bl	8002494 <HAL_GetTick>
 80060c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060c2:	e008      	b.n	80060d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060c4:	f7fc f9e6 	bl	8002494 <HAL_GetTick>
 80060c8:	4602      	mov	r2, r0
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d901      	bls.n	80060d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80060d2:	2303      	movs	r3, #3
 80060d4:	e045      	b.n	8006162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060d6:	4b06      	ldr	r3, [pc, #24]	; (80060f0 <HAL_RCC_OscConfig+0x470>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1f0      	bne.n	80060c4 <HAL_RCC_OscConfig+0x444>
 80060e2:	e03d      	b.n	8006160 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	699b      	ldr	r3, [r3, #24]
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d107      	bne.n	80060fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e038      	b.n	8006162 <HAL_RCC_OscConfig+0x4e2>
 80060f0:	40023800 	.word	0x40023800
 80060f4:	40007000 	.word	0x40007000
 80060f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80060fc:	4b1b      	ldr	r3, [pc, #108]	; (800616c <HAL_RCC_OscConfig+0x4ec>)
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	2b01      	cmp	r3, #1
 8006108:	d028      	beq.n	800615c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006114:	429a      	cmp	r2, r3
 8006116:	d121      	bne.n	800615c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006122:	429a      	cmp	r2, r3
 8006124:	d11a      	bne.n	800615c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800612c:	4013      	ands	r3, r2
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006132:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006134:	4293      	cmp	r3, r2
 8006136:	d111      	bne.n	800615c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006142:	085b      	lsrs	r3, r3, #1
 8006144:	3b01      	subs	r3, #1
 8006146:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006148:	429a      	cmp	r2, r3
 800614a:	d107      	bne.n	800615c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006156:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006158:	429a      	cmp	r2, r3
 800615a:	d001      	beq.n	8006160 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e000      	b.n	8006162 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3718      	adds	r7, #24
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	40023800 	.word	0x40023800

08006170 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d101      	bne.n	8006184 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	e0cc      	b.n	800631e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006184:	4b68      	ldr	r3, [pc, #416]	; (8006328 <HAL_RCC_ClockConfig+0x1b8>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 0307 	and.w	r3, r3, #7
 800618c:	683a      	ldr	r2, [r7, #0]
 800618e:	429a      	cmp	r2, r3
 8006190:	d90c      	bls.n	80061ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006192:	4b65      	ldr	r3, [pc, #404]	; (8006328 <HAL_RCC_ClockConfig+0x1b8>)
 8006194:	683a      	ldr	r2, [r7, #0]
 8006196:	b2d2      	uxtb	r2, r2
 8006198:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800619a:	4b63      	ldr	r3, [pc, #396]	; (8006328 <HAL_RCC_ClockConfig+0x1b8>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 0307 	and.w	r3, r3, #7
 80061a2:	683a      	ldr	r2, [r7, #0]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d001      	beq.n	80061ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e0b8      	b.n	800631e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 0302 	and.w	r3, r3, #2
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d020      	beq.n	80061fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 0304 	and.w	r3, r3, #4
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d005      	beq.n	80061d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061c4:	4b59      	ldr	r3, [pc, #356]	; (800632c <HAL_RCC_ClockConfig+0x1bc>)
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	4a58      	ldr	r2, [pc, #352]	; (800632c <HAL_RCC_ClockConfig+0x1bc>)
 80061ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80061ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0308 	and.w	r3, r3, #8
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d005      	beq.n	80061e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061dc:	4b53      	ldr	r3, [pc, #332]	; (800632c <HAL_RCC_ClockConfig+0x1bc>)
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	4a52      	ldr	r2, [pc, #328]	; (800632c <HAL_RCC_ClockConfig+0x1bc>)
 80061e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80061e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061e8:	4b50      	ldr	r3, [pc, #320]	; (800632c <HAL_RCC_ClockConfig+0x1bc>)
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	494d      	ldr	r1, [pc, #308]	; (800632c <HAL_RCC_ClockConfig+0x1bc>)
 80061f6:	4313      	orrs	r3, r2
 80061f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 0301 	and.w	r3, r3, #1
 8006202:	2b00      	cmp	r3, #0
 8006204:	d044      	beq.n	8006290 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	2b01      	cmp	r3, #1
 800620c:	d107      	bne.n	800621e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800620e:	4b47      	ldr	r3, [pc, #284]	; (800632c <HAL_RCC_ClockConfig+0x1bc>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006216:	2b00      	cmp	r3, #0
 8006218:	d119      	bne.n	800624e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e07f      	b.n	800631e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	2b02      	cmp	r3, #2
 8006224:	d003      	beq.n	800622e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800622a:	2b03      	cmp	r3, #3
 800622c:	d107      	bne.n	800623e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800622e:	4b3f      	ldr	r3, [pc, #252]	; (800632c <HAL_RCC_ClockConfig+0x1bc>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006236:	2b00      	cmp	r3, #0
 8006238:	d109      	bne.n	800624e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e06f      	b.n	800631e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800623e:	4b3b      	ldr	r3, [pc, #236]	; (800632c <HAL_RCC_ClockConfig+0x1bc>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0302 	and.w	r3, r3, #2
 8006246:	2b00      	cmp	r3, #0
 8006248:	d101      	bne.n	800624e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e067      	b.n	800631e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800624e:	4b37      	ldr	r3, [pc, #220]	; (800632c <HAL_RCC_ClockConfig+0x1bc>)
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	f023 0203 	bic.w	r2, r3, #3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	4934      	ldr	r1, [pc, #208]	; (800632c <HAL_RCC_ClockConfig+0x1bc>)
 800625c:	4313      	orrs	r3, r2
 800625e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006260:	f7fc f918 	bl	8002494 <HAL_GetTick>
 8006264:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006266:	e00a      	b.n	800627e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006268:	f7fc f914 	bl	8002494 <HAL_GetTick>
 800626c:	4602      	mov	r2, r0
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	f241 3288 	movw	r2, #5000	; 0x1388
 8006276:	4293      	cmp	r3, r2
 8006278:	d901      	bls.n	800627e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	e04f      	b.n	800631e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800627e:	4b2b      	ldr	r3, [pc, #172]	; (800632c <HAL_RCC_ClockConfig+0x1bc>)
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	f003 020c 	and.w	r2, r3, #12
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	429a      	cmp	r2, r3
 800628e:	d1eb      	bne.n	8006268 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006290:	4b25      	ldr	r3, [pc, #148]	; (8006328 <HAL_RCC_ClockConfig+0x1b8>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f003 0307 	and.w	r3, r3, #7
 8006298:	683a      	ldr	r2, [r7, #0]
 800629a:	429a      	cmp	r2, r3
 800629c:	d20c      	bcs.n	80062b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800629e:	4b22      	ldr	r3, [pc, #136]	; (8006328 <HAL_RCC_ClockConfig+0x1b8>)
 80062a0:	683a      	ldr	r2, [r7, #0]
 80062a2:	b2d2      	uxtb	r2, r2
 80062a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062a6:	4b20      	ldr	r3, [pc, #128]	; (8006328 <HAL_RCC_ClockConfig+0x1b8>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 0307 	and.w	r3, r3, #7
 80062ae:	683a      	ldr	r2, [r7, #0]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d001      	beq.n	80062b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	e032      	b.n	800631e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 0304 	and.w	r3, r3, #4
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d008      	beq.n	80062d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062c4:	4b19      	ldr	r3, [pc, #100]	; (800632c <HAL_RCC_ClockConfig+0x1bc>)
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	4916      	ldr	r1, [pc, #88]	; (800632c <HAL_RCC_ClockConfig+0x1bc>)
 80062d2:	4313      	orrs	r3, r2
 80062d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 0308 	and.w	r3, r3, #8
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d009      	beq.n	80062f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062e2:	4b12      	ldr	r3, [pc, #72]	; (800632c <HAL_RCC_ClockConfig+0x1bc>)
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	00db      	lsls	r3, r3, #3
 80062f0:	490e      	ldr	r1, [pc, #56]	; (800632c <HAL_RCC_ClockConfig+0x1bc>)
 80062f2:	4313      	orrs	r3, r2
 80062f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80062f6:	f000 f821 	bl	800633c <HAL_RCC_GetSysClockFreq>
 80062fa:	4602      	mov	r2, r0
 80062fc:	4b0b      	ldr	r3, [pc, #44]	; (800632c <HAL_RCC_ClockConfig+0x1bc>)
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	091b      	lsrs	r3, r3, #4
 8006302:	f003 030f 	and.w	r3, r3, #15
 8006306:	490a      	ldr	r1, [pc, #40]	; (8006330 <HAL_RCC_ClockConfig+0x1c0>)
 8006308:	5ccb      	ldrb	r3, [r1, r3]
 800630a:	fa22 f303 	lsr.w	r3, r2, r3
 800630e:	4a09      	ldr	r2, [pc, #36]	; (8006334 <HAL_RCC_ClockConfig+0x1c4>)
 8006310:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006312:	4b09      	ldr	r3, [pc, #36]	; (8006338 <HAL_RCC_ClockConfig+0x1c8>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4618      	mov	r0, r3
 8006318:	f7fc f878 	bl	800240c <HAL_InitTick>

  return HAL_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3710      	adds	r7, #16
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	40023c00 	.word	0x40023c00
 800632c:	40023800 	.word	0x40023800
 8006330:	08007c98 	.word	0x08007c98
 8006334:	20000004 	.word	0x20000004
 8006338:	20000008 	.word	0x20000008

0800633c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800633c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006340:	b090      	sub	sp, #64	; 0x40
 8006342:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006344:	2300      	movs	r3, #0
 8006346:	637b      	str	r3, [r7, #52]	; 0x34
 8006348:	2300      	movs	r3, #0
 800634a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800634c:	2300      	movs	r3, #0
 800634e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006350:	2300      	movs	r3, #0
 8006352:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006354:	4b59      	ldr	r3, [pc, #356]	; (80064bc <HAL_RCC_GetSysClockFreq+0x180>)
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	f003 030c 	and.w	r3, r3, #12
 800635c:	2b08      	cmp	r3, #8
 800635e:	d00d      	beq.n	800637c <HAL_RCC_GetSysClockFreq+0x40>
 8006360:	2b08      	cmp	r3, #8
 8006362:	f200 80a1 	bhi.w	80064a8 <HAL_RCC_GetSysClockFreq+0x16c>
 8006366:	2b00      	cmp	r3, #0
 8006368:	d002      	beq.n	8006370 <HAL_RCC_GetSysClockFreq+0x34>
 800636a:	2b04      	cmp	r3, #4
 800636c:	d003      	beq.n	8006376 <HAL_RCC_GetSysClockFreq+0x3a>
 800636e:	e09b      	b.n	80064a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006370:	4b53      	ldr	r3, [pc, #332]	; (80064c0 <HAL_RCC_GetSysClockFreq+0x184>)
 8006372:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006374:	e09b      	b.n	80064ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006376:	4b53      	ldr	r3, [pc, #332]	; (80064c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8006378:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800637a:	e098      	b.n	80064ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800637c:	4b4f      	ldr	r3, [pc, #316]	; (80064bc <HAL_RCC_GetSysClockFreq+0x180>)
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006384:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006386:	4b4d      	ldr	r3, [pc, #308]	; (80064bc <HAL_RCC_GetSysClockFreq+0x180>)
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800638e:	2b00      	cmp	r3, #0
 8006390:	d028      	beq.n	80063e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006392:	4b4a      	ldr	r3, [pc, #296]	; (80064bc <HAL_RCC_GetSysClockFreq+0x180>)
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	099b      	lsrs	r3, r3, #6
 8006398:	2200      	movs	r2, #0
 800639a:	623b      	str	r3, [r7, #32]
 800639c:	627a      	str	r2, [r7, #36]	; 0x24
 800639e:	6a3b      	ldr	r3, [r7, #32]
 80063a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80063a4:	2100      	movs	r1, #0
 80063a6:	4b47      	ldr	r3, [pc, #284]	; (80064c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80063a8:	fb03 f201 	mul.w	r2, r3, r1
 80063ac:	2300      	movs	r3, #0
 80063ae:	fb00 f303 	mul.w	r3, r0, r3
 80063b2:	4413      	add	r3, r2
 80063b4:	4a43      	ldr	r2, [pc, #268]	; (80064c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80063b6:	fba0 1202 	umull	r1, r2, r0, r2
 80063ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063bc:	460a      	mov	r2, r1
 80063be:	62ba      	str	r2, [r7, #40]	; 0x28
 80063c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063c2:	4413      	add	r3, r2
 80063c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063c8:	2200      	movs	r2, #0
 80063ca:	61bb      	str	r3, [r7, #24]
 80063cc:	61fa      	str	r2, [r7, #28]
 80063ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80063d6:	f7fa fba5 	bl	8000b24 <__aeabi_uldivmod>
 80063da:	4602      	mov	r2, r0
 80063dc:	460b      	mov	r3, r1
 80063de:	4613      	mov	r3, r2
 80063e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063e2:	e053      	b.n	800648c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063e4:	4b35      	ldr	r3, [pc, #212]	; (80064bc <HAL_RCC_GetSysClockFreq+0x180>)
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	099b      	lsrs	r3, r3, #6
 80063ea:	2200      	movs	r2, #0
 80063ec:	613b      	str	r3, [r7, #16]
 80063ee:	617a      	str	r2, [r7, #20]
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80063f6:	f04f 0b00 	mov.w	fp, #0
 80063fa:	4652      	mov	r2, sl
 80063fc:	465b      	mov	r3, fp
 80063fe:	f04f 0000 	mov.w	r0, #0
 8006402:	f04f 0100 	mov.w	r1, #0
 8006406:	0159      	lsls	r1, r3, #5
 8006408:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800640c:	0150      	lsls	r0, r2, #5
 800640e:	4602      	mov	r2, r0
 8006410:	460b      	mov	r3, r1
 8006412:	ebb2 080a 	subs.w	r8, r2, sl
 8006416:	eb63 090b 	sbc.w	r9, r3, fp
 800641a:	f04f 0200 	mov.w	r2, #0
 800641e:	f04f 0300 	mov.w	r3, #0
 8006422:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006426:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800642a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800642e:	ebb2 0408 	subs.w	r4, r2, r8
 8006432:	eb63 0509 	sbc.w	r5, r3, r9
 8006436:	f04f 0200 	mov.w	r2, #0
 800643a:	f04f 0300 	mov.w	r3, #0
 800643e:	00eb      	lsls	r3, r5, #3
 8006440:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006444:	00e2      	lsls	r2, r4, #3
 8006446:	4614      	mov	r4, r2
 8006448:	461d      	mov	r5, r3
 800644a:	eb14 030a 	adds.w	r3, r4, sl
 800644e:	603b      	str	r3, [r7, #0]
 8006450:	eb45 030b 	adc.w	r3, r5, fp
 8006454:	607b      	str	r3, [r7, #4]
 8006456:	f04f 0200 	mov.w	r2, #0
 800645a:	f04f 0300 	mov.w	r3, #0
 800645e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006462:	4629      	mov	r1, r5
 8006464:	028b      	lsls	r3, r1, #10
 8006466:	4621      	mov	r1, r4
 8006468:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800646c:	4621      	mov	r1, r4
 800646e:	028a      	lsls	r2, r1, #10
 8006470:	4610      	mov	r0, r2
 8006472:	4619      	mov	r1, r3
 8006474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006476:	2200      	movs	r2, #0
 8006478:	60bb      	str	r3, [r7, #8]
 800647a:	60fa      	str	r2, [r7, #12]
 800647c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006480:	f7fa fb50 	bl	8000b24 <__aeabi_uldivmod>
 8006484:	4602      	mov	r2, r0
 8006486:	460b      	mov	r3, r1
 8006488:	4613      	mov	r3, r2
 800648a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800648c:	4b0b      	ldr	r3, [pc, #44]	; (80064bc <HAL_RCC_GetSysClockFreq+0x180>)
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	0c1b      	lsrs	r3, r3, #16
 8006492:	f003 0303 	and.w	r3, r3, #3
 8006496:	3301      	adds	r3, #1
 8006498:	005b      	lsls	r3, r3, #1
 800649a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800649c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800649e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80064a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80064a6:	e002      	b.n	80064ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80064a8:	4b05      	ldr	r3, [pc, #20]	; (80064c0 <HAL_RCC_GetSysClockFreq+0x184>)
 80064aa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80064ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80064ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3740      	adds	r7, #64	; 0x40
 80064b4:	46bd      	mov	sp, r7
 80064b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064ba:	bf00      	nop
 80064bc:	40023800 	.word	0x40023800
 80064c0:	00f42400 	.word	0x00f42400
 80064c4:	017d7840 	.word	0x017d7840

080064c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064c8:	b480      	push	{r7}
 80064ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064cc:	4b03      	ldr	r3, [pc, #12]	; (80064dc <HAL_RCC_GetHCLKFreq+0x14>)
 80064ce:	681b      	ldr	r3, [r3, #0]
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr
 80064da:	bf00      	nop
 80064dc:	20000004 	.word	0x20000004

080064e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80064e4:	f7ff fff0 	bl	80064c8 <HAL_RCC_GetHCLKFreq>
 80064e8:	4602      	mov	r2, r0
 80064ea:	4b05      	ldr	r3, [pc, #20]	; (8006500 <HAL_RCC_GetPCLK1Freq+0x20>)
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	0a9b      	lsrs	r3, r3, #10
 80064f0:	f003 0307 	and.w	r3, r3, #7
 80064f4:	4903      	ldr	r1, [pc, #12]	; (8006504 <HAL_RCC_GetPCLK1Freq+0x24>)
 80064f6:	5ccb      	ldrb	r3, [r1, r3]
 80064f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	40023800 	.word	0x40023800
 8006504:	08007ca8 	.word	0x08007ca8

08006508 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d101      	bne.n	800651a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e07b      	b.n	8006612 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651e:	2b00      	cmp	r3, #0
 8006520:	d108      	bne.n	8006534 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800652a:	d009      	beq.n	8006540 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	61da      	str	r2, [r3, #28]
 8006532:	e005      	b.n	8006540 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800654c:	b2db      	uxtb	r3, r3
 800654e:	2b00      	cmp	r3, #0
 8006550:	d106      	bne.n	8006560 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f7fb fda4 	bl	80020a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2202      	movs	r2, #2
 8006564:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006576:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006588:	431a      	orrs	r2, r3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006592:	431a      	orrs	r2, r3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	f003 0302 	and.w	r3, r3, #2
 800659c:	431a      	orrs	r2, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	695b      	ldr	r3, [r3, #20]
 80065a2:	f003 0301 	and.w	r3, r3, #1
 80065a6:	431a      	orrs	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	699b      	ldr	r3, [r3, #24]
 80065ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065b0:	431a      	orrs	r2, r3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	69db      	ldr	r3, [r3, #28]
 80065b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065ba:	431a      	orrs	r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6a1b      	ldr	r3, [r3, #32]
 80065c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065c4:	ea42 0103 	orr.w	r1, r2, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	430a      	orrs	r2, r1
 80065d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	0c1b      	lsrs	r3, r3, #16
 80065de:	f003 0104 	and.w	r1, r3, #4
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e6:	f003 0210 	and.w	r2, r3, #16
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	430a      	orrs	r2, r1
 80065f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	69da      	ldr	r2, [r3, #28]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006600:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3708      	adds	r7, #8
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
	...

0800661c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800661c:	b480      	push	{r7}
 800661e:	b087      	sub	sp, #28
 8006620:	af00      	add	r7, sp, #0
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	60b9      	str	r1, [r7, #8]
 8006626:	607a      	str	r2, [r7, #4]
 8006628:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800662a:	2300      	movs	r3, #0
 800662c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006634:	2b01      	cmp	r3, #1
 8006636:	d101      	bne.n	800663c <HAL_SPI_TransmitReceive_IT+0x20>
 8006638:	2302      	movs	r3, #2
 800663a:	e075      	b.n	8006728 <HAL_SPI_TransmitReceive_IT+0x10c>
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800664a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006652:	7dbb      	ldrb	r3, [r7, #22]
 8006654:	2b01      	cmp	r3, #1
 8006656:	d00d      	beq.n	8006674 <HAL_SPI_TransmitReceive_IT+0x58>
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800665e:	d106      	bne.n	800666e <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d102      	bne.n	800666e <HAL_SPI_TransmitReceive_IT+0x52>
 8006668:	7dbb      	ldrb	r3, [r7, #22]
 800666a:	2b04      	cmp	r3, #4
 800666c:	d002      	beq.n	8006674 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800666e:	2302      	movs	r3, #2
 8006670:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006672:	e054      	b.n	800671e <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d005      	beq.n	8006686 <HAL_SPI_TransmitReceive_IT+0x6a>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d002      	beq.n	8006686 <HAL_SPI_TransmitReceive_IT+0x6a>
 8006680:	887b      	ldrh	r3, [r7, #2]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d102      	bne.n	800668c <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	75fb      	strb	r3, [r7, #23]
    goto error;
 800668a:	e048      	b.n	800671e <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006692:	b2db      	uxtb	r3, r3
 8006694:	2b04      	cmp	r3, #4
 8006696:	d003      	beq.n	80066a0 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2205      	movs	r2, #5
 800669c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2200      	movs	r2, #0
 80066a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	68ba      	ldr	r2, [r7, #8]
 80066aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	887a      	ldrh	r2, [r7, #2]
 80066b0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	887a      	ldrh	r2, [r7, #2]
 80066b6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	887a      	ldrh	r2, [r7, #2]
 80066c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	887a      	ldrh	r2, [r7, #2]
 80066c8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d006      	beq.n	80066e0 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	4a17      	ldr	r2, [pc, #92]	; (8006734 <HAL_SPI_TransmitReceive_IT+0x118>)
 80066d6:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	4a17      	ldr	r2, [pc, #92]	; (8006738 <HAL_SPI_TransmitReceive_IT+0x11c>)
 80066dc:	645a      	str	r2, [r3, #68]	; 0x44
 80066de:	e005      	b.n	80066ec <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	4a16      	ldr	r2, [pc, #88]	; (800673c <HAL_SPI_TransmitReceive_IT+0x120>)
 80066e4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	4a15      	ldr	r2, [pc, #84]	; (8006740 <HAL_SPI_TransmitReceive_IT+0x124>)
 80066ea:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	685a      	ldr	r2, [r3, #4]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80066fa:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006706:	2b40      	cmp	r3, #64	; 0x40
 8006708:	d008      	beq.n	800671c <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006718:	601a      	str	r2, [r3, #0]
 800671a:	e000      	b.n	800671e <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 800671c:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2200      	movs	r2, #0
 8006722:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006726:	7dfb      	ldrb	r3, [r7, #23]
}
 8006728:	4618      	mov	r0, r3
 800672a:	371c      	adds	r7, #28
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr
 8006734:	08006a41 	.word	0x08006a41
 8006738:	08006aa1 	.word	0x08006aa1
 800673c:	0800697d 	.word	0x0800697d
 8006740:	080069e1 	.word	0x080069e1

08006744 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b088      	sub	sp, #32
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006762:	2b00      	cmp	r3, #0
 8006764:	d10e      	bne.n	8006784 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800676c:	2b00      	cmp	r3, #0
 800676e:	d009      	beq.n	8006784 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006776:	2b00      	cmp	r3, #0
 8006778:	d004      	beq.n	8006784 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	4798      	blx	r3
    return;
 8006782:	e0ce      	b.n	8006922 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	f003 0302 	and.w	r3, r3, #2
 800678a:	2b00      	cmp	r3, #0
 800678c:	d009      	beq.n	80067a2 <HAL_SPI_IRQHandler+0x5e>
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006794:	2b00      	cmp	r3, #0
 8006796:	d004      	beq.n	80067a2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	4798      	blx	r3
    return;
 80067a0:	e0bf      	b.n	8006922 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	f003 0320 	and.w	r3, r3, #32
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d10a      	bne.n	80067c2 <HAL_SPI_IRQHandler+0x7e>
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d105      	bne.n	80067c2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067bc:	2b00      	cmp	r3, #0
 80067be:	f000 80b0 	beq.w	8006922 <HAL_SPI_IRQHandler+0x1de>
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	f003 0320 	and.w	r3, r3, #32
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f000 80aa 	beq.w	8006922 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d023      	beq.n	8006820 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	2b03      	cmp	r3, #3
 80067e2:	d011      	beq.n	8006808 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067e8:	f043 0204 	orr.w	r2, r3, #4
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067f0:	2300      	movs	r3, #0
 80067f2:	617b      	str	r3, [r7, #20]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	617b      	str	r3, [r7, #20]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	617b      	str	r3, [r7, #20]
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	e00b      	b.n	8006820 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006808:	2300      	movs	r3, #0
 800680a:	613b      	str	r3, [r7, #16]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	613b      	str	r3, [r7, #16]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	613b      	str	r3, [r7, #16]
 800681c:	693b      	ldr	r3, [r7, #16]
        return;
 800681e:	e080      	b.n	8006922 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	f003 0320 	and.w	r3, r3, #32
 8006826:	2b00      	cmp	r3, #0
 8006828:	d014      	beq.n	8006854 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800682e:	f043 0201 	orr.w	r2, r3, #1
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006836:	2300      	movs	r3, #0
 8006838:	60fb      	str	r3, [r7, #12]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	60fb      	str	r3, [r7, #12]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006850:	601a      	str	r2, [r3, #0]
 8006852:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006854:	69bb      	ldr	r3, [r7, #24]
 8006856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800685a:	2b00      	cmp	r3, #0
 800685c:	d00c      	beq.n	8006878 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006862:	f043 0208 	orr.w	r2, r3, #8
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800686a:	2300      	movs	r3, #0
 800686c:	60bb      	str	r3, [r7, #8]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	60bb      	str	r3, [r7, #8]
 8006876:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800687c:	2b00      	cmp	r3, #0
 800687e:	d04f      	beq.n	8006920 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	685a      	ldr	r2, [r3, #4]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800688e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	f003 0302 	and.w	r3, r3, #2
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d104      	bne.n	80068ac <HAL_SPI_IRQHandler+0x168>
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	f003 0301 	and.w	r3, r3, #1
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d034      	beq.n	8006916 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	685a      	ldr	r2, [r3, #4]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f022 0203 	bic.w	r2, r2, #3
 80068ba:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d011      	beq.n	80068e8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068c8:	4a17      	ldr	r2, [pc, #92]	; (8006928 <HAL_SPI_IRQHandler+0x1e4>)
 80068ca:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068d0:	4618      	mov	r0, r3
 80068d2:	f7fc fbfb 	bl	80030cc <HAL_DMA_Abort_IT>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d005      	beq.n	80068e8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d016      	beq.n	800691e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068f4:	4a0c      	ldr	r2, [pc, #48]	; (8006928 <HAL_SPI_IRQHandler+0x1e4>)
 80068f6:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068fc:	4618      	mov	r0, r3
 80068fe:	f7fc fbe5 	bl	80030cc <HAL_DMA_Abort_IT>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d00a      	beq.n	800691e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800690c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006914:	e003      	b.n	800691e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 f812 	bl	8006940 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800691c:	e000      	b.n	8006920 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800691e:	bf00      	nop
    return;
 8006920:	bf00      	nop
  }
}
 8006922:	3720      	adds	r7, #32
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}
 8006928:	08006955 	.word	0x08006955

0800692c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8006934:	bf00      	nop
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006948:	bf00      	nop
 800694a:	370c      	adds	r7, #12
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006960:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2200      	movs	r2, #0
 800696c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800696e:	68f8      	ldr	r0, [r7, #12]
 8006970:	f7ff ffe6 	bl	8006940 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006974:	bf00      	nop
 8006976:	3710      	adds	r7, #16
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f103 020c 	add.w	r2, r3, #12
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006990:	7812      	ldrb	r2, [r2, #0]
 8006992:	b2d2      	uxtb	r2, r2
 8006994:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800699a:	1c5a      	adds	r2, r3, #1
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	3b01      	subs	r3, #1
 80069a8:	b29a      	uxth	r2, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d10f      	bne.n	80069d8 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	685a      	ldr	r2, [r3, #4]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80069c6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d102      	bne.n	80069d8 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f95e 	bl	8006c94 <SPI_CloseRxTx_ISR>
    }
  }
}
 80069d8:	bf00      	nop
 80069da:	3708      	adds	r7, #8
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b082      	sub	sp, #8
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	330c      	adds	r3, #12
 80069f2:	7812      	ldrb	r2, [r2, #0]
 80069f4:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069fa:	1c5a      	adds	r2, r3, #1
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	3b01      	subs	r3, #1
 8006a08:	b29a      	uxth	r2, r3
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d10f      	bne.n	8006a38 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	685a      	ldr	r2, [r3, #4]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a26:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d102      	bne.n	8006a38 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 f92e 	bl	8006c94 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006a38:	bf00      	nop
 8006a3a:	3708      	adds	r7, #8
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b082      	sub	sp, #8
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	68da      	ldr	r2, [r3, #12]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a52:	b292      	uxth	r2, r2
 8006a54:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a5a:	1c9a      	adds	r2, r3, #2
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	3b01      	subs	r3, #1
 8006a68:	b29a      	uxth	r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d10f      	bne.n	8006a98 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	685a      	ldr	r2, [r3, #4]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a86:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d102      	bne.n	8006a98 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 f8fe 	bl	8006c94 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006a98:	bf00      	nop
 8006a9a:	3708      	adds	r7, #8
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aac:	881a      	ldrh	r2, [r3, #0]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab8:	1c9a      	adds	r2, r3, #2
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	3b01      	subs	r3, #1
 8006ac6:	b29a      	uxth	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d10f      	bne.n	8006af6 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	685a      	ldr	r2, [r3, #4]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ae4:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d102      	bne.n	8006af6 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 f8cf 	bl	8006c94 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006af6:	bf00      	nop
 8006af8:	3708      	adds	r7, #8
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
	...

08006b00 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b088      	sub	sp, #32
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	603b      	str	r3, [r7, #0]
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006b10:	f7fb fcc0 	bl	8002494 <HAL_GetTick>
 8006b14:	4602      	mov	r2, r0
 8006b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b18:	1a9b      	subs	r3, r3, r2
 8006b1a:	683a      	ldr	r2, [r7, #0]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006b20:	f7fb fcb8 	bl	8002494 <HAL_GetTick>
 8006b24:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006b26:	4b39      	ldr	r3, [pc, #228]	; (8006c0c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	015b      	lsls	r3, r3, #5
 8006b2c:	0d1b      	lsrs	r3, r3, #20
 8006b2e:	69fa      	ldr	r2, [r7, #28]
 8006b30:	fb02 f303 	mul.w	r3, r2, r3
 8006b34:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b36:	e054      	b.n	8006be2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b3e:	d050      	beq.n	8006be2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006b40:	f7fb fca8 	bl	8002494 <HAL_GetTick>
 8006b44:	4602      	mov	r2, r0
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	1ad3      	subs	r3, r2, r3
 8006b4a:	69fa      	ldr	r2, [r7, #28]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d902      	bls.n	8006b56 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d13d      	bne.n	8006bd2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	685a      	ldr	r2, [r3, #4]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006b64:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b6e:	d111      	bne.n	8006b94 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b78:	d004      	beq.n	8006b84 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b82:	d107      	bne.n	8006b94 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b92:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b9c:	d10f      	bne.n	8006bbe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006bac:	601a      	str	r2, [r3, #0]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006bbc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006bce:	2303      	movs	r3, #3
 8006bd0:	e017      	b.n	8006c02 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d101      	bne.n	8006bdc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	3b01      	subs	r3, #1
 8006be0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	689a      	ldr	r2, [r3, #8]
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	4013      	ands	r3, r2
 8006bec:	68ba      	ldr	r2, [r7, #8]
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	bf0c      	ite	eq
 8006bf2:	2301      	moveq	r3, #1
 8006bf4:	2300      	movne	r3, #0
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	79fb      	ldrb	r3, [r7, #7]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d19b      	bne.n	8006b38 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3720      	adds	r7, #32
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	20000004 	.word	0x20000004

08006c10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b088      	sub	sp, #32
 8006c14:	af02      	add	r7, sp, #8
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006c1c:	4b1b      	ldr	r3, [pc, #108]	; (8006c8c <SPI_EndRxTxTransaction+0x7c>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a1b      	ldr	r2, [pc, #108]	; (8006c90 <SPI_EndRxTxTransaction+0x80>)
 8006c22:	fba2 2303 	umull	r2, r3, r2, r3
 8006c26:	0d5b      	lsrs	r3, r3, #21
 8006c28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006c2c:	fb02 f303 	mul.w	r3, r2, r3
 8006c30:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c3a:	d112      	bne.n	8006c62 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	9300      	str	r3, [sp, #0]
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	2200      	movs	r2, #0
 8006c44:	2180      	movs	r1, #128	; 0x80
 8006c46:	68f8      	ldr	r0, [r7, #12]
 8006c48:	f7ff ff5a 	bl	8006b00 <SPI_WaitFlagStateUntilTimeout>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d016      	beq.n	8006c80 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c56:	f043 0220 	orr.w	r2, r3, #32
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	e00f      	b.n	8006c82 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00a      	beq.n	8006c7e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c78:	2b80      	cmp	r3, #128	; 0x80
 8006c7a:	d0f2      	beq.n	8006c62 <SPI_EndRxTxTransaction+0x52>
 8006c7c:	e000      	b.n	8006c80 <SPI_EndRxTxTransaction+0x70>
        break;
 8006c7e:	bf00      	nop
  }

  return HAL_OK;
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3718      	adds	r7, #24
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	bf00      	nop
 8006c8c:	20000004 	.word	0x20000004
 8006c90:	165e9f81 	.word	0x165e9f81

08006c94 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b086      	sub	sp, #24
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8006c9c:	4b35      	ldr	r3, [pc, #212]	; (8006d74 <SPI_CloseRxTx_ISR+0xe0>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a35      	ldr	r2, [pc, #212]	; (8006d78 <SPI_CloseRxTx_ISR+0xe4>)
 8006ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ca6:	0a5b      	lsrs	r3, r3, #9
 8006ca8:	2264      	movs	r2, #100	; 0x64
 8006caa:	fb02 f303 	mul.w	r3, r2, r3
 8006cae:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006cb0:	f7fb fbf0 	bl	8002494 <HAL_GetTick>
 8006cb4:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	685a      	ldr	r2, [r3, #4]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f022 0220 	bic.w	r2, r2, #32
 8006cc4:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d106      	bne.n	8006cda <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cd0:	f043 0220 	orr.w	r2, r3, #32
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006cd8:	e009      	b.n	8006cee <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	3b01      	subs	r3, #1
 8006cde:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	f003 0302 	and.w	r3, r3, #2
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d0eb      	beq.n	8006cc6 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006cee:	697a      	ldr	r2, [r7, #20]
 8006cf0:	2164      	movs	r1, #100	; 0x64
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f7ff ff8c 	bl	8006c10 <SPI_EndRxTxTransaction>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d005      	beq.n	8006d0a <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d02:	f043 0220 	orr.w	r2, r3, #32
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d10a      	bne.n	8006d28 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d12:	2300      	movs	r3, #0
 8006d14:	60fb      	str	r3, [r7, #12]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	60fb      	str	r3, [r7, #12]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	60fb      	str	r3, [r7, #12]
 8006d26:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d115      	bne.n	8006d5c <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	2b04      	cmp	r3, #4
 8006d3a:	d107      	bne.n	8006d4c <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f7ff fdf1 	bl	800692c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8006d4a:	e00e      	b.n	8006d6a <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f7fa fd31 	bl	80017bc <HAL_SPI_TxRxCpltCallback>
}
 8006d5a:	e006      	b.n	8006d6a <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f7ff fdeb 	bl	8006940 <HAL_SPI_ErrorCallback>
}
 8006d6a:	bf00      	nop
 8006d6c:	3718      	adds	r7, #24
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	20000004 	.word	0x20000004
 8006d78:	057619f1 	.word	0x057619f1

08006d7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d101      	bne.n	8006d8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e041      	b.n	8006e12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d106      	bne.n	8006da8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f7fb f9d0 	bl	8002148 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2202      	movs	r2, #2
 8006dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	3304      	adds	r3, #4
 8006db8:	4619      	mov	r1, r3
 8006dba:	4610      	mov	r0, r2
 8006dbc:	f000 fc54 	bl	8007668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3708      	adds	r7, #8
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
	...

08006e1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b085      	sub	sp, #20
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d001      	beq.n	8006e34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	e044      	b.n	8006ebe <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2202      	movs	r2, #2
 8006e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68da      	ldr	r2, [r3, #12]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f042 0201 	orr.w	r2, r2, #1
 8006e4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a1e      	ldr	r2, [pc, #120]	; (8006ecc <HAL_TIM_Base_Start_IT+0xb0>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d018      	beq.n	8006e88 <HAL_TIM_Base_Start_IT+0x6c>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e5e:	d013      	beq.n	8006e88 <HAL_TIM_Base_Start_IT+0x6c>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a1a      	ldr	r2, [pc, #104]	; (8006ed0 <HAL_TIM_Base_Start_IT+0xb4>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d00e      	beq.n	8006e88 <HAL_TIM_Base_Start_IT+0x6c>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a19      	ldr	r2, [pc, #100]	; (8006ed4 <HAL_TIM_Base_Start_IT+0xb8>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d009      	beq.n	8006e88 <HAL_TIM_Base_Start_IT+0x6c>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a17      	ldr	r2, [pc, #92]	; (8006ed8 <HAL_TIM_Base_Start_IT+0xbc>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d004      	beq.n	8006e88 <HAL_TIM_Base_Start_IT+0x6c>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a16      	ldr	r2, [pc, #88]	; (8006edc <HAL_TIM_Base_Start_IT+0xc0>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d111      	bne.n	8006eac <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	f003 0307 	and.w	r3, r3, #7
 8006e92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2b06      	cmp	r3, #6
 8006e98:	d010      	beq.n	8006ebc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f042 0201 	orr.w	r2, r2, #1
 8006ea8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eaa:	e007      	b.n	8006ebc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f042 0201 	orr.w	r2, r2, #1
 8006eba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3714      	adds	r7, #20
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr
 8006eca:	bf00      	nop
 8006ecc:	40010000 	.word	0x40010000
 8006ed0:	40000400 	.word	0x40000400
 8006ed4:	40000800 	.word	0x40000800
 8006ed8:	40000c00 	.word	0x40000c00
 8006edc:	40014000 	.word	0x40014000

08006ee0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b082      	sub	sp, #8
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d101      	bne.n	8006ef2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e041      	b.n	8006f76 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d106      	bne.n	8006f0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f839 	bl	8006f7e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2202      	movs	r2, #2
 8006f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	3304      	adds	r3, #4
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	4610      	mov	r0, r2
 8006f20:	f000 fba2 	bl	8007668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3708      	adds	r7, #8
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006f7e:	b480      	push	{r7}
 8006f80:	b083      	sub	sp, #12
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006f86:	bf00      	nop
 8006f88:	370c      	adds	r7, #12
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr
	...

08006f94 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d109      	bne.n	8006fb8 <HAL_TIM_PWM_Start+0x24>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	bf14      	ite	ne
 8006fb0:	2301      	movne	r3, #1
 8006fb2:	2300      	moveq	r3, #0
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	e022      	b.n	8006ffe <HAL_TIM_PWM_Start+0x6a>
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	2b04      	cmp	r3, #4
 8006fbc:	d109      	bne.n	8006fd2 <HAL_TIM_PWM_Start+0x3e>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	bf14      	ite	ne
 8006fca:	2301      	movne	r3, #1
 8006fcc:	2300      	moveq	r3, #0
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	e015      	b.n	8006ffe <HAL_TIM_PWM_Start+0x6a>
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	2b08      	cmp	r3, #8
 8006fd6:	d109      	bne.n	8006fec <HAL_TIM_PWM_Start+0x58>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	bf14      	ite	ne
 8006fe4:	2301      	movne	r3, #1
 8006fe6:	2300      	moveq	r3, #0
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	e008      	b.n	8006ffe <HAL_TIM_PWM_Start+0x6a>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	bf14      	ite	ne
 8006ff8:	2301      	movne	r3, #1
 8006ffa:	2300      	moveq	r3, #0
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d001      	beq.n	8007006 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	e068      	b.n	80070d8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d104      	bne.n	8007016 <HAL_TIM_PWM_Start+0x82>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2202      	movs	r2, #2
 8007010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007014:	e013      	b.n	800703e <HAL_TIM_PWM_Start+0xaa>
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	2b04      	cmp	r3, #4
 800701a:	d104      	bne.n	8007026 <HAL_TIM_PWM_Start+0x92>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2202      	movs	r2, #2
 8007020:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007024:	e00b      	b.n	800703e <HAL_TIM_PWM_Start+0xaa>
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	2b08      	cmp	r3, #8
 800702a:	d104      	bne.n	8007036 <HAL_TIM_PWM_Start+0xa2>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2202      	movs	r2, #2
 8007030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007034:	e003      	b.n	800703e <HAL_TIM_PWM_Start+0xaa>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2202      	movs	r2, #2
 800703a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	2201      	movs	r2, #1
 8007044:	6839      	ldr	r1, [r7, #0]
 8007046:	4618      	mov	r0, r3
 8007048:	f000 fdb4 	bl	8007bb4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a23      	ldr	r2, [pc, #140]	; (80070e0 <HAL_TIM_PWM_Start+0x14c>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d107      	bne.n	8007066 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007064:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a1d      	ldr	r2, [pc, #116]	; (80070e0 <HAL_TIM_PWM_Start+0x14c>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d018      	beq.n	80070a2 <HAL_TIM_PWM_Start+0x10e>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007078:	d013      	beq.n	80070a2 <HAL_TIM_PWM_Start+0x10e>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a19      	ldr	r2, [pc, #100]	; (80070e4 <HAL_TIM_PWM_Start+0x150>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d00e      	beq.n	80070a2 <HAL_TIM_PWM_Start+0x10e>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a17      	ldr	r2, [pc, #92]	; (80070e8 <HAL_TIM_PWM_Start+0x154>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d009      	beq.n	80070a2 <HAL_TIM_PWM_Start+0x10e>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a16      	ldr	r2, [pc, #88]	; (80070ec <HAL_TIM_PWM_Start+0x158>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d004      	beq.n	80070a2 <HAL_TIM_PWM_Start+0x10e>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a14      	ldr	r2, [pc, #80]	; (80070f0 <HAL_TIM_PWM_Start+0x15c>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d111      	bne.n	80070c6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	f003 0307 	and.w	r3, r3, #7
 80070ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2b06      	cmp	r3, #6
 80070b2:	d010      	beq.n	80070d6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f042 0201 	orr.w	r2, r2, #1
 80070c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070c4:	e007      	b.n	80070d6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f042 0201 	orr.w	r2, r2, #1
 80070d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3710      	adds	r7, #16
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	40010000 	.word	0x40010000
 80070e4:	40000400 	.word	0x40000400
 80070e8:	40000800 	.word	0x40000800
 80070ec:	40000c00 	.word	0x40000c00
 80070f0:	40014000 	.word	0x40014000

080070f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	691b      	ldr	r3, [r3, #16]
 8007102:	f003 0302 	and.w	r3, r3, #2
 8007106:	2b02      	cmp	r3, #2
 8007108:	d122      	bne.n	8007150 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	f003 0302 	and.w	r3, r3, #2
 8007114:	2b02      	cmp	r3, #2
 8007116:	d11b      	bne.n	8007150 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f06f 0202 	mvn.w	r2, #2
 8007120:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2201      	movs	r2, #1
 8007126:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	699b      	ldr	r3, [r3, #24]
 800712e:	f003 0303 	and.w	r3, r3, #3
 8007132:	2b00      	cmp	r3, #0
 8007134:	d003      	beq.n	800713e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 fa77 	bl	800762a <HAL_TIM_IC_CaptureCallback>
 800713c:	e005      	b.n	800714a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 fa69 	bl	8007616 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 fa7a 	bl	800763e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	f003 0304 	and.w	r3, r3, #4
 800715a:	2b04      	cmp	r3, #4
 800715c:	d122      	bne.n	80071a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	f003 0304 	and.w	r3, r3, #4
 8007168:	2b04      	cmp	r3, #4
 800716a:	d11b      	bne.n	80071a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f06f 0204 	mvn.w	r2, #4
 8007174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2202      	movs	r2, #2
 800717a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	699b      	ldr	r3, [r3, #24]
 8007182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007186:	2b00      	cmp	r3, #0
 8007188:	d003      	beq.n	8007192 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 fa4d 	bl	800762a <HAL_TIM_IC_CaptureCallback>
 8007190:	e005      	b.n	800719e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 fa3f 	bl	8007616 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 fa50 	bl	800763e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	f003 0308 	and.w	r3, r3, #8
 80071ae:	2b08      	cmp	r3, #8
 80071b0:	d122      	bne.n	80071f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	f003 0308 	and.w	r3, r3, #8
 80071bc:	2b08      	cmp	r3, #8
 80071be:	d11b      	bne.n	80071f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f06f 0208 	mvn.w	r2, #8
 80071c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2204      	movs	r2, #4
 80071ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	69db      	ldr	r3, [r3, #28]
 80071d6:	f003 0303 	and.w	r3, r3, #3
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d003      	beq.n	80071e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 fa23 	bl	800762a <HAL_TIM_IC_CaptureCallback>
 80071e4:	e005      	b.n	80071f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 fa15 	bl	8007616 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 fa26 	bl	800763e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	f003 0310 	and.w	r3, r3, #16
 8007202:	2b10      	cmp	r3, #16
 8007204:	d122      	bne.n	800724c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	f003 0310 	and.w	r3, r3, #16
 8007210:	2b10      	cmp	r3, #16
 8007212:	d11b      	bne.n	800724c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f06f 0210 	mvn.w	r2, #16
 800721c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2208      	movs	r2, #8
 8007222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	69db      	ldr	r3, [r3, #28]
 800722a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800722e:	2b00      	cmp	r3, #0
 8007230:	d003      	beq.n	800723a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 f9f9 	bl	800762a <HAL_TIM_IC_CaptureCallback>
 8007238:	e005      	b.n	8007246 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 f9eb 	bl	8007616 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 f9fc 	bl	800763e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	f003 0301 	and.w	r3, r3, #1
 8007256:	2b01      	cmp	r3, #1
 8007258:	d10e      	bne.n	8007278 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	f003 0301 	and.w	r3, r3, #1
 8007264:	2b01      	cmp	r3, #1
 8007266:	d107      	bne.n	8007278 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f06f 0201 	mvn.w	r2, #1
 8007270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f7fa fa48 	bl	8001708 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007282:	2b80      	cmp	r3, #128	; 0x80
 8007284:	d10e      	bne.n	80072a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007290:	2b80      	cmp	r3, #128	; 0x80
 8007292:	d107      	bne.n	80072a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800729c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 fcb7 	bl	8007c12 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ae:	2b40      	cmp	r3, #64	; 0x40
 80072b0:	d10e      	bne.n	80072d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072bc:	2b40      	cmp	r3, #64	; 0x40
 80072be:	d107      	bne.n	80072d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80072c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 f9c1 	bl	8007652 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	f003 0320 	and.w	r3, r3, #32
 80072da:	2b20      	cmp	r3, #32
 80072dc:	d10e      	bne.n	80072fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	68db      	ldr	r3, [r3, #12]
 80072e4:	f003 0320 	and.w	r3, r3, #32
 80072e8:	2b20      	cmp	r3, #32
 80072ea:	d107      	bne.n	80072fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f06f 0220 	mvn.w	r2, #32
 80072f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 fc81 	bl	8007bfe <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80072fc:	bf00      	nop
 80072fe:	3708      	adds	r7, #8
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b086      	sub	sp, #24
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007310:	2300      	movs	r3, #0
 8007312:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800731a:	2b01      	cmp	r3, #1
 800731c:	d101      	bne.n	8007322 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800731e:	2302      	movs	r3, #2
 8007320:	e0ae      	b.n	8007480 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2201      	movs	r2, #1
 8007326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2b0c      	cmp	r3, #12
 800732e:	f200 809f 	bhi.w	8007470 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007332:	a201      	add	r2, pc, #4	; (adr r2, 8007338 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007338:	0800736d 	.word	0x0800736d
 800733c:	08007471 	.word	0x08007471
 8007340:	08007471 	.word	0x08007471
 8007344:	08007471 	.word	0x08007471
 8007348:	080073ad 	.word	0x080073ad
 800734c:	08007471 	.word	0x08007471
 8007350:	08007471 	.word	0x08007471
 8007354:	08007471 	.word	0x08007471
 8007358:	080073ef 	.word	0x080073ef
 800735c:	08007471 	.word	0x08007471
 8007360:	08007471 	.word	0x08007471
 8007364:	08007471 	.word	0x08007471
 8007368:	0800742f 	.word	0x0800742f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	68b9      	ldr	r1, [r7, #8]
 8007372:	4618      	mov	r0, r3
 8007374:	f000 f9f8 	bl	8007768 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	699a      	ldr	r2, [r3, #24]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f042 0208 	orr.w	r2, r2, #8
 8007386:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	699a      	ldr	r2, [r3, #24]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f022 0204 	bic.w	r2, r2, #4
 8007396:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	6999      	ldr	r1, [r3, #24]
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	691a      	ldr	r2, [r3, #16]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	430a      	orrs	r2, r1
 80073a8:	619a      	str	r2, [r3, #24]
      break;
 80073aa:	e064      	b.n	8007476 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	68b9      	ldr	r1, [r7, #8]
 80073b2:	4618      	mov	r0, r3
 80073b4:	f000 fa3e 	bl	8007834 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	699a      	ldr	r2, [r3, #24]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	699a      	ldr	r2, [r3, #24]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	6999      	ldr	r1, [r3, #24]
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	691b      	ldr	r3, [r3, #16]
 80073e2:	021a      	lsls	r2, r3, #8
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	430a      	orrs	r2, r1
 80073ea:	619a      	str	r2, [r3, #24]
      break;
 80073ec:	e043      	b.n	8007476 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	68b9      	ldr	r1, [r7, #8]
 80073f4:	4618      	mov	r0, r3
 80073f6:	f000 fa89 	bl	800790c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	69da      	ldr	r2, [r3, #28]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f042 0208 	orr.w	r2, r2, #8
 8007408:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	69da      	ldr	r2, [r3, #28]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f022 0204 	bic.w	r2, r2, #4
 8007418:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	69d9      	ldr	r1, [r3, #28]
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	691a      	ldr	r2, [r3, #16]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	430a      	orrs	r2, r1
 800742a:	61da      	str	r2, [r3, #28]
      break;
 800742c:	e023      	b.n	8007476 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	68b9      	ldr	r1, [r7, #8]
 8007434:	4618      	mov	r0, r3
 8007436:	f000 fad3 	bl	80079e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	69da      	ldr	r2, [r3, #28]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007448:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	69da      	ldr	r2, [r3, #28]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007458:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	69d9      	ldr	r1, [r3, #28]
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	691b      	ldr	r3, [r3, #16]
 8007464:	021a      	lsls	r2, r3, #8
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	430a      	orrs	r2, r1
 800746c:	61da      	str	r2, [r3, #28]
      break;
 800746e:	e002      	b.n	8007476 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	75fb      	strb	r3, [r7, #23]
      break;
 8007474:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2200      	movs	r2, #0
 800747a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800747e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007480:	4618      	mov	r0, r3
 8007482:	3718      	adds	r7, #24
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007492:	2300      	movs	r3, #0
 8007494:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800749c:	2b01      	cmp	r3, #1
 800749e:	d101      	bne.n	80074a4 <HAL_TIM_ConfigClockSource+0x1c>
 80074a0:	2302      	movs	r3, #2
 80074a2:	e0b4      	b.n	800760e <HAL_TIM_ConfigClockSource+0x186>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2202      	movs	r2, #2
 80074b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80074c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80074ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	68ba      	ldr	r2, [r7, #8]
 80074d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074dc:	d03e      	beq.n	800755c <HAL_TIM_ConfigClockSource+0xd4>
 80074de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074e2:	f200 8087 	bhi.w	80075f4 <HAL_TIM_ConfigClockSource+0x16c>
 80074e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074ea:	f000 8086 	beq.w	80075fa <HAL_TIM_ConfigClockSource+0x172>
 80074ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074f2:	d87f      	bhi.n	80075f4 <HAL_TIM_ConfigClockSource+0x16c>
 80074f4:	2b70      	cmp	r3, #112	; 0x70
 80074f6:	d01a      	beq.n	800752e <HAL_TIM_ConfigClockSource+0xa6>
 80074f8:	2b70      	cmp	r3, #112	; 0x70
 80074fa:	d87b      	bhi.n	80075f4 <HAL_TIM_ConfigClockSource+0x16c>
 80074fc:	2b60      	cmp	r3, #96	; 0x60
 80074fe:	d050      	beq.n	80075a2 <HAL_TIM_ConfigClockSource+0x11a>
 8007500:	2b60      	cmp	r3, #96	; 0x60
 8007502:	d877      	bhi.n	80075f4 <HAL_TIM_ConfigClockSource+0x16c>
 8007504:	2b50      	cmp	r3, #80	; 0x50
 8007506:	d03c      	beq.n	8007582 <HAL_TIM_ConfigClockSource+0xfa>
 8007508:	2b50      	cmp	r3, #80	; 0x50
 800750a:	d873      	bhi.n	80075f4 <HAL_TIM_ConfigClockSource+0x16c>
 800750c:	2b40      	cmp	r3, #64	; 0x40
 800750e:	d058      	beq.n	80075c2 <HAL_TIM_ConfigClockSource+0x13a>
 8007510:	2b40      	cmp	r3, #64	; 0x40
 8007512:	d86f      	bhi.n	80075f4 <HAL_TIM_ConfigClockSource+0x16c>
 8007514:	2b30      	cmp	r3, #48	; 0x30
 8007516:	d064      	beq.n	80075e2 <HAL_TIM_ConfigClockSource+0x15a>
 8007518:	2b30      	cmp	r3, #48	; 0x30
 800751a:	d86b      	bhi.n	80075f4 <HAL_TIM_ConfigClockSource+0x16c>
 800751c:	2b20      	cmp	r3, #32
 800751e:	d060      	beq.n	80075e2 <HAL_TIM_ConfigClockSource+0x15a>
 8007520:	2b20      	cmp	r3, #32
 8007522:	d867      	bhi.n	80075f4 <HAL_TIM_ConfigClockSource+0x16c>
 8007524:	2b00      	cmp	r3, #0
 8007526:	d05c      	beq.n	80075e2 <HAL_TIM_ConfigClockSource+0x15a>
 8007528:	2b10      	cmp	r3, #16
 800752a:	d05a      	beq.n	80075e2 <HAL_TIM_ConfigClockSource+0x15a>
 800752c:	e062      	b.n	80075f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6818      	ldr	r0, [r3, #0]
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	6899      	ldr	r1, [r3, #8]
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	685a      	ldr	r2, [r3, #4]
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	f000 fb19 	bl	8007b74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007550:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68ba      	ldr	r2, [r7, #8]
 8007558:	609a      	str	r2, [r3, #8]
      break;
 800755a:	e04f      	b.n	80075fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6818      	ldr	r0, [r3, #0]
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	6899      	ldr	r1, [r3, #8]
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	685a      	ldr	r2, [r3, #4]
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	f000 fb02 	bl	8007b74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	689a      	ldr	r2, [r3, #8]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800757e:	609a      	str	r2, [r3, #8]
      break;
 8007580:	e03c      	b.n	80075fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6818      	ldr	r0, [r3, #0]
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	6859      	ldr	r1, [r3, #4]
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	68db      	ldr	r3, [r3, #12]
 800758e:	461a      	mov	r2, r3
 8007590:	f000 fa76 	bl	8007a80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2150      	movs	r1, #80	; 0x50
 800759a:	4618      	mov	r0, r3
 800759c:	f000 facf 	bl	8007b3e <TIM_ITRx_SetConfig>
      break;
 80075a0:	e02c      	b.n	80075fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6818      	ldr	r0, [r3, #0]
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	6859      	ldr	r1, [r3, #4]
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	461a      	mov	r2, r3
 80075b0:	f000 fa95 	bl	8007ade <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2160      	movs	r1, #96	; 0x60
 80075ba:	4618      	mov	r0, r3
 80075bc:	f000 fabf 	bl	8007b3e <TIM_ITRx_SetConfig>
      break;
 80075c0:	e01c      	b.n	80075fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6818      	ldr	r0, [r3, #0]
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	6859      	ldr	r1, [r3, #4]
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	461a      	mov	r2, r3
 80075d0:	f000 fa56 	bl	8007a80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	2140      	movs	r1, #64	; 0x40
 80075da:	4618      	mov	r0, r3
 80075dc:	f000 faaf 	bl	8007b3e <TIM_ITRx_SetConfig>
      break;
 80075e0:	e00c      	b.n	80075fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4619      	mov	r1, r3
 80075ec:	4610      	mov	r0, r2
 80075ee:	f000 faa6 	bl	8007b3e <TIM_ITRx_SetConfig>
      break;
 80075f2:	e003      	b.n	80075fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	73fb      	strb	r3, [r7, #15]
      break;
 80075f8:	e000      	b.n	80075fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80075fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2201      	movs	r2, #1
 8007600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800760c:	7bfb      	ldrb	r3, [r7, #15]
}
 800760e:	4618      	mov	r0, r3
 8007610:	3710      	adds	r7, #16
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}

08007616 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007616:	b480      	push	{r7}
 8007618:	b083      	sub	sp, #12
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800761e:	bf00      	nop
 8007620:	370c      	adds	r7, #12
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr

0800762a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800762a:	b480      	push	{r7}
 800762c:	b083      	sub	sp, #12
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007632:	bf00      	nop
 8007634:	370c      	adds	r7, #12
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr

0800763e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800763e:	b480      	push	{r7}
 8007640:	b083      	sub	sp, #12
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007646:	bf00      	nop
 8007648:	370c      	adds	r7, #12
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr

08007652 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007652:	b480      	push	{r7}
 8007654:	b083      	sub	sp, #12
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800765a:	bf00      	nop
 800765c:	370c      	adds	r7, #12
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr
	...

08007668 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007668:	b480      	push	{r7}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	4a34      	ldr	r2, [pc, #208]	; (800774c <TIM_Base_SetConfig+0xe4>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d00f      	beq.n	80076a0 <TIM_Base_SetConfig+0x38>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007686:	d00b      	beq.n	80076a0 <TIM_Base_SetConfig+0x38>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	4a31      	ldr	r2, [pc, #196]	; (8007750 <TIM_Base_SetConfig+0xe8>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d007      	beq.n	80076a0 <TIM_Base_SetConfig+0x38>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	4a30      	ldr	r2, [pc, #192]	; (8007754 <TIM_Base_SetConfig+0xec>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d003      	beq.n	80076a0 <TIM_Base_SetConfig+0x38>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	4a2f      	ldr	r2, [pc, #188]	; (8007758 <TIM_Base_SetConfig+0xf0>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d108      	bne.n	80076b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	68fa      	ldr	r2, [r7, #12]
 80076ae:	4313      	orrs	r3, r2
 80076b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4a25      	ldr	r2, [pc, #148]	; (800774c <TIM_Base_SetConfig+0xe4>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d01b      	beq.n	80076f2 <TIM_Base_SetConfig+0x8a>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076c0:	d017      	beq.n	80076f2 <TIM_Base_SetConfig+0x8a>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4a22      	ldr	r2, [pc, #136]	; (8007750 <TIM_Base_SetConfig+0xe8>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d013      	beq.n	80076f2 <TIM_Base_SetConfig+0x8a>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	4a21      	ldr	r2, [pc, #132]	; (8007754 <TIM_Base_SetConfig+0xec>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d00f      	beq.n	80076f2 <TIM_Base_SetConfig+0x8a>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	4a20      	ldr	r2, [pc, #128]	; (8007758 <TIM_Base_SetConfig+0xf0>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d00b      	beq.n	80076f2 <TIM_Base_SetConfig+0x8a>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4a1f      	ldr	r2, [pc, #124]	; (800775c <TIM_Base_SetConfig+0xf4>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d007      	beq.n	80076f2 <TIM_Base_SetConfig+0x8a>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	4a1e      	ldr	r2, [pc, #120]	; (8007760 <TIM_Base_SetConfig+0xf8>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d003      	beq.n	80076f2 <TIM_Base_SetConfig+0x8a>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	4a1d      	ldr	r2, [pc, #116]	; (8007764 <TIM_Base_SetConfig+0xfc>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d108      	bne.n	8007704 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	68db      	ldr	r3, [r3, #12]
 80076fe:	68fa      	ldr	r2, [r7, #12]
 8007700:	4313      	orrs	r3, r2
 8007702:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	695b      	ldr	r3, [r3, #20]
 800770e:	4313      	orrs	r3, r2
 8007710:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	689a      	ldr	r2, [r3, #8]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a08      	ldr	r2, [pc, #32]	; (800774c <TIM_Base_SetConfig+0xe4>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d103      	bne.n	8007738 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	691a      	ldr	r2, [r3, #16]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	615a      	str	r2, [r3, #20]
}
 800773e:	bf00      	nop
 8007740:	3714      	adds	r7, #20
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr
 800774a:	bf00      	nop
 800774c:	40010000 	.word	0x40010000
 8007750:	40000400 	.word	0x40000400
 8007754:	40000800 	.word	0x40000800
 8007758:	40000c00 	.word	0x40000c00
 800775c:	40014000 	.word	0x40014000
 8007760:	40014400 	.word	0x40014400
 8007764:	40014800 	.word	0x40014800

08007768 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007768:	b480      	push	{r7}
 800776a:	b087      	sub	sp, #28
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a1b      	ldr	r3, [r3, #32]
 8007776:	f023 0201 	bic.w	r2, r3, #1
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a1b      	ldr	r3, [r3, #32]
 8007782:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	699b      	ldr	r3, [r3, #24]
 800778e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f023 0303 	bic.w	r3, r3, #3
 800779e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	68fa      	ldr	r2, [r7, #12]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	f023 0302 	bic.w	r3, r3, #2
 80077b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	697a      	ldr	r2, [r7, #20]
 80077b8:	4313      	orrs	r3, r2
 80077ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4a1c      	ldr	r2, [pc, #112]	; (8007830 <TIM_OC1_SetConfig+0xc8>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d10c      	bne.n	80077de <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	f023 0308 	bic.w	r3, r3, #8
 80077ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	68db      	ldr	r3, [r3, #12]
 80077d0:	697a      	ldr	r2, [r7, #20]
 80077d2:	4313      	orrs	r3, r2
 80077d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	f023 0304 	bic.w	r3, r3, #4
 80077dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	4a13      	ldr	r2, [pc, #76]	; (8007830 <TIM_OC1_SetConfig+0xc8>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d111      	bne.n	800780a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80077f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	695b      	ldr	r3, [r3, #20]
 80077fa:	693a      	ldr	r2, [r7, #16]
 80077fc:	4313      	orrs	r3, r2
 80077fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	699b      	ldr	r3, [r3, #24]
 8007804:	693a      	ldr	r2, [r7, #16]
 8007806:	4313      	orrs	r3, r2
 8007808:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	693a      	ldr	r2, [r7, #16]
 800780e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	68fa      	ldr	r2, [r7, #12]
 8007814:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	685a      	ldr	r2, [r3, #4]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	697a      	ldr	r2, [r7, #20]
 8007822:	621a      	str	r2, [r3, #32]
}
 8007824:	bf00      	nop
 8007826:	371c      	adds	r7, #28
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr
 8007830:	40010000 	.word	0x40010000

08007834 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007834:	b480      	push	{r7}
 8007836:	b087      	sub	sp, #28
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6a1b      	ldr	r3, [r3, #32]
 8007842:	f023 0210 	bic.w	r2, r3, #16
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a1b      	ldr	r3, [r3, #32]
 800784e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	699b      	ldr	r3, [r3, #24]
 800785a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800786a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	021b      	lsls	r3, r3, #8
 8007872:	68fa      	ldr	r2, [r7, #12]
 8007874:	4313      	orrs	r3, r2
 8007876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	f023 0320 	bic.w	r3, r3, #32
 800787e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	011b      	lsls	r3, r3, #4
 8007886:	697a      	ldr	r2, [r7, #20]
 8007888:	4313      	orrs	r3, r2
 800788a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	4a1e      	ldr	r2, [pc, #120]	; (8007908 <TIM_OC2_SetConfig+0xd4>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d10d      	bne.n	80078b0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800789a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	011b      	lsls	r3, r3, #4
 80078a2:	697a      	ldr	r2, [r7, #20]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4a15      	ldr	r2, [pc, #84]	; (8007908 <TIM_OC2_SetConfig+0xd4>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d113      	bne.n	80078e0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	695b      	ldr	r3, [r3, #20]
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	693a      	ldr	r2, [r7, #16]
 80078d0:	4313      	orrs	r3, r2
 80078d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	699b      	ldr	r3, [r3, #24]
 80078d8:	009b      	lsls	r3, r3, #2
 80078da:	693a      	ldr	r2, [r7, #16]
 80078dc:	4313      	orrs	r3, r2
 80078de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	693a      	ldr	r2, [r7, #16]
 80078e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	68fa      	ldr	r2, [r7, #12]
 80078ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	685a      	ldr	r2, [r3, #4]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	697a      	ldr	r2, [r7, #20]
 80078f8:	621a      	str	r2, [r3, #32]
}
 80078fa:	bf00      	nop
 80078fc:	371c      	adds	r7, #28
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr
 8007906:	bf00      	nop
 8007908:	40010000 	.word	0x40010000

0800790c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800790c:	b480      	push	{r7}
 800790e:	b087      	sub	sp, #28
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6a1b      	ldr	r3, [r3, #32]
 800791a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6a1b      	ldr	r3, [r3, #32]
 8007926:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	69db      	ldr	r3, [r3, #28]
 8007932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800793a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f023 0303 	bic.w	r3, r3, #3
 8007942:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	68fa      	ldr	r2, [r7, #12]
 800794a:	4313      	orrs	r3, r2
 800794c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007954:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	021b      	lsls	r3, r3, #8
 800795c:	697a      	ldr	r2, [r7, #20]
 800795e:	4313      	orrs	r3, r2
 8007960:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4a1d      	ldr	r2, [pc, #116]	; (80079dc <TIM_OC3_SetConfig+0xd0>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d10d      	bne.n	8007986 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007970:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	021b      	lsls	r3, r3, #8
 8007978:	697a      	ldr	r2, [r7, #20]
 800797a:	4313      	orrs	r3, r2
 800797c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007984:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	4a14      	ldr	r2, [pc, #80]	; (80079dc <TIM_OC3_SetConfig+0xd0>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d113      	bne.n	80079b6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007994:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800799c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	695b      	ldr	r3, [r3, #20]
 80079a2:	011b      	lsls	r3, r3, #4
 80079a4:	693a      	ldr	r2, [r7, #16]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	699b      	ldr	r3, [r3, #24]
 80079ae:	011b      	lsls	r3, r3, #4
 80079b0:	693a      	ldr	r2, [r7, #16]
 80079b2:	4313      	orrs	r3, r2
 80079b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	693a      	ldr	r2, [r7, #16]
 80079ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	685a      	ldr	r2, [r3, #4]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	697a      	ldr	r2, [r7, #20]
 80079ce:	621a      	str	r2, [r3, #32]
}
 80079d0:	bf00      	nop
 80079d2:	371c      	adds	r7, #28
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr
 80079dc:	40010000 	.word	0x40010000

080079e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b087      	sub	sp, #28
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6a1b      	ldr	r3, [r3, #32]
 80079ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6a1b      	ldr	r3, [r3, #32]
 80079fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	69db      	ldr	r3, [r3, #28]
 8007a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	021b      	lsls	r3, r3, #8
 8007a1e:	68fa      	ldr	r2, [r7, #12]
 8007a20:	4313      	orrs	r3, r2
 8007a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	031b      	lsls	r3, r3, #12
 8007a32:	693a      	ldr	r2, [r7, #16]
 8007a34:	4313      	orrs	r3, r2
 8007a36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	4a10      	ldr	r2, [pc, #64]	; (8007a7c <TIM_OC4_SetConfig+0x9c>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d109      	bne.n	8007a54 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	695b      	ldr	r3, [r3, #20]
 8007a4c:	019b      	lsls	r3, r3, #6
 8007a4e:	697a      	ldr	r2, [r7, #20]
 8007a50:	4313      	orrs	r3, r2
 8007a52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	697a      	ldr	r2, [r7, #20]
 8007a58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	68fa      	ldr	r2, [r7, #12]
 8007a5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	685a      	ldr	r2, [r3, #4]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	693a      	ldr	r2, [r7, #16]
 8007a6c:	621a      	str	r2, [r3, #32]
}
 8007a6e:	bf00      	nop
 8007a70:	371c      	adds	r7, #28
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr
 8007a7a:	bf00      	nop
 8007a7c:	40010000 	.word	0x40010000

08007a80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b087      	sub	sp, #28
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6a1b      	ldr	r3, [r3, #32]
 8007a90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6a1b      	ldr	r3, [r3, #32]
 8007a96:	f023 0201 	bic.w	r2, r3, #1
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	699b      	ldr	r3, [r3, #24]
 8007aa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007aaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	011b      	lsls	r3, r3, #4
 8007ab0:	693a      	ldr	r2, [r7, #16]
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	f023 030a 	bic.w	r3, r3, #10
 8007abc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007abe:	697a      	ldr	r2, [r7, #20]
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	693a      	ldr	r2, [r7, #16]
 8007aca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	697a      	ldr	r2, [r7, #20]
 8007ad0:	621a      	str	r2, [r3, #32]
}
 8007ad2:	bf00      	nop
 8007ad4:	371c      	adds	r7, #28
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr

08007ade <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ade:	b480      	push	{r7}
 8007ae0:	b087      	sub	sp, #28
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	60f8      	str	r0, [r7, #12]
 8007ae6:	60b9      	str	r1, [r7, #8]
 8007ae8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	6a1b      	ldr	r3, [r3, #32]
 8007aee:	f023 0210 	bic.w	r2, r3, #16
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	699b      	ldr	r3, [r3, #24]
 8007afa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6a1b      	ldr	r3, [r3, #32]
 8007b00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	031b      	lsls	r3, r3, #12
 8007b0e:	697a      	ldr	r2, [r7, #20]
 8007b10:	4313      	orrs	r3, r2
 8007b12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b1a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	011b      	lsls	r3, r3, #4
 8007b20:	693a      	ldr	r2, [r7, #16]
 8007b22:	4313      	orrs	r3, r2
 8007b24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	697a      	ldr	r2, [r7, #20]
 8007b2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	693a      	ldr	r2, [r7, #16]
 8007b30:	621a      	str	r2, [r3, #32]
}
 8007b32:	bf00      	nop
 8007b34:	371c      	adds	r7, #28
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr

08007b3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b3e:	b480      	push	{r7}
 8007b40:	b085      	sub	sp, #20
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
 8007b46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b56:	683a      	ldr	r2, [r7, #0]
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	f043 0307 	orr.w	r3, r3, #7
 8007b60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	68fa      	ldr	r2, [r7, #12]
 8007b66:	609a      	str	r2, [r3, #8]
}
 8007b68:	bf00      	nop
 8007b6a:	3714      	adds	r7, #20
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b087      	sub	sp, #28
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	60f8      	str	r0, [r7, #12]
 8007b7c:	60b9      	str	r1, [r7, #8]
 8007b7e:	607a      	str	r2, [r7, #4]
 8007b80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	021a      	lsls	r2, r3, #8
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	431a      	orrs	r2, r3
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	697a      	ldr	r2, [r7, #20]
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	697a      	ldr	r2, [r7, #20]
 8007ba6:	609a      	str	r2, [r3, #8]
}
 8007ba8:	bf00      	nop
 8007baa:	371c      	adds	r7, #28
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr

08007bb4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b087      	sub	sp, #28
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	60f8      	str	r0, [r7, #12]
 8007bbc:	60b9      	str	r1, [r7, #8]
 8007bbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	f003 031f 	and.w	r3, r3, #31
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8007bcc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6a1a      	ldr	r2, [r3, #32]
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	43db      	mvns	r3, r3
 8007bd6:	401a      	ands	r2, r3
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	6a1a      	ldr	r2, [r3, #32]
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	f003 031f 	and.w	r3, r3, #31
 8007be6:	6879      	ldr	r1, [r7, #4]
 8007be8:	fa01 f303 	lsl.w	r3, r1, r3
 8007bec:	431a      	orrs	r2, r3
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	621a      	str	r2, [r3, #32]
}
 8007bf2:	bf00      	nop
 8007bf4:	371c      	adds	r7, #28
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr

08007bfe <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007bfe:	b480      	push	{r7}
 8007c00:	b083      	sub	sp, #12
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c06:	bf00      	nop
 8007c08:	370c      	adds	r7, #12
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr

08007c12 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c12:	b480      	push	{r7}
 8007c14:	b083      	sub	sp, #12
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c1a:	bf00      	nop
 8007c1c:	370c      	adds	r7, #12
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr

08007c26 <memset>:
 8007c26:	4402      	add	r2, r0
 8007c28:	4603      	mov	r3, r0
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d100      	bne.n	8007c30 <memset+0xa>
 8007c2e:	4770      	bx	lr
 8007c30:	f803 1b01 	strb.w	r1, [r3], #1
 8007c34:	e7f9      	b.n	8007c2a <memset+0x4>
	...

08007c38 <__libc_init_array>:
 8007c38:	b570      	push	{r4, r5, r6, lr}
 8007c3a:	4d0d      	ldr	r5, [pc, #52]	; (8007c70 <__libc_init_array+0x38>)
 8007c3c:	4c0d      	ldr	r4, [pc, #52]	; (8007c74 <__libc_init_array+0x3c>)
 8007c3e:	1b64      	subs	r4, r4, r5
 8007c40:	10a4      	asrs	r4, r4, #2
 8007c42:	2600      	movs	r6, #0
 8007c44:	42a6      	cmp	r6, r4
 8007c46:	d109      	bne.n	8007c5c <__libc_init_array+0x24>
 8007c48:	4d0b      	ldr	r5, [pc, #44]	; (8007c78 <__libc_init_array+0x40>)
 8007c4a:	4c0c      	ldr	r4, [pc, #48]	; (8007c7c <__libc_init_array+0x44>)
 8007c4c:	f000 f818 	bl	8007c80 <_init>
 8007c50:	1b64      	subs	r4, r4, r5
 8007c52:	10a4      	asrs	r4, r4, #2
 8007c54:	2600      	movs	r6, #0
 8007c56:	42a6      	cmp	r6, r4
 8007c58:	d105      	bne.n	8007c66 <__libc_init_array+0x2e>
 8007c5a:	bd70      	pop	{r4, r5, r6, pc}
 8007c5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c60:	4798      	blx	r3
 8007c62:	3601      	adds	r6, #1
 8007c64:	e7ee      	b.n	8007c44 <__libc_init_array+0xc>
 8007c66:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c6a:	4798      	blx	r3
 8007c6c:	3601      	adds	r6, #1
 8007c6e:	e7f2      	b.n	8007c56 <__libc_init_array+0x1e>
 8007c70:	08007cc0 	.word	0x08007cc0
 8007c74:	08007cc0 	.word	0x08007cc0
 8007c78:	08007cc0 	.word	0x08007cc0
 8007c7c:	08007cc4 	.word	0x08007cc4

08007c80 <_init>:
 8007c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c82:	bf00      	nop
 8007c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c86:	bc08      	pop	{r3}
 8007c88:	469e      	mov	lr, r3
 8007c8a:	4770      	bx	lr

08007c8c <_fini>:
 8007c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c8e:	bf00      	nop
 8007c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c92:	bc08      	pop	{r3}
 8007c94:	469e      	mov	lr, r3
 8007c96:	4770      	bx	lr
